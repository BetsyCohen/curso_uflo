{
  "hash": "2fb1dd0f8af55ab5c917709a12e9e9fa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introducción a Tidyverse: union y pivoteo de tablas\"\nsubtitle: \"Análisis de Datos 1 - Unidad 3\"\nauthor: \"Betsy Cohen\"\nlogo: \"images/logo-uflo.png\"\ndate: \"04/10/2025\"\nformat:\n  revealjs:\n    width: 1600\n    height: 900\n    theme: slides.scss\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\nexecute:\n  echo: true\ndf-print: kable\n---\n\n\n\n\n## Clase de Hoy: Más Allá de los Verbos Básicos 🚀\n\nEn la clase anterior, nos familiarizamos con los verbos esenciales del `dplyr` y cómo combinarlos con pipes para transformar datos.\n\nAhora, vamos a expandir nuestro arsenal de herramientas del tidyverse explorando dos operaciones fundamentales:\n\n-   Unión de Tablas (Joins): Combinar datos de múltiples tablas relacionadas.\n\n-   Pivoteo de Tablas (Pivoting): Reorganizar la estructura de las tablas para facilitar el análisis.\n\nEstas operaciones son clave para trabajar con conjuntos de datos complejos y cuando quieras darte cuenta van a ser parte de tu trabajo diario con datos.\n\n## Que las tablas sean unidas porque esa es la ley primera\n\nConociendo la familia de funciones join()\n\n## Qué es un join()\n\nEn el análisis de datos, a menudo tenemos información distribuida en múltiples tablas relacionadas y necesitamos unirlas para combinar la información y poder analizarla en conjunto.\n\nEjemplo:\n\n**Tabla 1:** `encc_personas_region`: Información agregada por región\n\n**Tabla 2:** `tamanio_localidad_region`: Información sobre el tamaño de localidad por región\n\nQueremos unir estas tablas para tener en una sola tabla información combinada por región.\n\n## Que tipos de join() existen {.smaller}\n\n`dplyr` nos ofrece una familia de funciones \\*\\*\\*\\_join()\\*\\* para realizar diferentes tipos de uniones de tablas, basadas en la lógica de las bases de datos relacionales. Los principales tipos son:\n\n|                                                                                                                                                                                                          |                                                                               |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------|\n| **left_join:** Mantiene TODAS las filas de tabla_A (izquierda) y agrega las columnas correspondientes de tabla_B donde hay coincidencia en la columna_clave. Si no hay coincidencia, se completa con NA. | ![](images/left-join.gif){fig-align=\"center\" fig-align=\"bottom\" width=\"200\"}  |\n| **right_join:** Similar a left_join, pero mantiene TODAS las filas de tabla_B (derecha) y agrega las columnas de tabla_A donde hay coincidencia.                                                         | ![](images/right-join.gif){fig-align=\"center\" fig-align=\"bottom\" width=\"200\"} |\n\n## Que tipos de join() existen {.smaller}\n\n`dplyr` nos ofrece una familia de funciones \\*\\*\\*\\_join()\\*\\* para realizar diferentes tipos de uniones de tablas, basadas en la lógica de las bases de datos relacionales. Los principales tipos son:\n\n|                                                                                                                                                                                                |                                                            |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|\n| **inner_join:** Mantiene solo las filas que tienen coincidencia en la columna_clave en AMBAS tablas.Es la intersección de las tablas.                                                          | ![](images/inner-join.gif){fig-align=\"bottom\" width=\"200\"} |\n| **full_join:** Unión COMPLETA (EXTERNA). Mantiene TODAS las filas de AMBAS tablas, combinando las filas donde hay coincidencia y rellenando con NA donde no la hay. Es la unión de las tablas. | ![](images/full-join.gif){fig-align=\"bottom\" width=\"200\"}  |\n\n## Otros tipos de join\n\n::: callout-note\n**semi_join** Unión SEMI-IZQUIERDA. Mantiene solo las filas de tabla_A que tienen coincidencia en la columna_clave en tabla_B, pero NO agrega las columnas de tabla_B. Sirve para filtrar tabla_A basándose en la presencia de coincidencias en tabla_B.\n\n**anti_join** Unión ANTI-IZQUIERDA. Mantiene solo las filas de tabla_A que NO tienen coincidencia en la columna_clave en tabla_B. Sirve para filtrar tabla_A y quedarte solo con las filas sin coincidencias en tabla_B.\n:::\n\n## ¿Cómo Unimos Tablas con dplyr? 🛠️\n\nTodas las funciones \\*\\_join() de dplyr comparten una sintaxis similar:\n\n``` r\nnueva_tabla_unida <- tabla_A %>%\ntipo_de_join(tabla_B, by = \"columna_clave\")\n```\n\n-   `tabla_A %>% tipo_de_join(tabla_B, ...)`: Siempre empezamos con la tabla \"izquierda\" `(tabla_A)` y la \"pipeamos\" a la función `tipo_de_join()`.\n\n-   `tabla_B`: Es la tabla \"derecha\" que queremos unir a `tabla_A`.\n\n-   `by = \"columna_clave\"`: CLAVE DE UNIÓN. Especificamos qué columna (o columnas) se utilizan para encontrar las coincidencias entre las filas de tabla_A y tabla_B. Las tablas se unirán basándose en los valores compartidos en esta columna. El nombre de la columna clave debe ser el mismo en ambas tablas, o podemos usar `by = c(\"columna_A\" = \"columna_B\")` si tienen nombres diferentes.\n\n## Ejemplo de left_join() ⬅️ {.smaller .scrollable}\n\nVamos a asumir que `encc_personas_region` es nuestra tabla \"principal\" (izquierda) y queremos agregarle información de `tamanio_localidad_region` (tabla derecha), manteniendo todas las regiones de `encc_personas_region`:\n\nDe nuevo partimos de:\n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(encc_personas_region,3)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region | total_personas|\n|:------|--------------:|\n|CABA   |            388|\n|CENTRO |            608|\n|CUYO   |            431|\n\n</div>\n:::\n:::\n\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(tamanio_localidad_region,3)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region | Mas de 400mil| 80mil a 400mil| Menos 80mil|\n|:------|-------------:|--------------:|-----------:|\n|CABA   |           388|              0|           0|\n|CENTRO |           382|            206|          20|\n|CUYO   |           308|            105|          18|\n\n</div>\n:::\n:::\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabla_left_join <- encc_personas_region %>% # tabla de la izquierda\n  left_join(tamanio_localidad_region, by = \"region\") # unir tabla de la derecha usando como clave la variable \"Region\"\n\ntabla_left_join\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region    | total_personas| Mas de 400mil| 80mil a 400mil| Menos 80mil|\n|:---------|--------------:|-------------:|--------------:|-----------:|\n|CABA      |            388|           388|              0|           0|\n|CENTRO    |            608|           382|            206|          20|\n|CUYO      |            431|           308|            105|          18|\n|GBA       |            620|           614|              5|           1|\n|NEA       |            448|             0|            354|          94|\n|NOA       |            446|           181|            177|          88|\n|PATAGONIA |            439|           103|            295|          41|\n\n</div>\n:::\n:::\n\n\n## Elegir el Tipo de Join Correcto 🧐 {.incremental .smaller}\n\nLa elección del tipo de join depende de lo que quieras lograr en tu análisis.\n\n-   `inner_join():` Cuando necesitas datos completos y solo te interesan las filas que tienen información en ambas tablas. \"Intersección\".\n\n-   `left_join():` Cuando quieres mantener todos los datos de tu tabla principal (izquierda) y agregar información complementaria de otra tabla (derecha), aunque falte información en la tabla derecha para algunas filas. \"Prioriza la tabla izquierda\".\n\n-   `right_join():` Similar a left_join, pero priorizando la tabla derecha. Menos común en la práctica.\n\n-   `full_join():` Cuando quieres mantener todos los datos de ambas tablas, incluso si no hay coincidencias. \"Unión completa\".\n\n-   `semi_join()` y `anti_join():` Para filtrar una tabla basándote en la existencia o no existencia de coincidencias en otra tabla. No agregan columnas, solo filtran filas.\n\n::: callout-tip\n## Tip analógico\n\nA veces llegar a una tabla / resultados puede requerir de múltiples uniones y transformaciones en el medio. Dibujar en papel o una pizarra las tablas puede ser de gran ayuda en este proceso.\n:::\n\n## Yo soy al derecho dado vuelta estas vos\n\nLas funciones `pivot_longer()` y `pivot_wider()`\n\n## Situaciones que requieren cintura {.smaller}\n\nMuchas veces nos va a pasar que vamos a tener una tabla en la cual las categorías que queremos mostrar (por ejemplo sexo, edad, provincia) se encuentran como nombres de columnas. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencc_personas_por_genero_region\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region    | Mujer| Varón| No binario|\n|:---------|-----:|-----:|----------:|\n|CABA      |   215|   173|         NA|\n|CENTRO    |   368|   240|         NA|\n|CUYO      |   246|   185|         NA|\n|GBA       |   370|   249|          1|\n|NEA       |   269|   179|         NA|\n|NOA       |   284|   162|         NA|\n|PATAGONIA |   253|   186|         NA|\n\n</div>\n:::\n:::\n\n\nLa variable `sexo` no existe como tal sino que se encuentra **repartida a lo ancho de la tabla como columnas** y entonces si nos pasan una tabla como esta no podríamos aplicar operaciones como `filter()` y quedarnos sólo con las mujeres\n\n## Qué es un pivoteo y en qué situaciones lo voy a necesitar {.smaller}\n\nEl **pivoteo de tablas** es una operación para **reorganizar la estructura de una tabla**, cambiando la disposición de las filas y columnas. Es como \"girar\" o \"rotar\" la tabla para ver los datos desde otra perspectiva.\n\nDos operaciones clave de pivoteo en `tidyr`:\n\n-   **`pivot_longer()`**: Convierte **columnas \"anchas\" en filas \"largas\"**. \"Alarga\" la tabla. Útil cuando las categorías están como nombres de columnas y queremos tenerlas en una columna *variable*.\n\n-   **`pivot_wider()`**: Convierte **filas \"largas\" en columnas \"anchas\"**. \"Ensancha\" la tabla. Operación inversa a `pivot_longer()`. Útil cuando las categorías están en una columna *variable* y queremos tenerlas como nombres de columnas.\n\n## Estirar a lo largo con pivot_longer {.smaller}\n\nPara convertir a sexo en columna vamos a usar una función muy útil llamada `pivot_longer`.\n\nPartimos de la tabla resumen de personas por genero y región que tiene este aspecto\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencc_personas_por_genero_region\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region    | Mujer| Varón| No binario|\n|:---------|-----:|-----:|----------:|\n|CABA      |   215|   173|         NA|\n|CENTRO    |   368|   240|         NA|\n|CUYO      |   246|   185|         NA|\n|GBA       |   370|   249|          1|\n|NEA       |   269|   179|         NA|\n|NOA       |   284|   162|         NA|\n|PATAGONIA |   253|   186|         NA|\n\n</div>\n:::\n:::\n\n\nEsta tabla esta buena para presentarla en un reporte al público pero no nos sirve si queremos \"amasarla\" al calor de la transformación de datos. Necesitamos estirar los datos de las columnas Mujer, Varon y No binario.\n\n## Estirar a lo largo con pivot_longer {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\nLa función nos pide al menos **dos argumentos** para operar (además de la tabla en cuestión, obviamente)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencc_personas_por_genero_region_alargada <- encc_personas_por_genero_region %>% \n  pivot_longer(\n    # 1. qué columnas pivotear\n    cols = c(\"Mujer\",\"Varón\",\"No binario\"), \n    # 2. cómo se va a llamar la variable \n    names_to = \"sexo\", \n    # (opcional) donde van a parar los valores alargados\n    values_to = \"personas\" \n    )\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nDe modo que\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(encc_personas_por_genero_region_alargada)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region |sexo       | personas|\n|:------|:----------|--------:|\n|CABA   |Mujer      |      215|\n|CABA   |Varón      |      173|\n|CABA   |No binario |       NA|\n|CENTRO |Mujer      |      368|\n|CENTRO |Varón      |      240|\n|CENTRO |No binario |       NA|\n\n</div>\n:::\n:::\n\n:::\n:::\n\n## Estirar a lo largo con pivot_longer {.smaller}\n\nY ahora ya podemos hacer operaciones con esta tabla como por ejemplo filtrar solo a las muejeres\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencc_personas_por_genero_region_alargada %>% \n  filter(sexo == \"Mujer\")\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region    |sexo  | personas|\n|:---------|:-----|--------:|\n|CABA      |Mujer |      215|\n|CENTRO    |Mujer |      368|\n|CUYO      |Mujer |      246|\n|GBA       |Mujer |      370|\n|NEA       |Mujer |      269|\n|NOA       |Mujer |      284|\n|PATAGONIA |Mujer |      253|\n\n</div>\n:::\n:::\n\n\n## Estirar a lo ancho con pivot_wider {.smaller}\n\nPivot wider es (como ya te estaras imaginando) la operación inversa. Los argumentos de esta función entonces van a ser\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencc_personas_por_genero_region_alargada %>% \n  pivot_wider(\n    # 1. Nombre de la variable que voy a estirar a lo ancho como columnas\n    names_from = \"sexo\", \n    # 2. Qué variable contiene los valores que debo repartir en las columnas\n    values_from = \"personas\") \n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region    | Mujer| Varón| No binario|\n|:---------|-----:|-----:|----------:|\n|CABA      |   215|   173|         NA|\n|CENTRO    |   368|   240|         NA|\n|CUYO      |   246|   185|         NA|\n|GBA       |   370|   249|          1|\n|NEA       |   269|   179|         NA|\n|NOA       |   284|   162|         NA|\n|PATAGONIA |   253|   186|         NA|\n\n</div>\n:::\n:::\n\n\n::: callout-tip\nSi bien no es una regla, podríamos pensar que `pivot_longer()` va a transformar los datos de manera entendible para una máquina o para el trabajo con ellos como tablas de manera *tidy*, mientras que `pivot_wider()` siempre nos da un formato\n:::\n\n## ¿Qué aprendimos hasta acá?\n\n-   Conocimos algunos de los beneficios de la comunidad de R\n-   Nos zambullimos en R y recorrimos los básicos del IDE RStudio\n-   Aprendimos convenciones y elementos básicos y a importar tablas para trabajar con ellas.\n-   Hicimos nuestro primer viaje al *tidyverso* con los verbos centrales `dplyr()` y los conjugamos entre sí con `pipes`\n-   Unimos tablas y las hicimos girar sobre sí mismas para poder manipularlas.\n\n## Ahora a practicar!\n\nAhora ya estamos podemos completar nuestro primer trabajo práctico integrador.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}