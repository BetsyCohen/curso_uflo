{
  "hash": "c32e3bc475b93c006e7a2d819d0abf5d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Gram√°tica de gr√°ficos con `ggplot`\"\nsubtitle: \"An√°lisis de Datos 1 - Unidad 4\"\nauthor: \"Betsy Cohen\"\nlogo: \"images/logo-uflo.png\"\nformat:\n  revealjs:\n    width: 1600\n    height: 900\n    theme: slides.scss\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\nexecute:\n  echo: true\ndf-print: kable\n---\n\n\n\n\n## Qu√© es ggplot2\n\n`ggplot2` es una de las librer√≠as que forman parte de `tidyverse` que nos permite crear gr√°ficos, siguiendo una gram√°tica o l√≥gica por capas que se van sumando de manera incremental.\n\n![](https://ggplot2.tidyverse.org/articles/ggplot2_files/figure-html/overview_graphic-1.png){fig-align=\"center\"}\n\n## Preparando los datos de hoy üßë‚Äçüç≥ {.smaller}\n\n::: columns\n::: {.column width=\"30%\"}\nVamos a trabajar con un dataset sencillo que contiene informaci√≥n de establecimientos de alojamiento tur√≠stico por provincia elaborado por el [Sistema de Informaci√≥n Turistica de la Argentina (SINTA)](https://datos.yvera.gob.ar/).\n\nAl dataset le agrego la variable `region` y `recibio_subsidio` (una variable ficticia) solo a los fines de entender algunos conceptos de visualizaci√≥n.\n:::\n\n::: {.column width=\"70%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# importar los datos\nurl_datos <- \"https://datos.yvera.gob.ar/dataset/c9dc110e-2a09-4b51-ac0a-a2db2ca76fbb/resource/67727a58-7a43-450d-a685-a9fba9218b20/download/puna_indicadores_provincias.csv\"\n\n# asignar al dataframe df\ndf <- read.csv(url_datos, encoding = \"latin1\") \n\n# Definir vectores de las regiones y sus provincias\nNOA <- c(\"Catamarca\", \"Jujuy\", \"La Rioja\", \"Salta\", \"Santiago del Estero\", \"Tucum√°n\")\nNEA <- c(\"Chaco\", \"Corrientes\", \"Formosa\", \"Misiones\")\nCentro_Cuyo <- c(\"C√≥rdoba\", \"La Pampa\", \"Mendoza\", \"San Juan\", \"San Luis\", \"Santa Fe\", \"Entre R√≠os\")\nBuenos_Aires <- c(\"Buenos Aires\", \"Ciudad Aut√≥noma de Buenos Aires\")\nSur <- c(\"Chubut\", \"Neuqu√©n\", \"R√≠o Negro\", \"Santa Cruz\", \"Tierra del Fuego\")\n\n# creamos algunas variables para poder jugar en los gr√°ficos \ndf <- df %>%\n  # sacar a√±os locos\n  filter(indice_tiempo < 2024) %>%\n  #\n  mutate(\n  # establecimiento como numerica\n    establecimientos = as.integer(establecimientos),\n  # region para cada provincia\n    region = case_when(\n      provincia_nombre %in% NOA ~ \"NOA\",\n      provincia_nombre %in% NEA ~ \"NEA\",\n      provincia_nombre %in% Centro_Cuyo ~ \"Centro Cuyo\",\n      provincia_nombre %in% Buenos_Aires ~ \"Buenos Aires\",\n      provincia_nombre %in% Sur ~ \"Sur\",\n      TRUE ~ \"Otra\"\n    ),\n  # una variable al azar de asignacion de subsidio\n    recibio_subsidio = sample(c(\"Si\", \"No\"), size = n(), replace = TRUE)\n  )\n```\n:::\n\n:::\n:::\n\n## Nuestro dataset de hoy üßë‚Äçüç≥ {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  mutate(across(where(is.character), as.factor)) %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n indice_tiempo  provincia_codigo                        provincia_nombre\n Min.   :2020   Min.   : 2       Buenos Aires                   : 4     \n 1st Qu.:2021   1st Qu.:25       Catamarca                      : 4     \n Median :2022   Median :48       Chaco                          : 4     \n Mean   :2022   Mean   :48       Chubut                         : 4     \n 3rd Qu.:2022   3rd Qu.:71       Ciudad Aut√≥noma de Buenos Aires: 4     \n Max.   :2023   Max.   :94       C√≥rdoba                        : 4     \n                                 (Other)                        :72     \n establecimientos  habitaciones       plazas                region  \n Min.   :  80.0   Min.   :  191   Min.   :  2454   Buenos Aires: 8  \n 1st Qu.: 315.5   1st Qu.: 2554   1st Qu.:  9007   Centro Cuyo :28  \n Median : 562.0   Median : 5744   Median : 18833   NEA         :16  \n Mean   : 857.7   Mean   :10200   Mean   : 32360   NOA         :24  \n 3rd Qu.: 815.5   3rd Qu.: 8822   3rd Qu.: 28693   Sur         :20  \n Max.   :4832.0   Max.   :74535   Max.   :229442                    \n NA's   :4                                                          \n recibio_subsidio\n No:54           \n Si:42           \n                 \n                 \n                 \n                 \n                 \n```\n\n\n:::\n:::\n\n\n## Capa de data y el mapping üó∫Ô∏è {.smaller}\n\nEl primer paso para crear un gr√°fico con `ggplot2` es llamar a la funci√≥n `ggplot()`. Esta funci√≥n crea el lienzo en blanco sobre el cual vamos a dibujar. Necesitamos decirle a `ggplot()` qu√© datos vamos a usar.\n\nLo primero que le indicamos a ggplot es cual es la tabla de donde estamos sacando los datos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = df)\n```\n:::\n\n\nSi ejecutas este c√≥digo, ¬°no vas a ver nada! Esto es porque solo hemos creado el lienzo, pero a√∫n no le hemos dicho qu√© queremos dibujar sobre √©l.\n\nPara indicarle **qu√©** y **d√≥nde** poner los datos tenemos la capa de **mapping** o el `aes` (que viene de aesthetics). En este caso vamos a pedirle a ggplot que coloque en el eje x la cantidad de establecimientos y en el eje y cada una de las provincias.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = df, aes(x= region , y = establecimientos))\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## ggplot es parte de tidyverse {.smaller}\n\n::: columns\n::: {.column width=\"70%\"}\nComo ggplot es parte de tidyverse el argumento que vimos arriba podemos escribirlo encadenado dentro de una secuencia de pipes. Esto no es muy √∫til ya que si necesitamos hacer una transformaci√≥n espec√≠fica la podemos encadenar en esta secuencia donde ggplot es un paso m√°s. Por ej. si queremos filtrar los datos solo para 2020 Por eso escribimos algo asi:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  # hago las trasformaciones que necesito\n  filter(indice_tiempo == 2020) %>% \n  #no necesito definir el par√°metro data porque los datos ya estan dentro de la cadena\n  ggplot(aes(x= region , y = establecimientos)) \n```\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n![](https://www.business-science.io/assets/2020-10-15-must-know-tidyverse-features/tidyverse-icons.png)\n:::\n:::\n\n## Layers o el gr√°fico en cuesti√≥n üìä\n\nEl n√∫cleo de cualquier gr√°fico son las capas . Estas toman los datos mapeados y los muestran de forma comprensible para los humanos como una representaci√≥n de los datos. Cada capa consta de tres partes importantes:\n\n-   ‚è∫Ô∏è La **geometr√≠a** que determina c√≥mo se muestran los datos, como puntos, l√≠neas o rect√°ngulos.\n\n-   üßÆ La **transformaci√≥n estad√≠stica** que puede calcular nuevas variables a partir de los datos y afectar qu√© datos se muestran.\n\n-   üìç El ajuste de **posici√≥n** que determina principalmente **d√≥nde** se muestra una pieza de datos.\n\n## Layers: `geom_*`o geometria üìä {.smaller}\n\nCon las funciones `geom_*` y `stat_*` vamos a ir modelando estos aspectos. Y vamos a ir uniendo cada una de las capas con el s√≠mbolo **+**\n\nVolviendo a nuestro ejemplo vamos a una geometr√≠a de gr√°fico de barras `geom_col()` y voy a usar el par√°metro stat = \"identity\".\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\ndf %>% \n  filter(indice_tiempo == 2020) %>% \n  ggplot(aes(x= region, y= establecimientos)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n## Otras geometrias posibles {.smaller}\n\nObviamente las barras no son la √∫nica geometr√≠a posibles. Podes consultar todas las geometr√≠as posibles en la [documentaci√≥n sobre capas de ggplot](https://ggplot2.tidyverse.org/reference/index.html#layers). A grandes razgos podr√≠amos decir que:\n\n-   ![](https://ggplot2.tidyverse.org/reference/icons/geom_density.png) usamos `geom_density()` `stat_density()` para los gr√°ficos de **densidad**\n\n-   ![](https://ggplot2.tidyverse.org/reference/icons/geom_boxplot.png) usamos `geom_boxplot()` `stat_boxplot()` para los gr√°ficos de cajas o **boxplot**\n\n-   ![](https://ggplot2.tidyverse.org/reference/icons/geom_bar.png) `geom_bar()` `geom_col()` `stat_count()` son para las **columnas** y **barras**\n\n-   ![](https://ggplot2.tidyverse.org/reference/icons/geom_point.png) `geom_point()` para los gr√°ficos de **dispersi√≥n** de puntos\n\n## Layers: para que sirve `_stats` {.smaller}\n\nCada geom\\_\\*() viene con una funci√≥n estad√≠stica por defecto o `_stat`. Esa funci√≥n procesa tus datos antes de graficarlos.\n\n\"stat\". Es como decirle a ggplot2: \"¬øQuer√©s que te d√© los datos ya cocinados, o prefer√≠s cocinar vos?\"\n\n### Un ejemplo de stat y graficos de barra\n\nEn ggplot Hay dos tipos de gr√°ficos de barras: `geom_bar()`y `geom_col()`.\n\n::: columns\n::: {.column width=\"50%\"}\n-   geom_bar() ‚Üí usa stat = \"count\" (por defecto)\n-   Cuenta la cantidad de casos de cada categor√≠a.\n-   No necesit√°s columna y, la calcula autom√°ticamente.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  ggplot(aes(x = gender)) +\n  # cuenta cu√°ntos varones y mujeres hay y ya.\n  geom_bar()  \n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n-   geom_col() ‚Üí usa stat = \"identity\" (por defecto)\n-   Significa: \"ya tengo la variable Y calculada, usala tal como est√°\".\n-   Ac√° s√≠ necesit√°s pasar y = en el aes().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  group_by(gender) %>% \n  summarise(average_height = round(mean(height,na.rm = T))) %>% \n  # tengo dos variables claras\n  ggplot(aes(x = gender, y= average_height )) +\n  # detecta la columna average_height como la que tiene el c√°lculo\n  geom_col()   \n```\n:::\n\n\nSi quisieras usar geom_bar() con datos ya agregados, ah√≠ s√≠ tendr√≠as que forzar stat = \"identity\"\n\n\n\n\n:::\n:::\n\n## Layers: Parametros de posisci√≥n {.smaller}\n\nDentro de la capa layer tro par√°metro importante es la **posici√≥n** que ocupa una variable. El comportamiento de `position` va a cambiar seg√∫n el tipo de gr√°fico o (para ponerlo en palabras de ggplot), la geometr√≠a, en el caso del gr√°fico de barras podemos mencionar las posiciones:\n\n::: columns\n::: {.column width=\"50%\"}\n**dodge o agrupada**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\ndf %>% \n  filter(indice_tiempo == 2020) %>% \n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  geom_col(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n**stack o apilada**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\ndf %>% \n  filter(indice_tiempo == 2020) %>% \n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  geom_col(position = \"stack\")\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## Scales ‚öñÔ∏è {.smaller}\n\nLas \"scales\" (escalas) controlan c√≥mo se interpretan y muestran los valores de nuestros datos en los ejes y otras est√©ticas (como el color o el tama√±o).\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"5,6,7\"}\ndf %>% \n  filter(indice_tiempo == 2020) %>% \n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  geom_col(position = \"stack\")+\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5)\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n::: callout-note\n::: {callout-tip}\nDependiendo del tipo de escala vamos a usar diferentes tipos de funciones. Revisa la documentaci√≥n de ggplot para conocer que tipo `scale_y_binned()`, `scale_y_date()`, `scale_y_discrete()`\n:::\n:::\n\n## Scales en funci√≥n de otra variable üå°Ô∏è {.smaller}\n\nPodr√≠amos seguir trabajando sobre la capa de escalas pero esta vez manipulando su color y usarlo como un term√≥metro. Para eso vamos a tener que hacer dos cosas:\n\n-   Decirle a ggplot qu√© variable queremos que use de relleno para el color (uno de los datos dentro del aes)\n\n-   Agregar la capa en cuesti√≥n indicando el tipo de estilo que queremos\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"8,9\"}\ndf %>% \n  filter(indice_tiempo == 2020) %>% \n  ggplot(aes(x= region , y = establecimientos, fill = plazas)) +\n  geom_col()+\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5) +\n  # Capa escala: rellena con gradientes continuos.\n  scale_fill_continuous(type = \"gradient\") \n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n## Scales para cambiar colores de manera manual Ô∏è {.smaller}\n\nA veces tambi√©n usamos en la capa de scales para setear los colores de manera manual con `scale_fill_manual()` o `scale_color_manual()`\n\n`fill` hace referencia al relleno de la geometr√≠a (lo vas a usar por ej. con columnas, cajas...)\n`color` hace referencia al color de la l√≠nea que rodea a la geometr√≠a\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"7\"}\ndf %>% \n  ggplot(aes(x= region , y = establecimientos, fill = recibio_subsidio)) +\n  geom_col(position = \"stack\")+\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5) +\n  scale_fill_manual(values= c(\"#cf4c4c\",\"#7cccaf\"))\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## Facetado ‚ûó\n\nFacets es una capa que nos permite \"cortar en rodajas\" la informaci√≥n y contar la historia a traves de ese criterio y podemos ver qu√© paso en cada grupo.\n\nDependiendo de la situacion podemos usar:\n\n-   `facet_wrap()`: Crea una grilla de gr√°ficos **en una sola dimensi√≥n** (usualmente se enrolla en filas o columnas) y ideal para **una sola variable de faceteo o agrupamiento**.\n\n-   `facet_grid()`: Crea una grilla de gr√°ficos **bidimensional** (filas y columnas), ideal para **dos variables de faceteo** (una para filas y otra para columnas).\n\n## Facetado ‚ûó {.smaller}\n\nEn este ejemplo agregamos una capa de facetado sobre la base completa (df) y facetamos segun el a√±o (se indica con el **~**)\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\ndf %>% \n  ggplot(aes(x= region , y = establecimientos, fill = recibio_subsidio)) +\n  geom_col(position = \"stack\")+\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5) +\n  scale_fill_manual(values= c(\"#cf4c4c\",\"#7cccaf\"))+\n  facet_wrap(~ indice_tiempo)\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## Capa de coordenadas {.smaller}\n\nSi nos imaginamos el gr√°fico como un mapa podr√≠amos decir que la capa de coordenadas es como el la direccion en que sostenemos ese mapa para interpretarlo.\n\nSi bien se suelen utilizar coordenadas cartesianas, el sistema de coordenadas impulsa la visualizaci√≥n de proyecciones¬†[cartogr√°ficas](https://ggplot2-book.org/maps.html) (cuando graficamos mapas)¬†y gr√°ficos¬†[polares](https://ggplot2-book.org/coord.html#polar-coordinates-with-coord_polar).\n\nSi bien no es la capa que m√°s vamos a usar al principio es probable que la funci√≥n coord_flip te sea de utilidad para voltear los ejes de tu gr√°fico.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"9\"}\ndf %>% \n  filter(indice_tiempo == 2020) %>% \n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  geom_col(position = \"stack\")+\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5)+\n  scale_fill_manual(values= c(\"#cf4c4c\",\"#7cccaf\"))+\n  coord_flip() \n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n## Theme: enchulando el gr√°fico üé® {.smaller}\n\n`ggplot2` nos ofrece varios temas predeterminados para enchular nuestros gr√°ficos como `theme_grey() theme_gray() theme_bw() theme_linedraw() theme_light() theme_dark() theme_minimal() theme_classic()`\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"10,11\"}\ndf %>% \n  filter(indice_tiempo == 2020) %>% \n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  geom_col(position = \"stack\")+\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5)+\n  scale_fill_manual(values= c(\"#cf4c4c\",\"#7cccaf\"))+\n  coord_flip() +\n  ## elijo el theme light\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n## Theme: enchulando el gr√°fico üé® {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n### Antes\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n### Despu√©s\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## Theme: enchulando el gr√°fico üé® {.smaller}\n\nSi quiero cambiar algo espec√≠fico (un elemento) del theme simplemente vuelvo a abrir theme y modifico el elemento espec√≠fico.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"12-15\"}\ndf %>% \n  filter(indice_tiempo == 2020) %>% \n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  geom_col(position = \"stack\")+\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5)+\n  scale_fill_manual(values= c(\"#cf4c4c\",\"#7cccaf\"))+\n  coord_flip() +\n  theme_minimal()+\n  # agrego m√°s capas al theme\n  theme(\n    # cambio el angulo del texto en eje x\n    axis.text.x = element_text(angle = 45, hjust = 1), \n  )\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n## Themes personalizados {.smaller}\n\nObviamente tambi√©n podemos personalizar y crear nuestros propios themes como por ej ac√° lucimos un theme que preparamos previamente para la ocasi√≥n: el theme_uflo\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"10,11\"}\ndf %>% \n  filter(indice_tiempo == 2020) %>% \n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  geom_col(position = \"stack\")+\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5)+\n  scale_fill_manual(values= c(\"#cf4c4c\",\"#7cccaf\"))+\n  coord_flip() +\n  ## pongo mi tema\n  theme_uflo()\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n::: callout-tip\n### Algunas extensiones de themes que podes usar son:\n\n-   [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) tiene temas muy populares que por ej. imitan temas clasicos de graficos de Excel, Google docs, FiveThirtyEigh entre otros\n\n-   [ggdark](https://github.com/nsgrantham/ggdark/tree/master): temas en modo escuro de los temas predeterminados de ggplot2.\n\n-   [ggtech](https://exts.ggplot2.tidyverse.org/ggtech.html): proporciona temas inspirados por compa√±√≠as tecnol√≥gicas, como Airbnb, Google, Twitter o Facebook.\n:::\n\n## Anotaciones üóíÔ∏è {.smaller}\n\nSi bien no se la menciona como capa en general las **anotaciones** son muy importantes cuando realizamos un gr√°fico. Dentro de las anotaciones tenemos varias funciones:\n\n-   `labs():`Para etiquetar elementos del gr√°fico como `title`, `subtitle`, `caption x`, `y` (de los ejes) `fill`, `color`, `size`, `shape`, etc. (etiquetas especificas de leyendas)\n\n-   `anotate()` Permite **agregar texto, l√≠neas, puntos, rect√°ngulos, etc.** en posiciones espec√≠ficas del gr√°fico.\n\n-   `geom_text()` y `geom_label()`Tambi√©n agregan texto al gr√°fico, pero **basado en los datos**. A diferencia de `annotate()`, estas geom√©tricas se usan como capas regulares.\n\n-   `geom_curve()` y `geom_segment()`Sirven para **dibujar flechas, l√≠neas o curvas** que apunten a algo importante.\n\n## Anotaciones üóíÔ∏è {.smaller}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"11-15\"}\ndf %>% \n  filter(indice_tiempo == 2020) %>% \n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  geom_col(position = \"stack\")+\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5)+\n  scale_fill_manual(values= c(\"#cf4c4c\",\"#7cccaf\"))+\n  coord_flip() +\n  theme_uflo()+ \n  labs(x= \"\", y= \"Cantidad de establecimientos\",\n       title = \"Percepcion de subsidios al turismo por region\",\n       subtitle = \"A√±o 2020\",\n       caption = \"Fuente: Sistema de Informaci√≥n Turistica de la Argentina\", \n       fill = \"¬øRecibio subsidio?\")\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n## ü©¥ Las etiquetas con valores no son Anotaciones Ô∏è {.smaller}\n\ngeom_text() y geom_label() nos geometrias especificas que te permiten dibujar texto \"arriba\" del grafico que estas haciendo y es justamente el concepto de capas el que te permite ir agregando un gr√°fico o geometria arriba de otro.\n\nNot√° en este ejemplo como agregamos una capa con la etiqueta y tenemos que volver a indicarle nuevamente el aes() porque es un gr√°fico nuevo, una nueva capa que se suma.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3,4,5,7,8,21,22,23,24,25,26,27\"}\ndf %>% \n  filter(indice_tiempo == 2020) %>% \n  # hago el calculo explicito el calculo de la agrupaci√≥n y c√°lculo para \"ahorrar explicaciones a cada geom\"\n  group_by(region, recibio_subsidio) %>% \n  summarise(establecimientos = sum(establecimientos, na.rm = TRUE), .groups = \"drop\") %>%\n  ggplot(aes(x = region, y = establecimientos, fill = recibio_subsidio)) +\n  # dibujo la columna\n  geom_col(position = \"stack\") +\n  scale_y_continuous(limits = c(0, 10000), n.breaks = 5) +\n  scale_fill_manual(values = c(\"#cf4c4c\", \"#7cccaf\")) +\n  coord_flip() +\n  theme_uflo() + \n  labs(\n    x = \"\", \n    y = \"Cantidad de establecimientos\",\n    title = \"Percepci√≥n de subsidios al turismo por regi√≥n\",\n    subtitle = \"A√±o 2020\",\n    caption = \"Fuente: Sistema de Informaci√≥n Tur√≠stica de la Argentina\", \n    fill = \"¬øRecibi√≥ subsidio?\"\n  )+\n  # dibujo los textos\n  geom_text(\n    aes(label = establecimientos), \n    position = position_stack(vjust = 0.5),\n    color = \"white\",\n    size = 3\n  ) \n```\n:::\n\n## ü©¥ Las etiquetas con valores no son Anotaciones Ô∏è {.smaller}\n\nY la salida luce as√≠\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-25-1.png){width=960}\n:::\n:::\n\n\n\n## Resumiendo... {.bigtext}\n\nggplot es como una cebolla...\n\n.... tiene capas ![](https://www.ecartelera.com/images/noticias/75400/75480-h3.jpg)\n\n## De datos... {auto-animate=\"true\"}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ndf %>% \n  # Transformo mis datos \n  filter(indice_tiempo == 2020) %>% \n  # Capa de mapeo\n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  # Capa de geometria\n  geom_col(position = \"stack\")\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-26-1.png){width=960}\n:::\n:::\n\n\n## ...escalas {auto-animate=\"true\"}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ndf %>% \n  # Transformo mis datos \n  filter(indice_tiempo == 2020) %>% \n  # Capa de mapeo\n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  # Capa de geometria\n  geom_col(position = \"stack\")+\n  # Capas de escalas\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5)+\n  scale_fill_manual(values= c(\"#cf4c4c\",\"#7cccaf\"))\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-27-1.png){width=960}\n:::\n:::\n\n\n## ...coordenadas ... {auto-animate=\"true\"}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ndf %>% \n  # Transformo mis datos \n  filter(indice_tiempo == 2020) %>% \n  # Capa de mapeo\n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  # Capa de geometria\n  geom_col(position = \"stack\")+\n  # Capas de escalas\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5)+\n  scale_fill_manual(values= c(\"#cf4c4c\",\"#7cccaf\"))+\n  # Capas de coordenadas\n  coord_flip() \n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n## ... y hermoseo. {auto-animate=\"true\"}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ndf %>% \n  # Transformo mis datos \n  filter(indice_tiempo == 2020) %>% \n  # Capa de mapeo\n  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +\n  # Capa de geometria\n  geom_col(position = \"stack\")+\n  # Capas de escalas\n  scale_y_continuous(\n    limits = c(0,10000),\n    n.breaks = 5)+\n  scale_fill_manual(values= c(\"#cf4c4c\",\"#7cccaf\"))+\n  # Capas de coordenadas\n  coord_flip() +\n  # Capas de tema\n  theme_uflo()+ \n  labs(x= \"\", y= \"Cantidad de establecimientos\",\n       title = \"Percepcion de subsidios al turismo por region\",\n       subtitle = \"A√±o 2020\",\n       caption = \"Fuente: Sistema de Informaci√≥n Turistica de la Argentina\", \n       fill = \"¬øRecibio subsidio?\")\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-29-1.png){width=960}\n:::\n:::\n\n\n## ü™Ñ Tuki\n\n\n::: {.cell output-location='column'}\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-30-1.png){width=960}\n:::\n:::\n\n\n## Y ahora lo que todos esper√°bamos ...\n\n::: r-fit-text\nExtensiones!!!!\n:::\n\n## gganimate {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\n\nturismo_no_residente_por_anio_y_medio_trasporte %>%\n  ggplot(aes(x = medio_de_transporte, y = viajes, fill = medio_de_transporte)) +\n  geom_col(show.legend = FALSE) +\n  scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = \"M\"))+\n  labs(title = \"Viajes en a√±o: {as.integer(frame_time)}\",\n       x = \"Medio de transporte\",\n       y = \"Cantidad de viajes\",\n       caption = \"Fuente: Sistema de Informaci√≥n Turistica de la Argentina\") +\n  transition_time(indice_tiempo_anio) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-31-1.gif)\n:::\n:::\n\n\n## patchwork {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\ngrafico3 + grafico2 + grafico1 + \n  guide_area() +\n  plot_layout(guides = \"collect\") \n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-32-1.png){width=960}\n:::\n:::\n\n\n## esquisse {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(esquisse)\n# esquisser(df_vuelos_asientos_pasajeros)\n```\n:::\n\n\n![](images/esquisse.gif)\n\n## Otros recursos...\n\n-   [The RGraph Gallery](https://r-graph-gallery.com/) Una guia por todos los tipos de gr√°ficos y como hacerlo\n\n-   [ggtheme asistance](https://github.com/calligross/ggthemeassist?tab=readme-ov-file) parecido a esquisse pero mucho mas completo respecto del theme\n\n-   [ggplot2](https://ggplot2.tidyverse.org/index.html) documentaci√≥n oficial incluyendo la preciadas Cheatsheet\n\n\n## ¬°ü¶æ A practicar!\n\n::: r-fit-text\nYa podes ir a completar la [actividad Integradora](https://curso-analisis-datos-1-sociologia.netlify.app/materiales/excercise/ejercicio_ggplot)\n:::\n",
    "supporting": [
      "gramatica_de_graficos_ggplot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}