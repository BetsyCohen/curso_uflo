{
  "hash": "51339bc8051456f3329e640923ff91d4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Gramática de gráficos con `ggplot`\"\nsubtitle: \"Análisis de Datos 1 - Unidad 4\"\nauthor: \"Betsy Cohen\"\nlogo: \"images/logo-uflo.png\"\nformat:\n  revealjs:\n    width: 1600\n    height: 900\n    theme: slides.scss\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\nexecute:\n  echo: true\ndf-print: kable\n---\n\n\n\n\n## Qué es ggplot2\n\n`ggplot2` es una de las librerías que forman parte de `tidyverse` que nos permite crear gráficos, siguiendo una gramática o lógica por capas que se van sumando de manera incremental.\n\n![](https://ggplot2.tidyverse.org/articles/ggplot2_files/figure-html/overview_graphic-1.png){fig-align=\"center\"}\n\n## Veamos un ejemplo\n\nVamos a trabajar con un dataset sencillo que contiene información sobre la cantidad de plazas, habitaciones y establecimientos de alojamiento turístico disponibles por provincia en Argentina, elaborado por el equipo del Sistema de Información Turistica de la Argentina (SINTA).\n\nEste dataset nos muestra, para diferentes años (`indice_tiempo`) y provincias (`provincia_nombre`), la cantidad de establecimientos (`establecimientos`), habitaciones (`habitaciones`) y plazas (`plazas`) disponibles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl_datos <- \"https://datos.yvera.gob.ar/dataset/c9dc110e-2a09-4b51-ac0a-a2db2ca76fbb/resource/67727a58-7a43-450d-a685-a9fba9218b20/download/puna_indicadores_provincias.csv\"\ndf <- read.csv(url_datos, encoding = \"latin1\") \n\n\ndf <- df %>% \n  mutate(establecimientos = as.integer(establecimientos)) %>% \n  filter(indice_tiempo <2024) \n```\n:::\n\n\nY ya que estamos vamos a filtrar datos de un solo año por ej 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_2020 <- df %>% filter(indice_tiempo == 2020)\n```\n:::\n\n\n## Capa de data y el mapping {.smaller}\n\nEl primer paso para crear un gráfico con `ggplot2` es llamar a la función `ggplot()`. Esta función crea el lienzo en blanco sobre el cual vamos a dibujar. Necesitamos decirle a `ggplot()` qué datos vamos a usar.\n\nLo primero que le indicamos a ggplot es cual es la tabla de donde estamos sacando los datos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = df)\n```\n:::\n\n\nSi ejecutas este código, ¡no vas a ver nada! Esto es porque solo hemos creado el lienzo, pero aún no le hemos dicho qué queremos dibujar sobre él.\n\nPara indicarle **qué** y **dónde** poner los datos tenemos la capa de **mapping** o el `aes` (que viene de aesthetics). En este caso vamos a pedirle a ggplot que coloque en el eje x la cantidad de establecimientos y en el eje y cada una de las provincias.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = df_2020, aes(x = establecimientos , y = provincia_nombre))\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Layers o el gráfico en cuestión\n\nEl núcleo de cualquier gráfico son las capas . Estas toman los datos mapeados y los muestran de forma comprensible para los humanos como una representación de los datos. Cada capa consta de tres partes importantes:\n\n-   La **geometría** que determina cómo se muestran los datos, como puntos, líneas o rectángulos.\n-   La **transformación estadística** que puede calcular nuevas variables a partir de los datos y afectar qué datos se muestran.\n-   El ajuste de **posición** que determina principalmente **dónde** se muestra una pieza de datos.\n\n## Layers o el gráfico en cuestión\n\nCon las funciones `geom_*` y `stat_*` vamos a ir modelando estos aspectos. Y vamos a ir uniendo cada una de las capas con el símbolo **+**\n\nVolviendo a nuestro ejemplo vamos a probar la función `geom_col()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = df_2020, aes(x = establecimientos , y = provincia_nombre)) +\n   geom_col()\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## Scales: ¡Ajustando los Ejes! {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\nLas \"scales\" (escalas) controlan cómo se interpretan y muestran los valores de nuestros datos en los ejes y otras estéticas (como el color o el tamaño).\n\nPor ej. en este gráfico no me gusta no poder ver el puntito en los miles además de que siento que sale un poco cortado el limite superior.\n\nEn la capa de escalas voy a usar scale_x_continuous() y allí voy a definir sus etiquetas (en el parámtro label) y los límites (en el parametro limit) con la ayuda d funciones de la librería `scales`\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# llamamos a la librería \nlibrary(scales)\n\nggplot(data = df_2020, aes(x = establecimientos , y = provincia_nombre)) +\n  # Añadimos una capa de barras \n  geom_col() +\n  scale_x_continuous(labels = label_number(big.mark = \".\", decimal.mark = \",\"), \n                     limits = c(0,6000),\n                     n.breaks = 5)\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n::: callout-note\n::: {callout-tip}\nDependiendo del tipo de escala vamos a usar diferentes tipos de funciones. Revisa la documentación de ggplot para conocer que tipo scale_x_binned(), scale_x_date(), scale_x_discrete()\n:::\n:::\n\n## Scales con color\n\nPodriamos seguir trabajando sobre la capa de escalas pero esta vez manipulando su color y usarlo como un termómetro. Para eso vamos a tener que hacer dos cosas: - Decirle a ggplot qué variable queremos que use de relleno para el color (uno de los datos dentro del aes) - Agregar la capa en cuestion indicando el tipo de estilo que queremos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = df, aes(x = establecimientos , \n                      y = provincia_nombre, \n                      fill = establecimientos)) + # en los datos le indico que rellene (fill) con el valor de establecimientos\n  geom_col() +\n  scale_x_continuous(\n    labels = label_number(big.mark = \".\", decimal.mark = \",\"), \n    limits = c(0,25000),\n    n.breaks = 5\n  ) +\n  scale_fill_continuous(type = \"gradient\") # agrego una capa de color de relleno para variables continuas.\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## Facets Dividiendo por Grupos ➗\n\nFacets es una capa que nos permite \"cortar en rodajas\" la información y contar la historia a traves de ese criterio. Podemos ver qué paso en cada grupo.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nggplot(data = df, aes(x = establecimientos , y = provincia_nombre)) +\n  # Añadimos una capa de barras \n  geom_col() +\n  scale_x_continuous(labels = label_number(big.mark = \".\", decimal.mark = \",\"), \n                     limits = c(0,5000),\n                     n.breaks = 5)+\n  facet_wrap(~ indice_tiempo,\n             nrow = 2)\n```\n\n::: {.cell-output-display}\n![](gramatica_de_graficos_ggplot_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "gramatica_de_graficos_ggplot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}