{
  "hash": "d2c43730bdf7d5fd568ece90c3abb692",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Comunicar con Quarto\"\nsubtitle: \"An√°lisis de Datos 1 - Unidad 4\"\nauthor: \"Betsy Cohen\"\nlogo: \"images/logo-uflo.png\"\nformat:\n  revealjs:\n    width: 1600\n    height: 900\n    theme: slides.scss\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\nexecute:\n  echo: true\ndf-print: kable\n---\n\n\n## Quarto para todxs\n\n-   Es un sistema de publicaci√≥n cient√≠fica y t√©cnica de c√≥digo abierto. Pensado para crear documentos din√°micos, presentaciones, libros y sitios web a partir de un simple archivo de texto plano.\n\n-   Unifica y facilita el proceso de creaci√≥n y colaboraci√≥n entre varios lenguajes (Python, Observable, Julia, R...) y nos permite crear m√∫ltiples productos en m√∫ltiples formatos (HTML, pdf, Word, ppt)\n\n![Imagen de \"Hello, Quarto\" keynote de Julia Lowndes y Mine √áetinkaya-Rundel, RStudio::Conf(2022).](images/horst_qmd_render_schema.png){fig-align=\"left\"}\n\n## ¬øQu√© podemos hacer con Quarto?\n\n::: incremental\n-   Art√≠culos acad√©micos (PDF) / Reportes HTML\n\n-   Presentaciones (como la que estas viendo o en PDF)\n\n-   Dashbords (est√°ticos o sobre shiny)\n\n-   Sitios web/ blog\n\n-   Libros\n\n-   Documentos interactivos (Jupyter/Shiny)\n:::\n\n## Por qu√© Quarto\n\n-   **Reproducibilidad**: Tu an√°lisis, el c√≥digo y los resultados (tablas, gr√°ficos) viven juntos en un solo lugar. ¬°Adi√≥s a copiar y pegar!\n\n-   **Flexibilidad de Formatos**: Con un mismo archivo fuente (.qmd), podes generar much√≠simos tipos de salida: HTML, PDF, Word, ¬°y m√°s!\n\n-   **Profesionalismo**: Crea entregables con una apariencia pulida y profesional sin mucho esfuerzo.\n\n-   **Flujo de trabajo simple**: Escribis tu contenido en Markdown, integras tus bloques de c√≥digo y ¬°renderizas!\n\n::: callout-note\n### ¬øQuarto vs. R Markdown?\n\nQuarto es el sucesor de R Markdown. Si ya conoc√≠as R Markdown, Quarto te resultar√° muy familiar, pero ofrece m√°s funciones, flexibilidad y soporte para otros lenguajes m√°s all√° de R.\n:::\n\n## Instalar Quarto {.smaller}\n\nPara instalar Quasrto simplemente vamos a ir a https://quarto.org/docs/get-started y vamos a descargar la versi√≥n correspondiente a nuestrp sistema operativo\n\n![](images/instalar-quarto.png)\n\n::: callout-tip\nSi bien nosotros vamos a usarlo desde RStudio est√° bueno que sepas que podemos usar Quarto desde otras plataformas como **VS Code**, **Jupyter**.\n:::\n\n## Creando un proyecto Quarto\n\nPara crear un nuevo proyecto de Quarto vamos a ir a elegir crearlo desde un nuevo directorio y vamos a elegir el tipo de Quarto Project que querramos crear:\n\n::: columns\n::: {.column width=\"50%\"}\n-   Quarto Project\n\n-   Quarto Website\n\n-   Quarto Blog\n\n-   Quarto Book\n:::\n\n::: {.column width=\"50%\"}\n![](images/new_project_wizard_quarto.png){fig-align=\"center\" width=\"550\"}\n:::\n:::\n\n## Creando un Quarto Project\n\nCuando creamos el Quarto Project vamos a ver que se crea nuestro proyecto Quarto tiene adem√°s del archivo **project** y el el archivo **quarto** en question un \"nuevo bicho\" yml\n\n![](images/quarto_project_schema.png){fig-align=\"center\"}\n\nUn archivo¬†`.yml`¬†(o¬†`.yaml`) (Yet Anothoer Markup Language) es un¬†archivo de texto¬†legible por nosotros los humanos que sirve para indicarle a Quarto la configuraci√≥n sus metadatos y opciones de salida, del **conjunto de archivos** que vayan a conformar nuestro proyecto en Quarto.\n\n## Anatom√≠a de un Archivo Quarto (`.qmd`) {.smaller}\n\nUn archivo Quarto (`.qmd`) tiene una estructura clara que lo hace f√°cil de entender:\n\n::: columns\n::: column\n![](images/informe_gapmider_demo_1.png){width=\"1196\"}\n:::\n\n::: column\n![](images/informe_gapmider_demo_1_render.png)\n:::\n:::\n\n## 1.El Encabezado YAML (`---`)\n\nEs la secci√≥n de configuraci√≥n al inicio del archivo.\n\nü•™ Se define entre tres guiones (`---`) al principio y al final como un sanwich\n\nüéØ Ac√° le decimos a Quarto:\n\n-   Los metadatos de nuestro archivo (t√≠tulo, subtitulo, autor, fecha)\n\n-   El / los formatos: html, pdf, wordetc. y caracter√≠sticas espec√≠ficas de comportamiento de ese formato\n\n-   Par√°metros de automatizaci√≥n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: \"Informe Gapmider demo\"\nauthor: \"Betsy Cohen\"\ndate: \"01-06-2025\"\nformat: html # Opciones como html, pdf, revealjs, etc.\n---\n```\n:::\n\n\n## 1.El Encabezado YAML: opciones\n\nDentro del YAML vamos a tener diferentes opciones. por ej\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6-9\"}\n---\ntitle: \"Informe Gapmider demo\"\nauthor: \"Betsy Cohen\"\ndate: \"01-06-2025\"\nformat: \n  html:\n    toc: true # hacer una tabla de contenidos\n    toc-location: left # poner la tabla de contenidos a la izq\n    number-sections: true # numerar las secciones\n    code-fold: true # desplegar el c√≥digo\n    embed-resources: true # un html auto contenido (evitar dependencias).\n---\n```\n:::\n\n\n## Controlando los themes. {.smaller}\n\nDentro de las opciones de YAML podemos elegir diferentes themes. Quarto incluye 25 themes diferentres que vienen del proyecto [Bootswatch](https://bootswatch.com/)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\n---\ntitle: \"Informe Gapmider demo\"\nauthor: \"Betsy Cohen\"\ndate: \"01-06-2025\"\nformat: \n  html:\n    toc: true # hacer una tabla de contenidos\n    toc-location: left # poner la tabla de contenidos a la izq\n    number-sections: true # numerar las secciones\n    code-fold: true # desplegar el c√≥digo\n    embed-resources: true # un html auto contenido (evitar dependencias).\n    theme: minty # nos permite controlar el estilo\n---\n```\n:::\n\n\n::: callout-tip\n### Tu propio estilo\n\nTambi√©n podes crear tus propios themes con los colores de tu organizaci√≥n o empresa. Para ello podes usar el paquete `brand.yml` que se integra al conjunto de los archivos que crees con Quarto. M√°s info en: https://posit-dev.github.io/brand-yml/\n:::\n\n## Modo source y modo visual\n\nRstudio nos permite trabajar en Quarto tanto en modo visual como source.(Esto es algo que tambi√©n podemos setear en el deafult de nuestro YAML pero tambi√©n podes acceder). El modo visual te permite acceder a un mont√≥n de opciones de edici√≥n de Quarto simplemente presionando la tecla `/` como chguncks, bullets, modo de cita, callouts, emojis ¬°y muchos m√°s!\n\n![](images/quarto_visual_mode_options.png){fig-align=\"center\"}\n\n## 2.Texto en Markdown {.smaller}\n\nAc√° es donde escribis tu contenido de texto. Markdown es un lenguaje de marcado simple que te permite formatear texto f√°cilmente:\n\n-   T√≠tulos: `# T√≠tulo 1`, `## T√≠tulo 2`, `### T√≠tulo 3`, etc.\n-   Negritas: `**texto en negrita**`\n-   It√°licas: `*texto en it√°lica*`\n-   Listas: `- Item 1` `- Item 2`\n-   Enlaces `[Un link](www.ellink.com.ar)`\n-   Im√°genes `![](ruta_ o enlace de la _de_la_imagen-png)`\n\n![](images/texto_markdown.png){width=\"1100\"}\n\n## 3.Bloques de C√≥digo (Code Chunks)\n\n-   El chunck donde vamos a poner el c√≥digo de R (o Python, etc.). Abajo de eso vamos a ir viendo el resultado de esa ejecuci√≥n.\n\n-   Los definimos con los backticks y el nombre de del lenguaje entre llaves.\n\n-   Shortcuts:\n\n    -   **ctrl+alt+i**\n\n    -   haciendo clic en el bot√≥n ![](images/boton_chunck.png){width=\"30\" height=\"23\"} en la parte superior del Quarto document\n\n## 3.Bloques de C√≥digo (Code Chunks) {.smaller}\n\nPor ejemplo esto es un ejemplo de chuck\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\n# Esto es un bloque de c√≥digo R\n\nlibrary(tidyverse)\nlibrary(gapminder)\n\ngapminder %>% \n  mutate(pop = pop/1000000) %>% \n  filter(year == 2007) %>% \n  ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = continent)) +\n  geom_point(alpha = 0.7) +\n  scale_size(range = c(2, 12)) +\n  labs(title = \"PBI per capita seg√∫n Esperanza de vida y tama√±o deblaci√≥n\",\n       subtitle = \"A√±o 2007\",\n       x = \"PBI per capita\",\n       y = \"Esperanza de vida\",\n       size = \"Millones de habitantes\",\n       color = \"Continente\")+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](comunicar_con_quarto_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## Las opciones de los Chunks (#\\|)\n\nEn la parte superior de los chuncks podemos controlar el comportamiento de cada bloque de c√≥digo con opciones espec√≠ficas. Para usarlas vamos a usar el signo `#|`:\n\n::: incremental\n-   **#\\| echo: false** Oculta el c√≥digo del output final, mostrando solo los resultados.\n-   **#\\| eval: false** No ejecuta el c√≥digo, solo lo muestra.\n-   **#\\| warning: false** No incluir las advertencias en la salida\n-   **#\\| include: false** para incluir o no la salida\n-   **#\\| output-location: slide**: √ötil en presentaciones para que el output aparezca en una nueva diapositiva.\n-   **#\\| fig-width: y #\\|fig-height**: Controla el tama√±o de los gr√°ficos.\n:::\n\n## 4. Renderizar el Documento\n\nUna vez que tenes tu archivo `.qmd` listo, el √∫ltimo paso es renderizarlo para generar el formato de salida deseado.\n\nPoedes hacerlo de cuatro maneras:\n\n::: incremental\n-   ![](images/rstudio-render-button.png){width=\"69\" height=\"53\"} **Desde bot√≥n Render**: Usa el bot√≥n **\"Render\"** en la barra de herramientas.\n\n-   ‚úÖ Chequeadno la casilla **\"Render on Save\"** y que cada vez que guardamos con cntrl+s renderiza los cambios.\n\n-   **Desde la Terminal**: Ejecutando el comando `quarto render nombre_de_tu_archivo.qmd.`\n\n-   **Con la funci√≥n quarto::quarto_render()** en la consola o en el script `quarto::quarto_render(   input = \"ruta/nombre_de_tu_archivo.qmd\")`\n:::\n\n## Un archivo muchas salidas posibles\n\nCon un mismo archivo `.qmd`, puedes generar una variedad de formatos simplemente haciendo el cambio en el YAML por ej. ac√° sacando el reporte tanto en html como en pdf lo cual nos va a dar la posibilidad de renderizar diferentes formatos\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\n---\ntitle: \"Informe Gapmider demo\"\nauthor: \"Betsy Cohen\"\ndate: \"01-06-2025\"\nformat: \n  html:\n    toc: true # hacer una tabla de contenidos\n    toc-location: left # poner la tabla de contenidos a la izq\n    code-fold: true\n  pdf: default\n---\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/render_button_multiple_formats.png){fig-align=\"left\" width=\"284\"}\n:::\n:::\n\n## Controlando la Salida\n\nPodes controlar c√≥mo se ven y se comportan los elementos en tu documento final seteando dentro del YAML:\n\n-   **df-print:** Define c√≥mo se muestran los data.frames en el output (ej. kable para tablas m√°s bonitas).\n\n-   **execute:** Controla el comportamiento general de la ejecuci√≥n del c√≥digo en todo el documento.\n\n## Publicar en l√≠nea\n\nHay muchas formas de publicar nuestros archivos de y proyectos Quarto pero quizas la m√°s sencilla sea hacerlo en **Quarto Pub** una plataforma gratuita y p√∫blica que el mismo Quarto nos ofrece.\n\nPara poder publicar nos vamos a dar de alta como en cualquier servicio en <https://quartopub.com/sign-up>\n\n![](images/sign_up_screen_quarto_pub.png){fig-align=\"center\"}\n\n## Publicar en l√≠nea\n\nUna vez que ya tenemos nuestra cuenta y terminamos de escribir todo lo que quer√≠amos y estamos listos para compartir nuestro archivo con el mundo vamos a hacer un ultimo **Render** y despu√©s en la pesta√±a de de **Terminal** vamos a escribir\n\n`quarto publish quarto-pub`\n\nLa primera vez que lo hagamos seguramente nos pedir√° indicarle el correo o **id** de nuestra cuenta\n\n::: callout-note\nTe recomendamos [este video](https://youtu.be/nuYNCPRf8Js?si=8RmgI57Qlh0GPTMB) de menos de dos minutos donde [Melisa Van Bussel](https://www.youtube.com/@ggnot2) nos muestra como publicar un sitio de Quarto desde tu consola en 60 segundo. En su canal adem√°s vas a encontrar much√≠simos recursos sobre Quarto en los cuales seguir aprendiendo.\n:::\n\n## A Practicar!\n\n-   Paso 1: Documento HTML B√°sico: Crear un reporte HTML simple que combine texto, c√≥digo R y sus resultados.\n\n-   Paso 2: Tomando el mismo documento cambia el par√°metro html por revealjs en tu archivo y prob√° qu√© pasa\n\n## Automatizando nuestros reportes con par√°metros\n\nImaginate que necesitas generar un reporte de bibliotecas para cada provincia de Argentina, o un resumen de ping√ºinos para cada especie. ¬°Hacerlo \"a mano\" ser√≠a un embole!\n\nLos reportes parametrizados en Quarto resuelven esto.\n\n## Automatizando nuestros reportes con par√°metros\n\nLos par√°metros son variables (dentro de un objeto especial que llamamos params)\n\nEl params lo definimos dentro del encabezado **YAML** de nuestro documento y despu√©s lo podemos ir usando a lo largo de nuestro c√≥digo para que vayan automatizandose cada uno de los gr√°ficos, t√≠tulos o elementos que necesitemos ir ajustando.\n\nQuarto permite cambiar el valor de estos par√°metros f√°cilmente para generar diferentes versiones del reporte y multiplicarlo como panes.\n\n![](images/esquema_parametros_2.png)\n\n## Qu√© tipo de variables podemos parametrizar\n\n::: incremental\n-   Strings\n-   N√∫meros\n-   Valores dicot√≥micos (TRUE FALSE)\n:::\n\n## Parametrizando paso a paso (Modo manual)\n\nSiguiendo el ejemplo de las regiones...\n\n::: incremental\n1.  Escribimos un reporte en Quarto usando como ejemplo una de las regiones (por ej. AMBA) lo renderizamos para ver si no gusta como qued√≥.\n2.  En el YAML le indicamos un valor de default en `parms`\n3.  Reemplazamos el valor con la variable `params`a lo largo de nuestro reporte usando find y replace (cnrl+F)\n4.  Rendereamos cada uno de los reportes\n:::\n\n## Seteo el parametro en el YAML\n\nSiguiendo con nuestro ejemplo de YAML que vimos al comienzo con la base Gapminder\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"12-13\"}\n---\ntitle: \"Informe Gapmider demo\"\nauthor: \"Betsy Cohen\"\ndate: \"01-06-2025\"\nformat: \n  html:\n    toc: true \n    toc-location: left \n    number-sections: true \n    code-fold: true \n    embed-resources: true \nparams:\n  continent: \"Asia\" # Valor predeterminado\n---\n```\n:::\n\n\n## Acceder al par√°metro\n\nLos par√°metros son una lista\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(params)\n```\n:::\n\n\n`List of 1   $ continent: chr \"Asia\"`\n\nDe igual manera que cualquier otro objeto de tipo lista accedemos a cada elemento con el signo `$`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparams$continent\n```\n:::\n\n\n`[1] \"Asia\"`\n\nSi lo quiero agregar como texto a lo largo de mi reporte voy encerrar al parametro en una expresi√≥n de tipo `r`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# En el siguiente gr√°fico podemos observar los resultados para los pa√≠ses de **`r params$continent`**\n```\n:::\n\n\nEn el siguiente gr√°fico podemos observar los resultados para los pa√≠ses de **Asia**\n\n## Uso el par√°metro a lo largo de mi documento\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtrar el dataset de Gapminder usando el Continente\ngapminder %>% \n  filter(continent == params$continent)\n  mutate(pop = pop/1000000) %>% \n  filter(year == 2007) %>% \n  ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = country)) +\n  geom_point(alpha = 0.7) +\n  scale_size(range = c(2, 12)) +\n  labs(title = paste(\"PBI per capita seg√∫n Esperanza de vida y tama√±o de poblaci√≥n en\", params$continent),\n       subtitle = \"A√±o 2007\",\n       x = \"PBI per capita\",\n       y = \"Esperanza de vida\",\n       size = \"Millones de habitantes\",\n       color = \"Pa√≠s\")+\n  theme_minimal()\n```\n:::\n\n\n## M√°s sobre automatizaci√≥n\n\nSi te interesa aprender m√°s sobre automatizaci√≥n y parametrizaci√≥n podes consultar\n\n-   Ryan, Jadey. 2024. \"Parameterized Reports with Quarto: R-Ladies Abuja Workshop.\" 21 de Febrero 21 2024. https://jadeyryan.com/talks/2024-02-21_rladies-abuja-quarto-params.\n-   Documentaci√≥n de Quarto [Parameters](https://quarto.org/docs/computations/parameters.html)\n\n## Ahora a practicar!\n\n[![Artwork by \\@allison_horst](images/monsters_allison_horst.png)](https://twitter.com/allison_horst)\n",
    "supporting": [
      "comunicar_con_quarto_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}