{
  "hash": "4901e61d8e808452f92e969e22cb816c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Comunicar con Quarto\"\nsubtitle: \"AnÃ¡lisis de Datos 1 - Unidad 4\"\nauthor: \"Betsy Cohen\"\nlogo: \"images/logo-uflo.png\"\nformat:\n  revealjs:\n    width: 1600\n    height: 900\n    theme: slides.scss\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\nexecute:\n  echo: true\ndf-print: kable\n---\n\n\n\n## Quarto para todxs\n\n-   Es un sistema de publicaciÃ³n cientÃ­fica y tÃ©cnica de cÃ³digo abierto. Pensado para crear documentos dinÃ¡micos, presentaciones, libros y sitios web a partir de un simple archivo de texto plano.\n\n-   Unifica y facilita el proceso de creaciÃ³n y colaboraciÃ³n entre varios lenguajes (Python, Observable, Julia, R...) y nos permite crear mÃºltiples productos en mÃºltiples formatos (HTML, pdf, Word, ppt)\n\n![Imagen de \"Hello, Quarto\" keynote de Julia Lowndes y Mine Ã‡etinkaya-Rundel, RStudio::Conf(2022).](images/horst_qmd_render_schema.png){fig-align=\"left\"}\n\n## Â¿QuÃ© podemos hacer con Quarto?\n\n::: incremental\n-   ArtÃ­culos acadÃ©micos (PDF) / Reportes HTML\n\n-   Presentaciones (como la que estas viendo o en PDF)\n\n-   Dashbords (estÃ¡ticos o sobre shiny)\n\n-   Sitios web/ blog\n\n-   Libros\n\n-   Documentos interactivos (Jupyter/Shiny)\n:::\n\n## Por quÃ© Quarto\n\n-   **Reproducibilidad**: Tu anÃ¡lisis, el cÃ³digo y los resultados (tablas, grÃ¡ficos) viven juntos en un solo lugar. Â¡AdiÃ³s a copiar y pegar!\n\n-   **Flexibilidad de Formatos**: Con un mismo archivo fuente (.qmd), podes generar muchÃ­simos tipos de salida: HTML, PDF, Word, Â¡y mÃ¡s!\n\n-   **Profesionalismo**: Crea entregables con una apariencia pulida y profesional sin mucho esfuerzo.\n\n-   **Flujo de trabajo simple**: Escribis tu contenido en Markdown, integras tus bloques de cÃ³digo y Â¡renderizas!\n\n::: callout-note\n### Â¿Quarto vs. R Markdown?\n\nQuarto es el sucesor de R Markdown. Si ya conocÃ­as R Markdown, Quarto te resultarÃ¡ muy familiar, pero ofrece mÃ¡s funciones, flexibilidad y soporte para otros lenguajes mÃ¡s allÃ¡ de R.\n:::\n\n## Instalar Quarto {.smaller}\n\nPara instalar Quasrto simplemente vamos a ir a https://quarto.org/docs/get-started y vamos a descargar la versiÃ³n correspondiente a nuestrp sistema operativo\n\n![](images/instalar-quarto.png)\n\n::: callout-tip\nSi bien nosotros vamos a usarlo desde RStudio estÃ¡ bueno que sepas que podemos usar Quarto desde otras plataformas como **VS Code**, **Jupyter**.\n:::\n\n## AnatomÃ­a de un Archivo Quarto (`.qmd`) {.smaller}\n\nUn archivo Quarto (`.qmd`) tiene una estructura clara que lo hace fÃ¡cil de entender:\n\n::: columns\n::: column\n![](images/informe_gapmider_demo_1.png){width=\"1196\"}\n:::\n\n::: column\n![](images/informe_gapmider_demo_1_render.png)\n:::\n:::\n\n## 1.El Encabezado YAML (`---`)\n\nEs la secciÃ³n de configuraciÃ³n al inicio del archivo.\n\nðŸ¥ª Se define entre tres guiones (`---`) al principio y al final como un sanwich\n\nðŸŽ¯ AcÃ¡ le decimos a Quarto:\n\n-   Los metadatos de nuestro archivo (tÃ­tulo, subtitulo, autor, fecha)\n\n-   El / los formatos: html, pdf, wordetc. y caracterÃ­sticas especÃ­ficas de comportamiento de ese formato\n\n-   ParÃ¡metros de automatizaciÃ³n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: \"Informe Gapmider demo\"\nauthor: \"Betsy Cohen\"\ndate: \"01-06-2025\"\nformat: html # Opciones como html, pdf, revealjs, etc.\n---\n```\n:::\n\n\n\n## 1.El Encabezado YAML: opciones\n\nDentro del YAML vamos a tener diferentes opciones. por ej\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6-9\"}\n---\ntitle: \"Informe Gapmider demo\"\nauthor: \"Betsy Cohen\"\ndate: \"01-06-2025\"\nformat: \n  html:\n    toc: true # hacer una tabla de contenidos\n    toc-location: left # poner la tabla de contenidos a la izq\n    number-sections: true # numerar las secciones\n    code-fold: true # desplegar el cÃ³digo\n    embed-resources: true # un html auto contenido (evitar dependencias).\n---\n```\n:::\n\n\n\n## Controlando los themes. {.smaller}\n\nDentro de las opciones de YAML podemos elegir diferentes themes. Quarto incluye 25 themes diferentres que vienen del proyecto [Bootswatch](https://bootswatch.com/)\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\n---\ntitle: \"Informe Gapmider demo\"\nauthor: \"Betsy Cohen\"\ndate: \"01-06-2025\"\nformat: \n  html:\n    toc: true # hacer una tabla de contenidos\n    toc-location: left # poner la tabla de contenidos a la izq\n    number-sections: true # numerar las secciones\n    code-fold: true # desplegar el cÃ³digo\n    embed-resources: true # un html auto contenido (evitar dependencias).\n    theme: minty # nos permite controlar el estilo\n---\n```\n:::\n\n\n\n::: callout-tip\n### Tu propio estilo\n\nTambiÃ©n podes crear tus propios themes con los colores de tu organizaciÃ³n o empresa. Para ello podes usar el paquete `brand.yml` que se integra al conjunto de los archivos que crees con Quarto. MÃ¡s info en: https://posit-dev.github.io/brand-yml/\n:::\n\n## 2.Texto en Markdown {.smaller}\n\nAcÃ¡ es donde escribis tu contenido de texto. Markdown es un lenguaje de marcado simple que te permite formatear texto fÃ¡cilmente:\n\n-   TÃ­tulos: `# TÃ­tulo 1`, `## TÃ­tulo 2`, `### TÃ­tulo 3`, etc.\n-   Negritas: `**texto en negrita**`\n-   ItÃ¡licas: `*texto en itÃ¡lica*`\n-   Listas: `- Item 1` `- Item 2`\n-   Enlaces `[Un link](www.ellink.com.ar)`\n-   ImÃ¡genes `![](ruta_ o enlace de la _de_la_imagen-png)`\n\n![](images/texto_markdown.png){width=\"1100\"}\n\n## 3.Bloques de CÃ³digo (Code Chunks)\n\n-   El chunck donde vamos a poner el cÃ³digo de R (o Python, etc.). Abajo de eso vamos a ir viendo el resultado de esa ejecuciÃ³n.\n\n-   Los definimos con los backticks y el nombre de del lenguaje entre llaves.\n\n-   Shortcuts:\n\n    -   **ctrl+alt+i**\n\n    -   haciendo clic en el botÃ³n ![](images/boton_chunck.png){width=\"30\" height=\"23\"} en la parte superior del Quarto document\n\n## 3.Bloques de CÃ³digo (Code Chunks) {.smaller}\n\nPor ejemplo esto es un ejemplo de chuck\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\n# Esto es un bloque de cÃ³digo R\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'tidyverse' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'tibble' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'purrr' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'dplyr' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'forcats' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'lubridate' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nâ”€â”€ Attaching core tidyverse packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€\nâœ” dplyr     1.1.4     âœ” readr     2.1.4\nâœ” forcats   1.0.0     âœ” stringr   1.5.0\nâœ” ggplot2   3.5.2     âœ” tibble    3.2.1\nâœ” lubridate 1.9.2     âœ” tidyr     1.3.0\nâœ” purrr     1.0.2     \nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nâœ– dplyr::filter() masks stats::filter()\nâœ– dplyr::lag()    masks stats::lag()\nâ„¹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(gapminder)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'gapminder' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\ngapminder %>% \n  mutate(pop = pop/1000000) %>% \n  filter(year == 2007) %>% \n  ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = continent)) +\n  geom_point(alpha = 0.7) +\n  scale_size(range = c(2, 12)) +\n  labs(title = \"PBI per capita segÃºn Esperanza de vida y tamaÃ±o deblaciÃ³n\",\n       subtitle = \"AÃ±o 2007\",\n       x = \"PBI per capita\",\n       y = \"Esperanza de vida\",\n       size = \"Millones de habitantes\",\n       color = \"Continente\")+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](comunicar_con_quarto_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Las opciones de los Chunks (#\\|)\n\nEn la parte superior de los chuncks podemos controlar el comportamiento de cada bloque de cÃ³digo con opciones especÃ­ficas. Para usarlas vamos a usar el signo `#|`:\n\n::: incremental\n-   **#\\| echo: false** Oculta el cÃ³digo del output final, mostrando solo los resultados.\n-   **#\\| eval: false** No ejecuta el cÃ³digo, solo lo muestra.\n-   **#\\| warning: false** No incluir las advertencias en la salida\n-   **#\\| include: false** para incluir o no la salida\n-   **#\\| output-location: slide**: Ãštil en presentaciones para que el output aparezca en una nueva diapositiva.\n-   **#\\| fig-width: y #\\|fig-height**: Controla el tamaÃ±o de los grÃ¡ficos.\n:::\n\n## 4. Renderizar el Documento\n\nUna vez que tenes tu archivo `.qmd` listo, el Ãºltimo paso es renderizarlo para generar el formato de salida deseado.\n\nPoedes hacerlo de cuatro maneras:\n\n::: incremental\n-   ![](images/rstudio-render-button.png){width=\"69\" height=\"53\"} **Desde botÃ³n Render**: Usa el botÃ³n **\"Render\"** en la barra de herramientas.\n\n-   âœ… Chequeadno la casilla **\"Render on Save\"** y que cada vez que guardamos con cntrl+s renderiza los cambios.\n\n-   **Desde la Terminal**: Ejecutando el comando `quarto render nombre_de_tu_archivo.qmd.`\n\n-   **Con la funciÃ³n quarto::quarto_render()** en la consola o en el script `quarto::quarto_render(   input = \"ruta/nombre_de_tu_archivo.qmd\")`\n:::\n\n## Un archivo muchas salidas posibles\n\nCon un mismo archivo `.qmd`, puedes generar una variedad de formatos simplemente haciendo el cambio en el YAML por ej. acÃ¡ sacando el reporte tanto en html como en pdf lo cual nos va a dar la posibilidad de renderizar diferentes formatos\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\n---\ntitle: \"Informe Gapmider demo\"\nauthor: \"Betsy Cohen\"\ndate: \"01-06-2025\"\nformat: \n  html:\n    toc: true # hacer una tabla de contenidos\n    toc-location: left # poner la tabla de contenidos a la izq\n    code-fold: true\n  pdf: default\n---\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/render_button_multiple_formats.png){fig-align=\"left\" width=\"284\"}\n:::\n:::\n\n## Controlando la Salida\n\nPodes controlar cÃ³mo se ven y se comportan los elementos en tu documento final seteando dentro del YAML:\n\n-   **df-print:** Define cÃ³mo se muestran los data.frames en el output (ej. kable para tablas mÃ¡s bonitas).\n\n-   **execute:** Controla el comportamiento general de la ejecuciÃ³n del cÃ³digo en todo el documento.\n\n## A Practicar!\n\n-   Paso 1: Documento HTML BÃ¡sico: Crear un reporte HTML simple que combine texto, cÃ³digo R y sus resultados.\n\n-   Paso 2: Tomando el mismo documento cambia el parÃ¡metro html por revealjs en tu archivo y probÃ¡ quÃ© pasa\n\n## Automatizando nuestros reportes con parÃ¡metros\n\nImaginate que necesitas generar un reporte de bibliotecas para cada provincia de Argentina, o un resumen de pingÃ¼inos para cada especie. Â¡Hacerlo \"a mano\" serÃ­a un embole!\n\nLos reportes parametrizados en Quarto resuelven esto.\n\n## Automatizando nuestros reportes con parÃ¡metros\n\nLos parÃ¡metros son variables (dentro de un objeto especial que llamamos params)\n\nEl params lo definimos dentro del encabezado **YAML** de nuestro documento y despuÃ©s lo podemos ir usando a lo largo de nuestro cÃ³digo para que vayan automatizandose cada uno de los grÃ¡ficos, tÃ­tulos o elementos que necesitemos ir ajustando.\n\nQuarto permite cambiar el valor de estos parÃ¡metros fÃ¡cilmente para generar diferentes versiones del reporte y multiplicarlo como panes.\n\n![](images/esquema_parametros_2.png)\n\n## QuÃ© tipo de variables podemos parametrizar\n\n::: incremental\n-   Strings\n-   NÃºmeros\n-   Valores dicotÃ³micos (TRUE FALSE)\n:::\n\n## Parametrizando paso a paso (Modo manual)\n\nSiguiendo el ejemplo de las regiones...\n\n::: incremental\n1.  Escribimos un reporte en Quarto usando como ejemplo una de las regiones (por ej. AMBA) lo renderizamos para ver si no gusta como quedÃ³.\n2.  En el YAML le indicamos un valor de default en `parms`\n3.  Reemplazamos el valor con la variable `params`a lo largo de nuestro reporte usando find y replace (cnrl+F)\n4.  Rendereamos cada uno de los reportes\n:::\n\n## Seteo el parametro en el YAML\n\nSiguiendo con nuestro ejemplo de YAML que vimos al comienzo con la base Gapminder\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"12-13\"}\n---\ntitle: \"Informe Gapmider demo\"\nauthor: \"Betsy Cohen\"\ndate: \"01-06-2025\"\nformat: \n  html:\n    toc: true \n    toc-location: left \n    number-sections: true \n    code-fold: true \n    embed-resources: true \nparams:\n  continent: \"Asia\" # Valor predeterminado\n---\n```\n:::\n\n\n\n## Acceder al parÃ¡metro\n\nLos parÃ¡metros son una lista\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(params)\n```\n:::\n\n\n\n`List of 1   $ continent: chr \"Asia\"`\n\nDe igual manera que cualquier otro objeto de tipo lista accedemos a cada elemento con el signo `$`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparams$continent\n```\n:::\n\n\n\n`[1] \"Asia\"`\n\nSi lo quiero agregar como texto a lo largo de mi reporte voy encerrar al parametro en una expresiÃ³n de tipo `r`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# En el siguiente grÃ¡fico podemos observar los resultados para los paÃ­ses de **`r params$continent`**\n```\n:::\n\n\n\nEn el siguiente grÃ¡fico podemos observar los resultados para los paÃ­ses de **Asia**\n\n## Uso el parÃ¡metro a lo largo de mi documento\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtrar el dataset de Gapminder usando el Continente\ngapminder %>% \n  filter(continent == params$continent)\n  mutate(pop = pop/1000000) %>% \n  filter(year == 2007) %>% \n  ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = country)) +\n  geom_point(alpha = 0.7) +\n  scale_size(range = c(2, 12)) +\n  labs(title = paste(\"PBI per capita segÃºn Esperanza de vida y tamaÃ±o de poblaciÃ³n en\", params$continent),\n       subtitle = \"AÃ±o 2007\",\n       x = \"PBI per capita\",\n       y = \"Esperanza de vida\",\n       size = \"Millones de habitantes\",\n       color = \"PaÃ­s\")+\n  theme_minimal()\n```\n:::\n\n\n\n## MÃ¡s sobre automatizaciÃ³n\n\nSi te interesa aprender mÃ¡s sobre automatizaciÃ³n y parametrizaciÃ³n podes consultar\n\n-   Ryan, Jadey. 2024. \"Parameterized Reports with Quarto: R-Ladies Abuja Workshop.\" 21 de Febrero 21 2024. https://jadeyryan.com/talks/2024-02-21_rladies-abuja-quarto-params.\n-   DocumentaciÃ³n de Quarto [Parameters](https://quarto.org/docs/computations/parameters.html)\n\n## Ahora a practicar!\n\n[![Artwork by \\@allison_horst](images/monsters_allison_horst.png){fig-alt=\"Three monsters in witch hats (covered in hex stickers for different R packages) work together to brew up a data science report on the banks of a wild river. They are surrounded by equipment for water quality measurements (like a Secchi disk, field journal, sampling bottles, and YSI). The background is a distant snow-covered mountain and pine trees. In the river alongside the witches are a curious turtle, mayflies, a jumping fish, and a dragonfly. Made with Angie Reed and Alena Reynolds for their 2024 Posit Conference Talk.\"}](https://twitter.com/allison_horst)\n",
    "supporting": [
      "comunicar_con_quarto_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}