{
  "hash": "1a33a49ea6a3658544a5454d926ab5c8",
  "result": {
    "markdown": "---\ntitle: \"Introducción a Tidyverse: union y pivoteo de tablas\"\nsubtitle: \"Análisis de Datos 1\"\nauthor: \"Betsy Cohen\"\nlogo: \"images/logo-uflo.png\"\ndate: \"10/04/2025\"\nformat:\n  revealjs:\n    width: 1600\n    height: 900\n    theme: slides.scss\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\nexecute:\n  echo: true\ndf-print: kable\n---\n\n\n\n\n# Clase de Hoy: Más Allá de los Verbos Básicos 🚀\n\nEn la clase anterior, nos familiarizamos con los verbos esenciales del `dplyr` y cómo combinarlos con pipes para transformar datos.\n\nAhora, vamos a expandir nuestro arsenal de herramientas del tidyverse explorando dos operaciones fundamentales:\n\n-   Unión de Tablas (Joins): Combinar datos de múltiples tablas relacionadas.\n\n-   Pivoteo de Tablas (Pivoting): Reorganizar la estructura de las tablas para facilitar el análisis.\n\nEstas operaciones son clave para trabajar con conjuntos de datos complejos y cuando quieras darte cuenta van a ser parte de tu trabajo diario con datos.\n\n# Que las tablas sean unidas porque esa es la ley primera\n\n## Qué es un join()\n\nEn el análisis de datos, a menudo tenemos información distribuida en múltiples tablas relacionadas y necesitamos unirlas para combinar la información y poder analizarla en conjunto.\n\nEjemplo:\n\n**Tabla 1:** `encc_personas_region`: Información agregada por región\n\n**Tabla 2:** `tamanio_localidad_region`: Información sobre el tamaño de localidad por región\n\nQueremos unir estas tablas para tener en una sola tabla información combinada por región.\n\n## Tipos de join()\n\n`dplyr` nos ofrece una familia de funciones \\*\\*\\*\\_join()\\*\\* para realizar diferentes tipos de uniones de tablas, basadas en la lógica de las bases de datos relacionales. Los principales tipos son:\n\n::: columns\n::: {.column width=\"70%\"}\n**left_join:** Mantiene TODAS las filas de tabla_A (izquierda) y agrega las columnas correspondientes de tabla_B donde hay coincidencia en la columna_clave. Si no hay coincidencia, se completa con NA.\n:::\n\n::: {.column width=\"30%\"}\n![](images/left-join.gif){fig-align=\"right\" layout-valign=\"bottom\"}\n:::\n:::\n\n## Tipos de join()\n\n::: columns\n::: {.column width=\"70%\"}\n:::\n\n::: {.column width=\"30%\"}\n![](images/right-join.gif){fig-align=\"right\" layout-valign=\"bottom\"}\n:::\n:::\n\n## Tipos de join()\n\n::: callout-note\n### Otros tipos de join\n\n**semi_join** Unión SEMI-IZQUIERDA. Mantiene solo las filas de tabla_A que tienen coincidencia en la columna_clave en tabla_B, pero NO agrega las columnas de tabla_B. Sirve para filtrar tabla_A basándose en la presencia de coincidencias en tabla_B.\n\n**anti_join** Unión ANTI-IZQUIERDA. Mantiene solo las filas de tabla_A que NO tienen coincidencia en la columna_clave en tabla_B. Sirve para filtrar tabla_A y quedarte solo con las filas sin coincidencias en tabla_B.\n:::\n\n## Que tipos de join() existen {.smaller}\n\n`dplyr` nos ofrece una familia de funciones \\*\\*\\*\\_join()\\*\\* para realizar diferentes tipos de uniones de tablas, basadas en la lógica de las bases de datos relacionales. Los principales tipos son:\n\n|                                                                                                                                                                                                          |                                                                              |\n|-------------------------------------------------|-----------------------|\n| **left_join:** Mantiene TODAS las filas de tabla_A (izquierda) y agrega las columnas correspondientes de tabla_B donde hay coincidencia en la columna_clave. Si no hay coincidencia, se completa con NA. | ![](images/left-join.gif){fig-align=\"center\" fig-align=\"bottom\" width=\"125\"} |\n| **right_join:** Similar a left_join, pero mantiene TODAS las filas de tabla_B (derecha) y agrega las columnas de tabla_A donde hay coincidencia.                                                         |![](images/right-join.gif){fig-align=\"center\" fig-align=\"bottom\" width=\"125\"}|\n| **inner_join:** Mantiene solo las filas que tienen coincidencia en la columna_clave en AMBAS tablas.Es la intersección de las tablas.                                                                    | ![](images/inner-join.gif){fig-align=\"center\" fig-align=\"bottom\" width=\"125\"}|\n| **full_join:** Unión COMPLETA (EXTERNA). Mantiene TODAS las filas de AMBAS tablas, combinando las filas donde hay coincidencia y rellenando con NA donde no la hay. Es la unión de las tablas.           |![](images/full-join.gif){fig-align=\"center\" fig-align=\"bottom\" width=\"125\"}|\n\n## Como junto tablas\n\n\n::: {.cell}\n\n:::\n\n\n# Yo soy al derecho dado vuelta estas vos\n\n## Qué es un pivoteo y en qué situaciones lo voy a necesitar {.smaller}\n\nMuchas veces nos va a pasar que vamos a tener una tabla en la cual las categorías que queremos mostrar (por ejemplo sexo, edad, provincia) se encuentran como nombres de columnas. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencc_personas_por_genero_region\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region    | Mujer| Varón| No binario|\n|:---------|-----:|-----:|----------:|\n|CABA      |   215|   173|         NA|\n|CENTRO    |   368|   240|         NA|\n|CUYO      |   246|   185|         NA|\n|GBA       |   370|   249|          1|\n|NEA       |   269|   179|         NA|\n|NOA       |   284|   162|         NA|\n|PATAGONIA |   253|   186|         NA|\n\n</div>\n:::\n:::\n\n\nLa variable `sexo` no existe como tal sino que se encuentra **repartida a lo ancho de la tabla como columnas** y entonces si nos pasan una tabla como esta no podríamos aplicar operaciones como `filter()` y quedarnos sólo con las mujeres\n\n## Estirar a lo largo con pivot_longer {.smaller}\n\nPara convertir a sexo en columna vamos a usar una función muy útil llamada `pivot_longer`.\n\nLa función nos pide al menos dos argumentos para operar (además de la tabla en cuestión, obviamente)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencc_personas_por_genero_region_alargada <- encc_personas_por_genero_region %>% \n  pivot_longer(\n    cols = c(\"Mujer\",\"Varón\",\"No binario\"), # qué columnas necesitas pivotear\n    names_to = \"sexo\", # cómo se va a llamar la variable a donde van a parar\n    values_to = \"personas\" # (opcional) nombre de la columna a donde van a parar los valores pivoteados\n    )\n\nencc_personas_por_genero_region_alargada %>% \n  head(n=8)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region |sexo       | personas|\n|:------|:----------|--------:|\n|CABA   |Mujer      |      215|\n|CABA   |Varón      |      173|\n|CABA   |No binario |       NA|\n|CENTRO |Mujer      |      368|\n|CENTRO |Varón      |      240|\n|CENTRO |No binario |       NA|\n|CUYO   |Mujer      |      246|\n|CUYO   |Varón      |      185|\n\n</div>\n:::\n:::\n\n\n## Estirar a lo largo con pivot_longer {.smaller}\n\nY ahora ya podemos hacer operaciones con esta tabla como por ejemplo filtrar solo a las muejeres\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencc_personas_por_genero_region_alargada %>% \n  filter(sexo == \"Mujer\")\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region    |sexo  | personas|\n|:---------|:-----|--------:|\n|CABA      |Mujer |      215|\n|CENTRO    |Mujer |      368|\n|CUYO      |Mujer |      246|\n|GBA       |Mujer |      370|\n|NEA       |Mujer |      269|\n|NOA       |Mujer |      284|\n|PATAGONIA |Mujer |      253|\n\n</div>\n:::\n:::\n\n\n## Estirar a lo ancho con pivot_wider {.smaller}\n\nPivot wider es (como ya te estaras imaginando) la operación inversa. Los argumentos de esta función entonces van a ser\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencc_personas_por_genero_region_alargada %>% \n  pivot_wider(names_from = \"sexo\", # que categorias tengo que poner como nombre de la variable que voy a estirar a lo ancho como columnas\n              values_from = \"personas\") # Qué variable contiene los valores que debo repartir a lo ancho por esas columnas\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|region    | Mujer| Varón| No binario|\n|:---------|-----:|-----:|----------:|\n|CABA      |   215|   173|         NA|\n|CENTRO    |   368|   240|         NA|\n|CUYO      |   246|   185|         NA|\n|GBA       |   370|   249|          1|\n|NEA       |   269|   179|         NA|\n|NOA       |   284|   162|         NA|\n|PATAGONIA |   253|   186|         NA|\n\n</div>\n:::\n:::\n\n\n:::{call-out tip} Si bien no es una regla, podríamos pensar que pivot_longer va a transformar los datos de manera entendible para una máquina o para el trabajo con ellos como tablas de manera tidy, mientras que pivot_wider siempre nos da un formato :::\n\n# across() the universe\n\n# Qué aprendimos hasta acá\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}