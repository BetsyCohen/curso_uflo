{
  "hash": "756eafe31987884482fdaf48a4ca85ea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Entornos, Objetos y Operadores en R\"\nsubtitle: \"An√°lisis de Datos 1\"\nauthor: \"Betsy Cohen\"\nlogo: \"images/logo-uflo.png\"\ndate: \"27/03/2025\"\nformat:\n  revealjs:\n    width: 1600\n    height: 900\n    theme: slides.scss\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\nexecute:\n  echo: true\ndf-print: kable\n---\n\n\n# Clase 2: Navegando R: Entornos, Objetos y Operadores\n\nHoy vamos a explorar los **ladrillos fundamentales** con los que construimos an√°lisis de datos en R:\n\n-   **RECAP: Entornos de trabajo:** Vamos a repasar Scripts, Consola, Notebooks.\n-   **Objetos:** Vectores y Data Frames.\n-   **Operadores:** C√≥mo \"darle √≥rdenes\" a R.\n\n¬°Comprender estos conceptos es clave para empezar a trabajar con datos en R!\n\n# RECAP!\n\n![](images/meme_previously_on.webp)\n\n# Entornos de Trabajo en R\n\nCuando trabajamos en R, tenemos diferentes \"espacios\" o entornos para escribir y ejecutar c√≥digo:\n\n-   **Scripts (.R):** Como vimos la clase pasada son archivos de texto para guardar secuencias de comandos. **Ideal para an√°lisis reproducibles.**\n-   **Consola:** Espacio interactivo para ejecutar comandos uno a uno. **Perfecto para probar y explorar.**\n-   **Notebooks (.Rmd o .ipynb):** Documentos que combinan c√≥digo, texto y resultados. **Excelente para informes y presentaciones.**\n\n## Scripts: Recetas de An√°lisis Reutilizables üìù {.smaller}\n\n::: columns\n::: {.column width=\"40%\"}\nRetomemos este concepto fundamental:\n\n\\- Los **scripts de R** son archivos de texto plano con extensi√≥n `.R`.\n\n\\- Contienen una serie de comandos de R que se ejecutan en secuencia.\n\n\\- Son como \"recetas\" detalladas para realizar un an√°lisis.\n\n\\- **Reutilizables:** Podemos volver a ejecutar el mismo an√°lisis f√°cilmente. -\n\n\\- **Editables:** Podemos modificar y mejorar el script.\n\n\\- **Documentados:** Podemos agregar comentarios (#) para explicar el c√≥digo. (un mensaje para tu vos del futuro)\n:::\n\n::: {.column width=\"60%\"}\n![](images/clase_2_parte_2_screenshot_script_comments.png)\n:::\n:::\n\n## Consola: Exploraci√≥n Interactiva y Pruebas R√°pidas üßÆ\n\n-   La **consola de R** es un entorno interactivo.\n-   Ejecuta comandos l√≠nea por l√≠nea.\n-   Muestra los resultados inmediatamente despu√©s de cada comando.\n-   **Ideal para:**\n    -   **Experimentar:** Probar diferentes comandos y funciones.\n    -   **C√°lculos r√°pidos:** Usar R como calculadora.\n    -   **Explorar datos:** Ver partes de un objeto, comprobar resultados intermedios.\n\n## Notebooks: Informes Din√°micos y Presentaciones Interactivas üì∞\n\n-   Los **Notebooks** (R Markdown `.Rmd` o Quarto `.ipynb` o `.qmd`) combinan:\n    -   **C√≥digo R ejecutable:** Bloques de c√≥digo que se pueden ejecutar dentro del notebook.\n    -   **Texto:** Explicaciones, interpretaciones, narrativa del an√°lisis (en Markdown).\n    -   **Resultados:** Tablas, gr√°ficos, figuras generadas por el c√≥digo, ¬°integrados en el documento!\n-   **Perfectos para:**\n    -   **Informes:** Documentar un an√°lisis de forma clara y reproducible.\n\n    -   **Presentaciones:** Mostrar an√°lisis interactivos y din√°micos.\n\n    -   **Aprendizaje:** Experimentar con c√≥digo y ver los resultados en contexto.\n\n## Ayuda en R\n\nEn el cuadrante de Output (abajo a la derecha) tenemos varias pesta√±as entre ella una que vamos a usar bastante la pesta√±a **help** Gracias al trabajo de la comunidad vas a notar que en general la documentaci√≥n y ayuda de las funciones siempre te dan una descripci√≥n, detalles y ejemplos de usos.\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/clase_2_parte_2_screenshot_help_1){width=\"60%\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/clase_2_parte_2_screenshot_help_2){width=\"60%\"}\n:::\n:::\n\n# Objetos en R: Los \"Ingredientes\" de tu An√°lisis\n\nEn R, todo lo que creamos y manipulamos son **objetos**. Pens√° en ellos como los \"ingredientes\" que usas en una receta de cocina:\n\n-   **Vectores:** Listas ordenadas de elementos (n√∫meros, texto, etc.). Como una lista de respuestas a una pregunta de encuesta.\n-   **Data Frames:** Tablas de datos, como hojas de c√°lculo. ¬°Donde organizamos nuestros datos sociol√≥gicos!\n\nHoy nos vamos a centrar en **Vectores** y **Data Frames**, que son los m√°s fundamentales.\n\n## 1. Vectores: Listas de Datos üî¢\n\nUn **vector** es una colecci√≥n **ordenada** de elementos, todos del **mismo tipo**. Imagina una columna en una hoja de c√°lculo.\n\n**Ejemplo:** Las edades de un grupo de personas encuestadas:\n\n`[25, 30, 22, 40, 35]`\n\n## Creando Vectores con `c()`\n\nUsamos la funci√≥n `c()` (de \"combine\" o \"concatenar\") para crear vectores:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n c(25, 30, 22, 40, 35)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25 30 22 40 35\n```\n\n\n:::\n:::\n\n\n## Say my name: ponerle un nombre al vector {.smaller}\n\nPara que podamos guardar y luego \"llamar\" nuestro vector vamos a necesitar ponerle un nombre. Y para ello en R utilizamos el s√≠mbolo **\\<-** o tambi√©n cari√±osamente le decimos **flechita**\n\nDe esta manera podemos nombrar nuestro vector edades\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedades <- c(25, 14, 22, 40, 35)\n```\n:::\n\n\ny luego podemos llamarlo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedades\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25 14 22 40 35\n```\n\n\n:::\n:::\n\n\n## Say my name: ponerle un nombre al vector {.smaller}\n\nY esto es una gran ventaja porque por ej si queremos realizar alguna operaci√≥n como por ejemplo sumarle un a√±o a todas las edades simplemente haremos lo siguiente\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedades+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 26 15 23 41 36\n```\n\n\n:::\n:::\n\n\nEsta caracter√≠stica a en la que la operaci√≥n **se ejecuta sobre cada uno de los elementos** del vector se denomina **element-wise**.\n\nEntonces si realizamos una **operaci√≥n entre dos vectores** se ejecutar√° entre los vectores con misma ubicaci√≥n. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedades*2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 50 28 44 80 70\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nedades-5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20  9 17 35 30\n```\n\n\n:::\n:::\n\n\n## Par√° par√° par√°\n\n![](images/clase_2_parte_2_meme_para_para_para.jpg){fig-align=\"center\"}\n\n**¬øD√≥nde est√°n los vectores que creamos?**\n\n**Probalo** en tu consola y tu IDE de R y despu√©s volv√© a esta presenta\n\n## \n\n![](images/clase_2_parte_2_a_few_moments_later.jpg){width=\"100%\" height=\"100%\"}\n\n## Pues a nuestro Global Enviroment!\n\nEn una \"secci√≥n\" que llamamos **\"Values\"**\n\nAhi tambi√©n podemos ver una informaci√≥n importante sobre nuestro vector\n\n![](images/clase_2_parte_2_screenshot_vector_detail_info.png)\n\nR nos muestra el **nombre** del vector (en este caso `edades`) y el tipo o **clase** que en este caso es `numeric`.\n\n## Tipos de Vectores: No todos los \"ingredientes\" son iguales\n\nLos vectores en R pueden almacenar diferentes tipos de datos:\n\n::: {incremental}\n-   **Num√©ricos (o `double`):** N√∫meros con decimales. Ej: `c(25, 30.5, 22, 40, 35.8)` (edades, ingresos).\n-   **Enteros (`integer`):** N√∫meros enteros. Ej: `c(1, 2, 3, 4, 5)` (n√∫mero de hijos).\n-   **Caracteres (`character`):** Texto (strings). Ej: `c(\"Juan\", \"Maria\", \"Pedro\")` (nombres, respuestas abiertas).\n-   **L√≥gicos (`logical`):** Valores `TRUE` o `FALSE`. Ej: `c(TRUE, FALSE, TRUE, TRUE)` (¬øvot√≥ en la √∫ltima elecci√≥n?).\n-   **Factores (`factor`):** Variables categ√≥ricas con niveles definidos. Ej: `factor(c(\"Secundario\", \"Universitario\", \"Secundario\"))` (nivel educativo).\n:::\n\n## Num√©ricos: Cantidades y Medidas üìä\n\n-   Almacenan n√∫meros, con o sin decimales, positivos o negativos.\n-   Ideales para representar variables cuantitativas: edad, ingresos, a√±os de educaci√≥n, etc.\n\nAprovechandon nuestro vector `edades` Podriamos preguntarle a R la edad de nuestro entrevistado m√°s joven. Para eso vamos a usar la funci√≥n `min()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(edades)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n## ¬°Ahora ustedes!\n\nCre√° tu vector con ingresos de hogares y realiz√° los siguientes c√°lculos usando estas funciones de R\n\n¬¥min()¬¥ ¬¥mean()¬¥\n\n¬øQu√© represent√° cada una? ¬øQu√© conclusiones sacar√≠as acerca de esta muestra? Podes usar la ventana de **ayuda** integrada dentro de R ubicada en el panel inferior\n:::\n\n## Caracteres: Texto y Etiquetas üí¨\n\nOtro tipo de dato que vamos a usar MUCHISIMO son los de tipo texto\n\n-   Almacenan texto, cadenas de caracteres (strings).\n-   √ötiles para nombres, categor√≠as nominales, respuestas de encuestas abiertas.\n\nVeamos un ejemplo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovincia <- c(\"CABA\", \"Buenos Aires\",\"Buenos Aires\",\"Buenos Aires\",\"Mendoza\")\nprovincia\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"CABA\"         \"Buenos Aires\" \"Buenos Aires\" \"Buenos Aires\" \"Mendoza\"     \n```\n\n\n:::\n:::\n\n\n::: callout-important\n## ¬°OJO!\n\nLos strings no necesariamente tienen que contener letras. Tambi√©n pueden tener n√∫meros almacenados como texto. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n c(\"10\", \"9\", \"8\", \"10\", \"9\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"10\" \"9\"  \"8\"  \"10\" \"9\" \n```\n\n\n:::\n:::\n\n:::\n\n## L√≥gicos: Verdadero o Falso ‚úÖ ‚ùå\n\n-   Almacenan valores l√≥gicos: `TRUE` o `FALSE`.\n-   Resultado de comparaciones, condiciones.\n-   Muy √∫tiles para filtrar datos (los vas a adorar).\n\nPor ejemplo podriamos querer saber si nuestros entrevistados estan en edad de votar\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmayores_de_16 <- edades > 16\nmayores_de_16\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n\n## Factores: Categor√≠as con Sentido {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n-   Representan variables categ√≥ricas (nominales u ordinales).\n-   Definen **niveles** o categor√≠as posibles.\n-   Ayudan a R a entender que una variable es categ√≥rica y no solo texto.\n-   Importante para an√°lisis estad√≠sticos y gr√°ficos.\n\nVayamos con un clasico de la sociolog√≠a\n\n\n::: {.cell}\n\n```{.r .cell-code}\nniveles_educativos_caracter <- c(\"Primario\",\"Secundario\",\"Terciario\",\"Universitario\")\nniveles_educativos_factor <- factor(niveles_educativos_caracter)\nniveles_educativos_factor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Primario      Secundario    Terciario     Universitario\nLevels: Primario Secundario Terciario Universitario\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nCon la funci√≥n `factor()` nuestro vector deja de ser un simple conjunto de textos sueltos y pasa a ser si quisieramos saber todos los niveles de nuetra variable categ√≥rica podemos usar la funcion `levels()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(niveles_educativos_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Primario\"      \"Secundario\"    \"Terciario\"     \"Universitario\"\n```\n\n\n:::\n:::\n\n:::\n:::\n\n::: callout-tip\n### Characters vs Factores\n\nSi miras el **Global enbviroment** ¬øqu√© diferencias encontras entre los vectores niveles_educativos_caracter y niveles_educativos_factor?\n:::\n\n## 2. Data Frames: los vectores se unen porque esa es la ley primera üóÉÔ∏è\n\nUn **data frame** es la estructura de datos **m√°s importante** en R para an√°lisis sociol√≥gico.\n\n-   Similar a una tabla o hoja de c√°lculo en Excel\n-   Organiza datos en **filas** (observaciones) y **columnas** (variables).\n-   **Cada columna puede ser de un tipo diferente** (num√©rica, caracter, factor, etc.).\n\n## Creando Data Frames {.smaller}\n\nPodemos crear data frames con la funci√≥n `data.frame()` a partir de estos vectores:\n\nSupongamos que tenemos tres vectores chacarcter, otro numerico y otro factorial\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnombres <- c(\"Ana\", \"Pedro\", \"Maria\", \"Juan\", \"Sofia\")\nedades <- c(25, 30, 22, 40, 35)\nnivel_edu <- factor(c(\"Universitario\", \"Secundario\", \"Universitario\", \"Terciario\", \"Secundario\"))\n```\n:::\n\n\nUsando `data.frame()` Nombramos a cada una de las variables indicando el nombre es la columna = nombre_del_vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsociodata <- data.frame(\n  nombre = nombres, \n  edad = edades, \n  educacion = nivel_edu)\n\nsociodata\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|nombre | edad|educacion     |\n|:------|----:|:-------------|\n|Ana    |   25|Universitario |\n|Pedro  |   30|Secundario    |\n|Maria  |   22|Universitario |\n|Juan   |   40|Terciario     |\n|Sofia  |   35|Secundario    |\n\n</div>\n:::\n:::\n\n\n## Estructura \"Tidy\" de Data Frames üßπ\n\nEn el \"universo tidyverse\" (que usaremos mucho), trabajamos con data frames **\"tidy\"** o \"ordenados\":\n\n1.  **Cada columna es una variable.** (ej: nombre, edad, educaci√≥n)\n2.  **Cada fila es una observaci√≥n.** (ej: cada persona encuestada)\n3.  **Cada celda contiene un √∫nico valor.** (ej: la edad de Ana es 25)\n\n¬°Esta estructura facilita mucho el an√°lisis y la manipulaci√≥n de datos!\n\n![](images/clase_2_parte_2_screenshot_tidy_shape.png){fig-align=\"center\"}\n\n## Seleccionando Partes de un Data Frame ‚úÇÔ∏è {.smaller}\n\nPodemos acceder a partes espec√≠ficas de un data frame usando corchetes `[]` o el s√≠mbolo `$` (tambi√©n le decimos \"pesitos\"):\n\n<br>\n\n::: columns\n::: {.column width=\"50%\"}\n### Por posici√≥n (√≠ndices num√©ricos):\n\nTraer el caso en la Primera fila, segunda columna:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsociodata[1, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25\n```\n\n\n:::\n:::\n\n\nTraer toda la primera fila:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsociodata[1, ]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|nombre | edad|educacion     |\n|:------|----:|:-------------|\n|Ana    |   25|Universitario |\n\n</div>\n:::\n:::\n\n\nTraer toda la segunda columna:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsociodata[, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25 30 22 40 35\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n### Por nombre de columna (`$`):\n\nColumna \"educacion\" completa:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsociodata$educacion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Universitario Secundario    Universitario Terciario     Secundario   \nLevels: Secundario Terciario Universitario\n```\n\n\n:::\n:::\n\n\nPrimer elemento de la columna \"nombre\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsociodata$nombre[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Ana\"\n```\n\n\n:::\n:::\n\n:::\n:::\n\n# Operadores en R: Dando √ìrdenes a los Datos ‚öôÔ∏è\n\nLos **operadores** son s√≠mbolos especiales que indican a R qu√© tipo de acci√≥n o c√°lculo debe realizar. Son como los \"verbos\" en el lenguaje de R.\n\nTenemos diferentes tipos de operadores:\n\n1.  **Aritm√©ticos:** Para c√°lculos matem√°ticos.\n2.  **Relacionales (o de comparaci√≥n):** Para comparar valores (¬ømayor que?, ¬øigual a?).\n3.  **De Asignaci√≥n:** Para asignar valores a objetos (¬°ya los usamos con `<-`!).\n\n## 1. Operadores Aritm√©ticos: C√°lculos con Datos ‚ûï ‚ûñ ‚úñÔ∏è ‚ûó {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n-   `+` Suma\n-   `-` Resta\n-   `*` Multiplicaci√≥n\n-   `/` Divisi√≥n\n-   `^` Potencia\n:::\n\n::: {.column width=\"60%\"}\n**Por ejemplo:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedades <- c(25, 30, 22, 40, 35)\n\n# Sumar 5 a√±os a todas las edades:\nedades + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30 35 27 45 40\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcular el doble de cada edad:\nedades * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 50 60 44 80 70\n```\n\n\n:::\n:::\n\n\n:::\n\n::::\n\n\n\n\n## 2. Operadores Relacionales {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n-   `>` Mayor que\n-   `<` Menor que\n-   `>=` Mayor o igual que\n-   `<=` Menor o igual que\n-   `==` Igual a (¬°ojo, **dos iguales**!)\n-   `!=` No igual a (distinto de)\n:::\n\n::: {.column width=\"60%\"}\n**Ejemplos con vectores:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedades <- c(25, 30, 22, 40, 35)\n\n# ¬øQu√© edades son mayores de 30?\nedades > 30\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nniveles_educativos <- c(\"Secundario\", \"Universitario\", \"Primario\", \"Universitario\", \"Terciario\")\n\n# ¬øQu√© niveles educativos son \"Universitario\"?\nniveles_educativos == \"Universitario\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE  TRUE FALSE\n```\n\n\n:::\n:::\n\n\n:::\n\n::::\n\n\n\n\n## 3. Operadores de Asignaci√≥n {.smaller}\n\n-   **`<-` (Asignaci√≥n \"flechita\"):** Asigna el valor de la derecha al objeto de la izquierda. **¬°Es el m√°s com√∫n y recomendado!**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    mi_variable <- 10\n    nombre_data_frame <- sociodata\n    ```\n    :::\n\n\n-   **`=` (Asignaci√≥n \"igual\"):** Tambi√©n asigna valores. Funciona similar a `<-`, pero en algunos contextos puede ser menos claro.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    otra_variable = 20\n    ```\n    :::\n\n\n-   **`->` (Asignaci√≥n \"flecha derecha\"):** Asigna el valor de la izquierda al objeto de la derecha. Menos com√∫n, menos legible.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    \"Hola R\" -> mensaje\n    ```\n    :::\n\n\n**En este curso, usaremos principalmente `<-` para asignaciones. ¬°Es una buena pr√°ctica mantener la consistencia!**\n\n# Resumen de la Clase 2: ¬°Pilares de R! {.smaller}\n\nHoy aprendimos sobre:\n\n-   **Entornos de trabajo:** Scripts, Consola, Notebooks. Elige el adecuado para cada tarea.\n-   **Objetos fundamentales:**\n    -   **Vectores:** Listas de datos del mismo tipo.\n    -   **Data Frames:** Tablas para organizar datos sociol√≥gicos.\n-   **Operadores:** Para realizar c√°lculos y comparaciones con nuestros datos.\n\n¬°Con estos conocimientos, ya puedes empezar a crear y manipular datos en R! En la pr√≥xima clase, ¬°vamos a importar datos reales y poner en pr√°ctica todo esto!\n\n# Pr√≥xima Clase: ¬°Importando tus Datos a R! üöÄ\n\nEn la pr√≥xima clase, aprenderemos a:\n\n-   **Importar datos desde archivos externos:** CSV, Excel, etc.\n-   **Explorar los datos importados:** Ver su estructura, tipos de variables. :::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}