{
  "hash": "78e30f7aa22372b0e0314d6dfe71164b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ejercicio Pr√°ctico: Transformaci√≥n Condicional y Funciones con `map()`\"\nformat: html\neditor: visual\n---\n\n\n## Explorando Trayectorias Educativas con Condiciones y `map()` üöÄ\n\n![](https://resizer.glanacion.com/resizer/v2/en-1997-se-oficializo-la-creacion-de-insignia-TCPL4BRBW5HMBCJZ6MFQPF3TUA.jpg?auth=503a28f2afe5338229f5e4096da0670362dd9dbe4cb138ebeed252add7303910&width=768&quality=70&smart=false){fig-align=\"center\"}\n\nEn este ejercicio pr√°ctico, vamos a aplicar lo que aprendimos sobre l√≥gica condicional (`if_else()` y `case_when()`) y la funci√≥n m `map()` del paquete `purrr`.\n\nComo ejemplo vamos estar utilizando un dataset de Indicadores de trayectoria escolar de la Provincia de Buenos Aires que contiene informaci√≥n correspondiente a los indicadores de proceso, trayectoria y sobreedad de los niveles inicial, primario y secundario.\n\nLos datos se encuentran publicados en el sitio https://catalogo.datos.gba.gob.ar/dataset/indicadores-de-trayectoria\n\n::: callout-tip\nSi te interesa conocer m√°s acerca de este tema te recomendamos la lectura del [Manual Metodol√≥gico de Indicadores Educativos](https://abc.gob.ar/secretarias/sites/default/files/2024-08/Manual%20Metodolo%CC%81gico%20de%20Indicadores%20Educativos-%20Agosto%202024.pdf) que publica la Direcci√≥n de Informaci√≥n y Estad√≠stica de la Subsecretaria de Planeamiento. (Direcci√≥n General de Cultura y Educaci√≥n del Gobierno de la Provincia de Buenos Aires)\n:::\n\n**Objetivos:**\n\n-   Practicar el uso de `if_else()` para crear variables booleanas basadas en condiciones temporales.\n-   Utilizar `case_when()` para agrupar a√±os en per√≠odos educativos.\n-   Aplicar la funci√≥n `map()` para obtener res√∫menes de m√∫ltiples indicadores educativos de manera eficiente.\n\n\n\n\n\nVeamos las caracter√≠sticas de nuestro dataset con glimpse\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(trayectorias)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,485\nColumns: 23\n$ anio                             <int> 2012, 2013, 2014, 2015, 2016, 2017, 2‚Ä¶\n$ municipio_id                     <int> 6007, 6007, 6007, 6007, 6007, 6007, 6‚Ä¶\n$ municipio_nombre                 <chr> \"Adolfo Alsina\", \"Adolfo Alsina\", \"Ad‚Ä¶\n$ promocion_efectiva_primaria      <dbl> 100.26, 97.35, 97.36, 96.00, 97.67, 9‚Ä¶\n$ promocion_efectiva_secundaria    <dbl> 84.14, 86.84, 80.79, 91.55, 95.56, 81‚Ä¶\n$ repitencia_primaria              <dbl> 1.25, 1.68, 2.23, 2.41, 2.61, 3.09, 4‚Ä¶\n$ repitencia_secundaria            <dbl> 9.06, 5.31, 2.52, 5.24, 7.27, 5.69, 1‚Ä¶\n$ reinscripcion_primaria           <dbl> 0.07, 0.13, 0.07, 0.21, 0.07, 0.07, 0‚Ä¶\n$ reinscripcion_secundaria         <dbl> 1.79, 0.12, 0.43, 0.85, 1.29, 0.30, 0‚Ä¶\n$ abandono_interanual_primaria     <dbl> -1.57, 0.84, 0.34, 1.38, -0.35, -0.28‚Ä¶\n$ abandono_interanual_secundaria   <dbl> 5.01, 7.73, 16.26, 2.36, -4.12, 12.77‚Ä¶\n$ alumnos_promovidos_primaria      <dbl> 98.55, 99.30, 99.31, 98.53, 98.42, 98‚Ä¶\n$ alumnos_promovidos_secundaria    <dbl> 81.46, 90.52, 90.87, 91.38, 93.05, 92‚Ä¶\n$ alumnos_no_promovidos_primaria   <dbl> 1.45, 0.70, 0.69, 1.47, 1.58, 1.68, 1‚Ä¶\n$ alumnos_no_promovidos_secundaria <dbl> 18.54, 9.48, 9.13, 8.62, 6.95, 7.48, ‚Ä¶\n$ salidos_sin_pase_primaria        <dbl> 0.00, 0.30, 0.13, 0.33, 0.14, 0.13, 0‚Ä¶\n$ salidos_sin_pase_secundaria      <dbl> 2.71, 2.77, 2.11, 2.49, 2.79, 2.41, 0‚Ä¶\n$ salidos_con_pase_primaria        <dbl> 5.40, 5.02, 4.84, 4.96, 4.72, 4.44, 5‚Ä¶\n$ salidos_con_pase_secundaria      <dbl> 2.90, 5.72, 4.31, 4.64, 3.57, 4.76, 4‚Ä¶\n$ sobreedad_primaria               <dbl> 12.61, 10.27, 8.46, 7.16, 6.81, 7.78,‚Ä¶\n$ sobreedad_secundaria             <dbl> 26.77, 26.27, 25.06, 30.85, 26.13, 18‚Ä¶\n$ sobreedad_avanzada_primaria      <dbl> 4.01, 3.42, 2.51, 1.86, 1.69, 1.75, 1‚Ä¶\n$ sobreedad_avanzada_secundaria    <dbl> 12.28, 11.51, 9.17, 10.51, 8.24, 7.93‚Ä¶\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(trayectorias)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  anio municipio_id municipio_nombre promocion_efectiva_primaria\n1 2012         6007    Adolfo Alsina                      100.26\n2 2013         6007    Adolfo Alsina                       97.35\n3 2014         6007    Adolfo Alsina                       97.36\n4 2015         6007    Adolfo Alsina                       96.00\n5 2016         6007    Adolfo Alsina                       97.67\n6 2017         6007    Adolfo Alsina                       97.12\n  promocion_efectiva_secundaria repitencia_primaria repitencia_secundaria\n1                         84.14                1.25                  9.06\n2                         86.84                1.68                  5.31\n3                         80.79                2.23                  2.52\n4                         91.55                2.41                  5.24\n5                         95.56                2.61                  7.27\n6                         81.23                3.09                  5.69\n  reinscripcion_primaria reinscripcion_secundaria abandono_interanual_primaria\n1                   0.07                     1.79                        -1.57\n2                   0.13                     0.12                         0.84\n3                   0.07                     0.43                         0.34\n4                   0.21                     0.85                         1.38\n5                   0.07                     1.29                        -0.35\n6                   0.07                     0.30                        -0.28\n  abandono_interanual_secundaria alumnos_promovidos_primaria\n1                           5.01                       98.55\n2                           7.73                       99.30\n3                          16.26                       99.31\n4                           2.36                       98.53\n5                          -4.12                       98.42\n6                          12.77                       98.32\n  alumnos_promovidos_secundaria alumnos_no_promovidos_primaria\n1                         81.46                           1.45\n2                         90.52                           0.70\n3                         90.87                           0.69\n4                         91.38                           1.47\n5                         93.05                           1.58\n6                         92.52                           1.68\n  alumnos_no_promovidos_secundaria salidos_sin_pase_primaria\n1                            18.54                      0.00\n2                             9.48                      0.30\n3                             9.13                      0.13\n4                             8.62                      0.33\n5                             6.95                      0.14\n6                             7.48                      0.13\n  salidos_sin_pase_secundaria salidos_con_pase_primaria\n1                        2.71                      5.40\n2                        2.77                      5.02\n3                        2.11                      4.84\n4                        2.49                      4.96\n5                        2.79                      4.72\n6                        2.41                      4.44\n  salidos_con_pase_secundaria sobreedad_primaria sobreedad_secundaria\n1                        2.90              12.61                26.77\n2                        5.72              10.27                26.27\n3                        4.31               8.46                25.06\n4                        4.64               7.16                30.85\n5                        3.57               6.81                26.13\n6                        4.76               7.78                18.64\n  sobreedad_avanzada_primaria sobreedad_avanzada_secundaria\n1                        4.01                         12.28\n2                        3.42                         11.51\n3                        2.51                          9.17\n4                        1.86                         10.51\n5                        1.69                          8.24\n6                        1.75                          7.93\n```\n\n\n:::\n:::\n\n\nLa tabla muestra para cada municipio los resultados de indicadores por a√±o\n\nveamos los inicios y fines de la serie hist√≥rica\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrayectorias %>% \n  group_by(municipio_id) %>% \n  summarise(anio_de_inicio_serie = min(anio),\n            anio_de_fin_serie = max(anio))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 135 √ó 3\n   municipio_id anio_de_inicio_serie anio_de_fin_serie\n          <int>                <int>             <int>\n 1         6007                 2012              2022\n 2         6014                 2012              2022\n 3         6021                 2012              2022\n 4         6028                 2012              2022\n 5         6035                 2012              2022\n 6         6042                 2012              2022\n 7         6049                 2012              2022\n 8         6056                 2012              2022\n 9         6063                 2012              2022\n10         6070                 2012              2022\n# ‚Ñπ 125 more rows\n```\n\n\n:::\n:::\n\n\nUn lujo, todos nuestros municipios parecen iniciar y terminar su serie en 2022 y terminar en 2022.\n\n## Ejercicio 1: L√≥gica Condicional con `if_else()` üí°\n\nVamos a crear una nueva variable que indique si el a√±o de registro es posterior a 2017.\n\nUtiliza la funci√≥n `mutate()` junto con `if_else()` para crear una nueva columna llamada `es_anio_posterior_2017`. Esta columna debe tener el valor `TRUE` si el `anio` es mayor que 2017 y `FALSE` en caso contrario\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Completa el siguiente c√≥digo:\ntrayectorias_con_anio_posterior <- trayectorias %>%\n  mutate(\n    es_anio_posterior_2017 = if_else(anio > 2017, TRUE, FALSE)\n  )\n\n# Muestra la frecuencia de la nueva variable para verificar tu respuesta:\ntrayectorias_con_anio_posterior %>% count(es_anio_posterior_2017)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  es_anio_posterior_2017   n\n1                  FALSE 810\n2                   TRUE 675\n```\n\n\n:::\n:::\n\n\n## Ejercicio 2: L√≥gica Condicional con case_when() üé≠\n\nVamos a agrupar los a√±os en diferentes per√≠odos educativos correspondientes a las gestiones electorales\n\nUtiliza la funci√≥n mutate() junto con case_when() para crear una nueva columna llamada periodo_educativo basada en la variable anio. Los per√≠odos deben ser:\n\n-   Daniel Scioli (PJ) 2007 - 2011\n-   Maria Eugenia Vidal (PRO) 2015 - 2019\n-   Axel Kicillof 2019 - 2023\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrayectorias<- trayectorias %>%\n  mutate(\n    periodo_educativo = case_when(\n      anio >= 2012 & anio <= 2015 ~ \"Daniel Scioli (PJ)\",\n      anio >= 2016 & anio <= 2019 ~ \"Maria Eugenia Vidal (PRO)\",\n      anio >= 2019 & anio <= 2023 ~ \"Axel Kicillof (PJ)\",\n      TRUE ~ \"Otro per√≠odo\"\n    ),\n    # la ordenamos como factor\n    periodo_educativo = factor(\n      periodo_educativo,\n      levels = c(\"Daniel Scioli (PJ)\",\"Maria Eugenia Vidal (PRO)\",\"Axel Kicillof (PJ)\"),\n      ordered = T)\n  )\n\n# Chequeamos como qued√≥:\ntrayectorias %>% \n  group_by(periodo_educativo) %>% \n  summarise(inicio = min(anio),\n            fin = max(anio))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 3\n  periodo_educativo         inicio   fin\n  <ord>                      <int> <int>\n1 Daniel Scioli (PJ)          2012  2015\n2 Maria Eugenia Vidal (PRO)   2016  2019\n3 Axel Kicillof (PJ)          2020  2022\n```\n\n\n:::\n:::\n\n\n-   ¬øCual fue el promedio de repitencia primaria historica?\n-   ¬øCual fue el promedio de repitencia primaria en cada gesti√≥n?\n-   Si tomamos como benchmark el promedio de toda la serie ¬øque gesti√≥n obtuvo una mayor repitencia promedio?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculamos el promedio hist√≥rico de repitencia en primaria\nrepitencia_primaria_historica <- mean(trayectorias$repitencia_primaria, na.rm = TRUE)\nrepitencia_primaria_historica\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.401246\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculamos el promedio de repitencia por per√≠odo de gesti√≥n\nrepitencia_por_gestion <- trayectorias %>% \n  group_by(periodo_educativo) %>% \n  summarise(repitencia_primaria = mean(repitencia_primaria, na.rm = TRUE)) %>% \n  mutate(diferencia_primaria = repitencia_primaria - repitencia_primaria_historica)\n\n# Mostramos el resultado\nrepitencia_por_gestion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 3\n  periodo_educativo         repitencia_primaria diferencia_primaria\n  <ord>                                   <dbl>               <dbl>\n1 Daniel Scioli (PJ)                       1.98              -0.417\n2 Maria Eugenia Vidal (PRO)                3.29               0.893\n3 Axel Kicillof (PJ)                       1.77              -0.636\n```\n\n\n:::\n:::\n\n\n## Ejercicio 3: Usando map() para Explorar Indicadores de Primaria üìä\n\nQueremos obtener la media de varios indicadores de la escuela primaria a lo largo de los a√±os.\n\nTu tarea:\n\nCrea un vector con los nombres de las variables que representan indicadores de primaria: \"promocion_efectiva_primaria\", \"repitencia_primaria\", \"abandono_interanual_primaria\", \"sobreedad_primaria\". Utiliza la funci√≥n map() para aplicar una funci√≥n an√≥nima a cada nombre de variable en el vector. Dentro de la funci√≥n an√≥nima, utiliza summarize() para calcular la media (mean()) de la variable correspondiente en el dataset trayectorias. Recuerda usar na.rm = TRUE para manejar los valores faltantes. Agrega el nombre de la variable al resultado usando mutate().\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Completa el siguiente c√≥digo:\nindicadores_primaria <- c(\"promocion_efectiva_primaria\", \"repitencia_primaria\", \"abandono_interanual_primaria\", \"sobreedad_primaria\")\n\nmedia_indicadores_primaria <- map(\n  .x = indicadores_primaria,\n  .f = function(variable) {\n    trayectorias %>%\n      summarize(\n        media = mean(!!sym(variable), na.rm = TRUE)\n      ) %>%\n      mutate(indicador = variable)\n  }\n)\n\n# Combina la lista de resultados en un solo data frame:\nmedia_indicadores_primaria_df <- bind_rows(media_indicadores_primaria)\nmedia_indicadores_primaria_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       media                    indicador\n1 97.1303232  promocion_efectiva_primaria\n2  2.4012458          repitencia_primaria\n3  0.3081684 abandono_interanual_primaria\n4  7.1446734           sobreedad_primaria\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n### ¬øQu√© es !!sym(variable) y por qu√© lo usamos en map()?\n\nImagina que tenes una lista de nombres de columnas (como \"region\", \"genero\", \"niv_socioe\") guardada en una variable llamada variables_categoricas. Cuando usamos la funci√≥n `map()`, queremos hacer la misma operaci√≥n (por ejemplo, contar las categor√≠as con count()) en cada una de esas columnas.\n\nLa funci√≥n count() en R, que viene del paquete dplyr, normalmente espera que le digamos el nombre de la columna directamente, sin comillas, as√≠:\n\n`encc_2022 %>% count(region)`\n\nSin embargo, dentro de la funci√≥n que le damos a map(), los nombres de las columnas est√°n guardados como texto (strings) dentro de la variable variable. R no entender√≠a si simplemente escribi√©ramos count(variable), porque pensar√≠a que variable es el nombre de una columna literal llamada \"variable\", ¬°y no los nombres de nuestras columnas reales!\n\nAqu√≠ es donde entra en juego esta \"magia\": `!!sym(variable)`. Pensalo como una forma de traducir el texto que tenemos en la variable variable al \"lenguaje\" que la funci√≥n count() necesita para entender que nos referimos a una columna espec√≠fica de nuestro dataset.\n\n-   **sym(variable)**: Esta parte toma el texto que est√° dentro de la variable (por ejemplo, \"region\") y lo convierte en algo que R considera un \"s√≠mbolo\" o un nombre.\n\n-   **!! (los dos signos de exclamaci√≥n)**: Estos le dicen a la funci√≥n count(): \"Che, lo que viene ac√° no es un texto cualquiera, es el nombre de una columna que quiero que uses\".\n\nUsar !!sym(variable) dentro de map() nos permite escribir c√≥digo mucho m√°s corto y eficiente. En lugar de escribir una l√≠nea de c√≥digo count() para cada columna que queremos analizar, podemos hacerlo todo de una vez usando map() y esta \"traducci√≥n\". Esto es especialmente √∫til cuando tenes muchas columnas a las que quieres aplicar la misma operaci√≥n.\n:::\n",
    "supporting": [
      "ejercicio_condicionales_y_map_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}