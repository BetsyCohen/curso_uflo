{
  "hash": "86f06dad6c2b3e212b2f6ffb6572b3c9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ejercicio Pr√°ctico: Visualizando Movilidad y Gasto Tur√≠stico con `ggplot2`\"\nformat: html\neditor: visual\n---\n\n\n## Visualizando Patrones de Movilidad y Gasto en el Turismo Receptivo\n\n![](https://static.hosteltur.com/app/public/uploads/img/articles/2013/01/01/L_5c1a313241f50_1020_chinos_g4.jpg)\n\nEn este ejercicio vamos a trabajar en la visualizaci√≥n de Patrones de Movilidad y Gasto en el Turismo Receptivo usando dos datasets del [Sistema de Informaci√≥n Tur√≠stica de la Argentina (SINTA)](https://www.yvera.tur.ar/sinta/)\n\n1.  **Gastos de Turistas No Residentes:** Informaci√≥n trimestral sobre el gasto promedio seg√∫n el paso fronterizo de ingreso.\n2.  **Vuelos, Asientos y Pasajeros:** Datos diarios sobre el movimiento a√©reo (cabotaje e internacional).\n\n\n## ¬øQu√© vamos a aprender con este ejercicio?\n\n\nAdem√°s de poner en pr√°ctica de manera integrada las transformaciones de dplyr agregamos algunas funciones muy √∫tiles de otros paquetes que forman parte del tiduverso o son complementarios a √©l.\n\n\n*   **Formateo de etiquetas de las escalas**: dentro de la capa de escalas tenemos un par√°metro llamado labels. El paquete [`scales`](https://scales.r-lib.org/) nos brinda varias funciones que nos permiten setear las etiquetas de los valores que vemos en los ejes para que sean m√°s legibles. Vamos a usar tres de ellas [`label_number()`](https://scales.r-lib.org/reference/label_number.html), [`label_currency()`](https://scales.r-lib.org/reference/label_currency.html) ,[`label_percent()`](https://scales.r-lib.org/reference/label_percent.html)\n\n\n*   **Formatear fechas**: [`lubridate`](https://lubridate.tidyverse.org/index.html) es una librer√≠a de la familia `tidyverse` que nos facilita para trabajar con fechas. En este ejercicio mostramos el uso de [`year()`](https://lubridate.tidyverse.org/reference/year.html) en conjunto con [`as_date()`](https://lubridate.tidyverse.org/reference/as_date.html) que permite que extraer el a√±o de una fecha cuya variable tiene formato character. \n\n\n*   **Factores ordenados** [`forcats`](https://forcats.tidyverse.org/index.html) es otra librer√≠a del tidyverso que facilita el trabajo con variables de tipo factor. En este ejercicio nos vamos a familiarizar con una de sus funciones: [`fct_reorder()`](https://forcats.tidyverse.org/reference/fct_reorder.html)\n\n\n\n\n## üì¶ Setup: Carg√° las librerias y los dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# cargar librer√≠as ----\n\nlibrary(tidyverse)\nlibrary(scales) # Para formatear la capa de ejes\nlibrary(ggthemes) # Para formatear la capa de temas\n\n# cargar datasets -----\n\n## df_gastos_no_residentes ----\nurl_gastos <- (\"https://datos.yvera.gob.ar/dataset/78b880c1-50d5-4a0c-9c87-7350e70548c2/resource/9a2c43e4-8037-4cf3-8559-bdab2a37ca94/download/gasto_total_promedio_diario_por_turista_en_usd_turistas_no_residentes_trimestral_segun_paso.csv\")\n\ndf_gastos_no_residentes <- read.csv(url_gastos)\n\n\n## df_vuelos_asientos_pasajeros ----\nurl_vuelos <- \"https://datos.yvera.gob.ar/dataset/c0e7bc3d-553c-405c-8b32-79282b28ffd5/resource/03b4176f-a065-450a-b411-101d2a884720/download/vuelos_asientos_pasajeros.csv\"\n\ndf_vuelos_asientos_pasajeros <- read.csv(url_vuelos)\n```\n:::\n\n\n## üëì Pegamos un vistazo a los datos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df_gastos_no_residentes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 200\nColumns: 6\n$ indice_tiempo                              <chr> \"2015-01-01\", \"2015-01-01\",‚Ä¶\n$ paso                                       <chr> \"Ezeiza y Aeroparque\", \"Aep‚Ä¶\n$ gasto_total_en_usd_no_residentes           <dbl> 841534824, 12268210, NA, 23‚Ä¶\n$ gasto_promedio_diario_en_usd_no_residentes <dbl> 92.5, 87.5, NA, 89.8, NA, 9‚Ä¶\n$ gasto_en_usd_por_turista_no_residente      <dbl> 1313.5, 1110.4, NA, 464.7, ‚Ä¶\n$ observaciones                              <chr> \"\", \"\", \"Paso que comenz√≥ a‚Ä¶\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(df_vuelos_asientos_pasajeros)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,841\nColumns: 5\n$ indice_tiempo       <chr> \"2017-01-01\", \"2017-01-01\", \"2017-01-02\", \"2017-01‚Ä¶\n$ clasificacion_vuelo <chr> \"Cabotaje\", \"Internacional\", \"Cabotaje\", \"Internac‚Ä¶\n$ pasajeros           <int> 25537, 31493, 37248, 41810, 34772, 39480, 36692, 3‚Ä¶\n$ asientos            <int> 37239, 46696, 46026, 51495, 42174, 49184, 44499, 4‚Ä¶\n$ vuelos              <int> 285, 247, 359, 254, 330, 245, 346, 242, 359, 249, ‚Ä¶\n```\n\n\n:::\n:::\n\n\n## üë©‚Äçüç≥ Preparaci√≥n de datos\n\nAgregamos en ambas bases variables de resumen de fecha anio y cuatrimestre usando las funciones `year()` y `quarter()` de la librer√≠a `lubridate` que forma parte de `tidyverse`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_gastos_no_residentes <- df_gastos_no_residentes %>%\n  mutate(\n    # creamos variables para el a√±o y el cuatrimestre\n    anio = year(as_date(indice_tiempo)),\n    cuatrimestre = quarter(as_date(indice_tiempo) )\n  ) \n\n\ndf_vuelos_asientos_pasajeros <- df_vuelos_asientos_pasajeros %>%\n  mutate(\n    # creamos variables para el a√±o y el cuatrimestre\n    anio = year(as_date(indice_tiempo)),\n    cuatrimestre = quarter(as_date(indice_tiempo) )\n  ) \n```\n:::\n\n\n## üëâ Ejercicio 1\n\n¬øCuantos pasajeros ingresaron por a√±o en vuelos de cabotaje y vuelos internacionales?\n\nCrea un gr√°fico de columnas apiladas y escrib√≠ una breve lectura del mismo.\n\nComo la suma de pasajeros supera los millones podes usar el siguiente c√≥digo en tu capa de escalas usando la funci√≥n `label_number()` de la librer√≠a `scales` de esta manera:\n\n**`scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = \"M\"))`**\n\n::: {.callout-tip collapse=\"true\"}\n\n### Ayuda\n\nDivid√≠ tu trabajo en pasos encadenados:\n\n1 Hace las transformaciones **agrupando** por a√±o y clasificaci√≥n del vuelo y calculando la suma de pasajeros. No olvides setear el par√°metro `na.rm= TRUE` en la suma para que no te de error en caso que haya datos nulos.\n\n2 Llama a ggplot y dise√±a la **capa de mapeo de datos** poniendo en la x el a√±o y en la y tu suma de pasajeros, usa como variable de relleno o `fill` la clasificaci√≥n del tipo de vuelo.\n\n3 Eleg√≠ la **geometr√≠a** de columnas y si te copas setea la **posici√≥n** como barras apiladas.\n\n4 Facilita la lectura de los datos de cantidad de pasajeros con la capa de escalas.\n\n5 Un gr√°fico siempre se lee mejor si le ponemos una capa de anotaciones indicando etiquetas (labs) para el t√≠tulo ejes y categor√≠as de la variable de relleno.\n\n6 *Lindo es mejor que feo*: Proba distintos estilos de theme que te ofrece el paquete ggthemes.\n:::\n\n::: {.callout-note collapse=\"true\"}\n\n### Respuesta\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_vuelos_asientos_pasajeros %>%\n  group_by(anio, clasificacion_vuelo) %>%\n  summarise(pasajeros = sum(pasajeros, na.rm = TRUE), .groups = \"drop\") %>%\n  ggplot(aes(x = as.factor(anio), y = pasajeros, fill = clasificacion_vuelo)) +\n  geom_col(position = \"stack\") +\n  scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = \"M\")) +\n  scale_x_discrete(drop = FALSE)+\n  scale_fill_manual(values = c(\"Cabotaje\" = \"#00A7E1\",\"Internacional\" = \"#cf5151\"))+\n  labs(\n    title = \"Pasajeros por tipo de vuelo y a√±o\",\n    x = \"Cuatrimestre\",\n    y = \"Pasajeros (en millones)\",\n    fill = \"Tipo de vuelo\",\n    caption = \"Fuente = SINTA\"\n  )+\n  # geometria de texto para agregar \"los valores.\"etiquetas\" a los valores\n  geom_text(\n    aes(label = scales::label_number(scale = 1e-6, suffix = \"M\")(pasajeros)),\n    position = position_stack(vjust = 0.5),\n    color = \"white\",\n    size = 3\n  ) + \n  ggthemes::theme_hc()\n```\n\n::: {.cell-output-display}\n![](ejercicio_ggplot_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n:::\n\n## üëâ Ejercicio 2\n\n¬øQu√© tan llenos ven√≠an los vuelos de cabotaje e internacionales en cada a√±o?\n\nRealiza un gr√°fico con **geometr√≠a de l√≠neas** (geom_line) para comparar ambos tipos de vuelos.\n\nPara poder indicar el color de las lineas (correspondiente a las categor√≠as en tipo de vuelo) utiliza el parametro **color** de dentro de la capa de mapeo de los datos\n\nPara expresar la relaci√≥n entre pasajeros y asientos con una etiqueta de porcentaje usar el siguiente c√≥digo en tu capa de escalas usando la funci√≥n `label_number()` de la librer√≠a `scales` de esta manera:\n\n**`scale_y_continuous(labels = scales::label_percent(accuracy = 1))`**\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n\n### Ayuda\n\nDivid√≠ tu trabajo en pasos encadenados:\n\n1 Hace las transformaciones **agrupando** por a√±o y clasificaci√≥n del vuelo. Para obtener la tasa de ocupacios vas a teener que crear una nueva variable que divida la suma de pasajeros por la suma de asientos. No olvides setear el par√°metro `na.rm= TRUE` en la suma para que no te de error en caso que haya datos nulos.\n\n2 Llama a ggplot y dise√±a la **capa de mapeo de datos** poniendo en la x el a√±o y en la y la tasa de ocupaci√≥n, usa como variable de `color` para las lineas la clasificaci√≥n del tipo de vuelo.\n\n3 Eleg√≠ la **geometr√≠a** de lineas.\n\n4 Facilita la lectura de los datos de cantidad de la tasa de ocupacxion usando la capa de escalas.\n\n5 Un gr√°fico siempre se lee mejor si le ponemos una capa de anotaciones indicando etiquetas (labs) para el t√≠tulo ejes y categor√≠as de la variable de relleno.\n\n6 *Lindo es mejor que feo*: Proba distintos estilos de theme que te ofrece el paquete ggthemes.\n:::\n\n::: {.callout-note collapse=\"true\"}\n\n### Respuesta\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_vuelos_asientos_pasajeros %>% \n  group_by(anio = anio, clasificacion_vuelo) %>% \n  summarise(asientos = sum(asientos,na.rm = T),\n            pasajeros = sum(pasajeros,na.rm = T),\n            .groups = \"drop\") %>% \n  mutate(completitud = pasajeros/asientos) %>% \n  ggplot(aes(x = anio, y = completitud, color = clasificacion_vuelo)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::label_percent(accuracy = 1)) +\n  scale_x_continuous(breaks = unique(df_vuelos_asientos_pasajeros$anio))+ # breakes label para cada a√±o explicito\n  scale_color_manual(values = c(\"Cabotaje\" = \"#00A7E1\",\"Internacional\" = \"#cf5151\"))+\n  labs(\n    title = \"Ocupaci√≥n de vuelos por tipo y a√±o\",\n    x = \"A√±o\", \n    y = \"Completitud (%)\",\n    color = \"Tipo de vuelo\",\n    caption = \"Fuente = SINTA\") +\n  geom_text(\n    aes(label = scales::label_percent(accuracy = 1)(completitud)),\n    color = \"black\",\n    size = 3\n  )+\n  ggthemes::theme_hc()\n```\n\n::: {.cell-output-display}\n![](ejercicio_ggplot_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n:::\n\n\n## üëâ Ejercicio 3\n\n¬øPor qu√© paso entraron los turistas que tuvieron un gasto promedio mayor en 2024?\nHace un gr√°fico de barras que muestre el ranking por paso. \nPara ordenar la variable por ranking vas a tener que convertir la variable paso en factor ordenado usando la funci√≥n `fct_reorder()` que es parte de la librer√≠a `forcats` que como ya te est√°s imaginando.... pertenece a tidyverse.\nLo hacemos as√≠:\n\n**`mutate(paso = fct_reorder(paso, gasto_promedio_diario_en_usd_no_residentes))`**\n\nAdem√°s si tenes ganas de representar los dolares como moneda podes usar `label_currency()` de `scales` de la siguiente manera:\n\n**`scale_y_continuous(labels = scales::label_currency(prefix = \"USD \", accuracy = 1))`**\n\n\n::: {.callout-tip collapse=\"true\"}\n\n### Ayuda\n\nDivid√≠ tu trabajo en pasos encadenados:\n\n1 Hace las transformaciones **filtrando** por a√±o y **agrupando** por paso. Luego hace el promedio de gasto_promedio_diario_en_usd_no_residentes)\n\nEl truco para que luego ggplot entienda que tiene que ordenar los pasos fronterizos por gasto_promedio_diario_en_usd_no_residentes es usar la funci√≥n `fct_reorder()`\n\n2 Llama a ggplot y dise√±a la **capa de mapeo de datos** poniendo en la `x` el los pasos y en la `y` el gasto promedio.\n\n3 Eleg√≠ la **geometr√≠a** de columnas y gira las coordenadas con coord_flip() para que los pasos queden como una listita\n\n4 Ahora solo algunas cuestiones de hermoseo:\n\nsetea la escala para que muestre el simbolo como moneda  scale_y_continuous(labels = scales::label_currency(prefix = \"USD \", accuracy = 1))\n\nAgrega los t√≠tulos con labs y si te animas una gemotr√≠a de texto \n\n\nPodes elegir el tema que m√°s te guste para finalizarlo\n\n\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n\n### Respuesta\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_gastos_no_residentes %>% \n  filter(anio == 2024) %>% \n  group_by(paso) %>% \n  summarise(gasto_promedio_diario_en_usd_no_residentes = mean(gasto_promedio_diario_en_usd_no_residentes, na.rm = TRUE),.groups = \"drop\") %>% \n  mutate(paso = fct_reorder(paso, gasto_promedio_diario_en_usd_no_residentes)) %>% \n  ggplot(aes(\n    x = paso,\n    y = gasto_promedio_diario_en_usd_no_residentes\n  )) +\n  geom_col() +\n  coord_flip()+\n  scale_y_continuous(labels = scales::label_currency(prefix = \"USD \", accuracy = 1)) +\n  labs( \n    title = \"Gasto promedio diario seg√∫n paso fronterizo\",\n    subtitle = \"A√±o 2024 - Turistas no residentes\",\n    x = \"\", y = \"Gasto promedio diario (USD)\",\n    caption = \"Fuente: SINTA\") +\n  geom_text(\n    aes(label = scales::label_currency(prefix = \"USD \", accuracy = 1)(gasto_promedio_diario_en_usd_no_residentes)),\n    position = position_stack(vjust = 0.5),\n    color = \"#45a35d\",\n    fontface = \"bold\"\n  )+\n  ggthemes::theme_hc()\n```\n\n::: {.cell-output-display}\n![](ejercicio_ggplot_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n:::\n",
    "supporting": [
      "ejercicio_ggplot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}