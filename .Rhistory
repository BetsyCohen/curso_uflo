plot(pressure)
provincia
#aca grafico algo
plot(cars)
25*4
#aca grafico algo
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
plot(cars)
edades <- c(25, 14, 22, 40, 35)
edades
edades
edades+1
edades+1
edades+10
edades
edades <- c(25, 14, 22, 40, 35)
edades <- c(25, 14, 22, 40, 35, "lapiz")
edades <- c(25, 14, 22, 40, 35)
min(edades)
mean(edades)
provincia <- c("CABA", Buenos Aires,"Buenos Aires","Buenos Aires","Mendoza")
provincia <- c("CABA","Buenos Aires","Buenos Aires","Buenos Aires","Mendoza")
provincia
c("10", "9", "8", "10", "9")
numeros_truchos<- c("10", "9", "8", "10", "9")
numeros_truchos<- c(10, 9, 8, 10, 9)
mayores_de_16 <- edades > 16
mayores_de_16
niveles_educativos_caracter <- c("Primario","Secundario","Terciario","Universitario")
niveles_educativos_caracter
niveles_educativos_factor <- factor(niveles_educativos_caracter)
niveles_educativos_factor
niveles_educativos_caracter
niveles_educativos_caracter
niveles_educativos_factor
levels(niveles_educativos_factor)
nombres <- c("Ana", "Pedro", "Maria", "Juan", "Sofia")
edades <- c(25, 30, 22, 40, 35)
nivel_edu <- factor(c("Universitario", "Secundario", "Universitario", "Terciario", "Secundario"))
sociodata <- data.frame(
nombre = nombres,
edad = edades,
educacion = nivel_edu)
View(sociodata)
View(sociodata)
sociodata
sociodata[1, 2]
sociodata[1,]
sociodata[,2]
sociodata$educacion
sociodata$nombre[1]
sociodata$educacion[1]
nombres <- c("Ana", "Pedro", "Maria", "Juan", "Sofia")
edades <- c(25, 30, 22, 40, 35)
nivel_edu <- factor(c("Universitario", "Secundario", "Universitario", "Terciario", "Secundario"))
sociodata <- data.frame(
nombre = nombres,
edad = edades,
educacion = nivel_edu)
sociodata
edades <- c(12,25,48,4,30)
provincia <-c("Buenos Aires","Mendoza","Nequen","Jujuy",NULL)
provincia <-c("Buenos Aires","Mendoza","Nequen","Jujuy",NA_character_)
mayores_de_16 <- edades > 16
letters(1:10)
letters[1:10]
colors[1:10]
colors
(ff <- factor(substring("statistics", 1:10, 1:10), levels = letters))
as.integer(ff)      # the internal codes
(f. <- factor(ff))  # drops the levels that do not occur
ff[, drop = TRUE]   # the same, more transparently
L3 <- LETTERS[1:3]
char <- sample(L3, 10, replace = TRUE)
(d <- data.frame(x = 1, y = 1:10, char = char))
Primario
asociaciones <- readr::read_csv(file = "https://raw.githubusercontent.com/gastonbecerra/curso-intro-r/main/data/asociaciones.csv")
View(asociaciones)
View(asociaciones)
# Cargar librerías (reutilizamos setup previo)
library(tidyverse)
library(purrr) # Cargamos el paquete purrr
# Cargar datos ENCC 2022
url <- "[https://datos.cultura.gob.ar/dataset/251c2ac2-e670-451c-9dbf-a4212af225b5/resource/b635d1fc-2161-4901-a21d-7f93d56d99a4/download/base-datos-encc-2022-2023.csv](https://datos.cultura.gob.ar/dataset/251c2ac2-e670-451c-9dbf-a4212af225b5/resource/b635d1fc-2161-4901-a21d-7f93d56d99a4/download/base-datos-encc-2022-2023.csv)"
encc_2022 <- read.csv(url)
# Cargar datos ENCC 2022 (reutilizamos carga previa)
url <- "https://datos.cultura.gob.ar/dataset/251c2ac2-e670-451c-9dbf-a4212af225b5/resource/b635d1fc-2161-4901-a21d-7f93d56d99a4/download/base-datos-encc-2022-2023.csv"
encc_2022 <- read.csv(url)
# Cargar datos
url <- "https://catalogo.datos.gba.gob.ar/dataset/0c691f21-28df-4ea5-98be-6e92b5a589c6/resource/aefb05d6-d4fd-4693-b6d0-1cccb0d40a7b/download/indicadores-proceso-trayectoria-sobreedad-2012_2022.xlsx"
rm(encc_2022)
datos <- read.csv(url)
# Cargar datos
url <- "https://catalogo.datos.gba.gob.ar/dataset/0c691f21-28df-4ea5-98be-6e92b5a589c6/resource/aefb05d6-d4fd-4693-b6d0-1cccb0d40a7b/download/indicadores-proceso-trayectoria-sobreedad-2012_2022.xlsx"
datos <- read.csv(url)
# Cargar datos
url <- "https://catalogo.datos.gba.gob.ar/dataset/0c691f21-28df-4ea5-98be-6e92b5a589c6/resource/5a73b8ea-24a4-4608-aaeb-39dde782fabf/download/indicadores-proceso-trayectoria-sobreedad-2012_2022.csv"
datos <- read.csv(url)
glimpse(str)
glimpse(datos)
trayectorias <- read.csv(url)
# Cargar datos
url <- "https://catalogo.datos.gba.gob.ar/dataset/0c691f21-28df-4ea5-98be-6e92b5a589c6/resource/5a73b8ea-24a4-4608-aaeb-39dde782fabf/download/indicadores-proceso-trayectoria-sobreedad-2012_2022.csv"
trayectorias <- read.csv(url)
glimpse(trayectorias)
trayectorias <- trayectorias %>%
mutate(anio = as.factor(anio))
trayectorias |>
group_by(anio) |>
count()
trayectorias |>
group_by(anio) |>
count() |>
as.tibble()
trayectorias |>
group_by(anio) |>
count() |>
as_tibble()
trayectorias |>
group_by(anio) |>
count()
trayectorias %>%
group_by(anio)  %>%
count()
head(trayectorias)
#| context: setup
#| include: false
# Cargar librerías que vamos a usar
library(tidyverse)
library(purrr)
# Cargar datos
url <- "https://catalogo.datos.gba.gob.ar/dataset/0c691f21-28df-4ea5-98be-6e92b5a589c6/resource/5a73b8ea-24a4-4608-aaeb-39dde782fabf/download/indicadores-proceso-trayectoria-sobreedad-2012_2022.csv"
trayectorias <- read.csv(url)
glimpse(trayectorias)
head(trayectorias)
trayectorias %>%
group_by(municipio_id) %>%
summarise(anio_de_inicio_serie = min(anio),
anio_de_fin_serie = max(anio))
trayectorias <- trayectorias %>%
mutate(anio = as.factor(anio))
#| context: setup
#| include: false
# Cargar librerías que vamos a usar
library(tidyverse)
library(purrr)
# Cargar datos
url <- "https://catalogo.datos.gba.gob.ar/dataset/0c691f21-28df-4ea5-98be-6e92b5a589c6/resource/5a73b8ea-24a4-4608-aaeb-39dde782fabf/download/indicadores-proceso-trayectoria-sobreedad-2012_2022.csv"
trayectorias <- read.csv(url)
glimpse(trayectorias)
head(trayectorias)
trayectorias %>%
group_by(municipio_id) %>%
summarise(anio_de_inicio_serie = min(anio),
anio_de_fin_serie = max(anio))
# Completa el siguiente código:
trayectorias_con_anio_posterior <- trayectorias %>%
mutate(
es_anio_posterior_2017 = if_else(anio > 2017, TRUE, FALSE)
)
# Muestra la frecuencia de la nueva variable para verificar tu respuesta:
trayectorias_con_anio_posterior %>% count(es_anio_posterior_2017)
trayectorias %>%
mutate(
periodo_educativo = case_when(
anio >= 2007 & anio <= 2011 ~ "Daniel Scioli (PJ)",
anio >= 2015 & anio <= 2019 ~ "Maria Eugenia Vidal (PRO)",
anio >= 2019 & anio <= 2023 ~ "Axel Kicillof",
TRUE ~ "Otro período"
)
)
# Muestra la frecuencia de la nueva variable para verificar tu respuesta:
trayectorias_con_periodo %>% count(periodo_educativo)
trayectorias<- trayectorias %>%
mutate(
periodo_educativo = case_when(
anio >= 2007 & anio <= 2011 ~ "Daniel Scioli (PJ)",
anio >= 2015 & anio <= 2019 ~ "Maria Eugenia Vidal (PRO)",
anio >= 2019 & anio <= 2023 ~ "Axel Kicillof",
TRUE ~ "Otro período"
)
)
# Muestra la frecuencia de la nueva variable para verificar tu respuesta:
trayectorias %>% count(periodo_educativo)
# Vamos a chequar nuestro codigo:
trayectorias %>%
group_by(periodo_educativo) %>%
summarise(min(anio),
max(anio))
# Vamos a chequar nuestro codigo:
trayectorias %>%
group_by(periodo_educativo) %>%
summarise(inicio = min(anio),
fin = max(anio))
trayectorias<- trayectorias %>%
mutate(
periodo_educativo = case_when(
anio >= 2007 & anio <= 2011 ~ "Daniel Scioli (PJ) 1er gestion",
anio >= 2012 & anio <= 2015 ~ "Daniel Scioli (PJ) 2da gestion",
anio >= 2016 & anio <= 2019 ~ "Maria Eugenia Vidal (PRO)",
anio >= 2019 & anio <= 2023 ~ "Axel Kicillof",
TRUE ~ "Otro período"
)
)
# Vamos a chequar nuestro codigo:
trayectorias %>%
group_by(periodo_educativo) %>%
summarise(inicio = min(anio),
fin = max(anio))
trayectorias<- trayectorias %>%
mutate(
periodo_educativo = case_when(
anio >= 2012 & anio <= 2015 ~ "Daniel Scioli (PJ)",
anio >= 2016 & anio <= 2019 ~ "Maria Eugenia Vidal (PRO)",
anio >= 2019 & anio <= 2023 ~ "Axel Kicillof",
TRUE ~ "Otro período"
)
)
# Vamos a chequar nuestro codigo:
trayectorias %>%
group_by(periodo_educativo) %>%
summarise(inicio = min(anio),
fin = max(anio))
trayectorias<- trayectorias %>%
mutate(
periodo_educativo = case_when(
anio >= 2012 & anio <= 2015 ~ "Daniel Scioli (PJ)",
anio >= 2016 & anio <= 2019 ~ "Maria Eugenia Vidal (PRO)",
anio >= 2019 & anio <= 2023 ~ "Axel Kicillof (PJ)",
TRUE ~ "Otro período"
),
periodo_educativo = as.factor(levels = c("Daniel Scioli (PJ)","Maria Eugenia Vidal (PRO)","Axel Kicillof (PJ)"))
)
trayectorias<- trayectorias %>%
mutate(
periodo_educativo = case_when(
anio >= 2012 & anio <= 2015 ~ "Daniel Scioli (PJ)",
anio >= 2016 & anio <= 2019 ~ "Maria Eugenia Vidal (PRO)",
anio >= 2019 & anio <= 2023 ~ "Axel Kicillof (PJ)",
TRUE ~ "Otro período"
),
periodo_educativo = factor(levels = c("Daniel Scioli (PJ)","Maria Eugenia Vidal (PRO)","Axel Kicillof (PJ)"))
)
trayectorias<- trayectorias %>%
mutate(
periodo_educativo = case_when(
anio >= 2012 & anio <= 2015 ~ "Daniel Scioli (PJ)",
anio >= 2016 & anio <= 2019 ~ "Maria Eugenia Vidal (PRO)",
anio >= 2019 & anio <= 2023 ~ "Axel Kicillof (PJ)",
TRUE ~ "Otro período"
),
periodo_educativo = factor(
periodo_educativo,
levels = c("Daniel Scioli (PJ)","Maria Eugenia Vidal (PRO)","Axel Kicillof (PJ)"),
ordered = T)
)
# Vamos a chequar nuestro codigo:
trayectorias %>%
group_by(periodo_educativo) %>%
summarise(inicio = min(anio),
fin = max(anio))
trayectorias %>%
mutate(repitencia_primaria_promedio = mean(repitencia_primaria),
repitencia_secundaria_promedio = mean(repitencia_secundaria))
trayectorias %>%
mutate(repitencia_primaria_promedio = mean(repitencia_primaria),
repitencia_secundaria_promedio = mean(repitencia_secundaria)) %>%
group_by(periodo_educativo) %>%
summarise(repitencia_primaria = mean(repitencia_primaria))
trayectorias %>%
mutate(repitencia_primaria_promedio = mean(repitencia_primaria),
repitencia_secundaria_promedio = mean(repitencia_secundaria)) %>%
group_by(periodo_educativo) %>%
summarise(repitencia_primaria = mean(repitencia_primaria),
repitencia_primaria_promedio)
trayectorias %>%
mutate(repitencia_primaria_promedio = mean(repitencia_primaria),
repitencia_secundaria_promedio = mean(repitencia_secundaria))
trayectorias %>%
mutate(repitencia_primaria_promedio = mean(repitencia_primaria),
repitencia_secundaria_promedio = mean(repitencia_secundaria))
group_by(periodo_educativo)
trayectorias %>%
mutate(repitencia_primaria_promedio = mean(repitencia_primaria),
repitencia_secundaria_promedio = mean(repitencia_secundaria))
group_by(periodo_educativo)
group_by(periodo_educativo) %>%
summarise(repitencia_primaria_promedio,
repitencia_secundaria_promedio)
trayectorias %>%
mutate(repitencia_primaria_promedio = mean(repitencia_primaria),
repitencia_secundaria_promedio = mean(repitencia_secundaria))
trayectorias %>%
mutate(repitencia_primaria_benchamrk = mean(repitencia_primaria),
repitencia_secundaria_benchmark = mean(repitencia_secundaria))
trayectorias %>%
mutate(repitencia_primaria_benchamrk = mean(repitencia_primaria),
repitencia_secundaria_benchmark = mean(repitencia_secundaria)) %>%
select(periodo_educativo,repitencia_primaria_benchamrk,repitencia_secundaria_benchmark) %>%
distinct(.keep_all = T)
benchmarks <- trayectorias %>%
mutate(repitencia_primaria_benchamrk = mean(repitencia_primaria),
repitencia_secundaria_benchmark = mean(repitencia_secundaria)) %>%
select(periodo_educativo,repitencia_primaria_benchamrk,repitencia_secundaria_benchmark) %>%
distinct(.keep_all = T)
trayectorias %>%
group_by(periodo_educativo) %>%
summarise(repitencia_primaria = mean(repitencia_primaria),
repitencia_secundaria = mean(repitencia_secundaria)) %>%
left_join(benchmarks)
trayectorias %>%
group_by(periodo_educativo) %>%
summarise(repitencia_primaria = mean(repitencia_primaria),
repitencia_secundaria = mean(repitencia_secundaria)) %>%
left_join(benchmarks)
benchmarks <- trayectorias %>%
mutate(repitencia_primaria_benchamrk = mean(repitencia_primaria)) %>%
select(periodo_educativo,repitencia_primaria_benchamrk) %>%
distinct(.keep_all = T)
trayectorias %>%
group_by(periodo_educativo) %>%
summarise(repitencia_primaria = mean(repitencia_primaria),
repitencia_secundaria = mean(repitencia_secundaria)) %>%
left_join(benchmarks)
trayectorias %>%
group_by(periodo_educativo) %>%
summarise(repitencia_primaria = mean(repitencia_primaria)) %>%
left_join(benchmarks)
benchmarks <- trayectorias %>%
mutate(repitencia_primaria_historica = mean(repitencia_primaria)) %>%
select(periodo_educativo,repitencia_primaria_benchamrk) %>%
distinct(.keep_all = T)
benchmarks <- trayectorias %>%
mutate(repitencia_primaria_historica = mean(repitencia_primaria)) %>%
select(periodo_educativo,repitencia_primaria_historica) %>%
distinct(.keep_all = T)
mutate(diferencia_primaria = repitencia_primaria-repitencia_primaria_historica)
trayectorias %>%
group_by(periodo_educativo) %>%
summarise(repitencia_primaria = mean(repitencia_primaria)) %>%
left_join(benchmarks) %>%
mutate(diferencia_primaria = repitencia_primaria-repitencia_primaria_historica)
trayectorias %>%
group_by(periodo_educativo) %>%
summarise(repitencia_primaria = mean(repitencia_primaria)) %>%
left_join(benchmarks) %>%
mutate(diferencia_primaria = repitencia_primaria-repitencia_primaria_historica) %>%
select(-c(repitencia_primaria_historica))
# Calculamos el promedio histórico de repitencia en primaria
repitencia_primaria_historica <- mean(trayectorias$repitencia_primaria, na.rm = TRUE)
# Calculamos el promedio de repitencia por período de gestión
repitencia_por_gestion <- trayectorias %>%
group_by(periodo_educativo) %>%
summarise(repitencia_primaria = mean(repitencia_primaria, na.rm = TRUE)) %>%
mutate(diferencia_primaria = repitencia_primaria - repitencia_primaria_historica)
# Mostramos el resultado
repitencia_por_gestion
repitencia_primaria_historica
# Calculamos el promedio histórico de repitencia en primaria
repitencia_primaria_historica <- mean(trayectorias$repitencia_primaria, na.rm = TRUE)
repitencia_primaria_historica
# Calculamos el promedio de repitencia por período de gestión
repitencia_por_gestion <- trayectorias %>%
group_by(periodo_educativo) %>%
summarise(repitencia_primaria = mean(repitencia_primaria, na.rm = TRUE)) %>%
mutate(diferencia_primaria = repitencia_primaria - repitencia_primaria_historica)
# Mostramos el resultado
repitencia_por_gestion
# Completa el siguiente código:
indicadores_primaria <- c("promocion_efectiva_primaria", "repitencia_primaria", "abandono_interanual_primaria", "sobreedad_primaria")
media_indicadores_primaria <- map(
.x = indicadores_primaria,
.f = function(variable) {
trayectorias %>%
summarize(
media = mean(!!sym(variable), na.rm = TRUE)
) %>%
mutate(indicador = variable)
}
)
# Combina la lista de resultados en un solo data frame:
media_indicadores_primaria_df <- bind_rows(media_indicadores_primaria)
media_indicadores_primaria_df
library(tidyverse)
library(janitor)
library(validate)
library(messy) # Para la función ensuciar
# Función para ensuciar los datos
ensuciar <- function(dataset, umbral) {
dataset %>%
mutate(across(
where(is.numeric),
~ ifelse(rbinom(length(.), 1, 0.05) == 1, . * 10, .))) %>% # Creamos valores erróneos
mutate(id = 1:nrow(dataset)) %>% # ID para identificar mejor duplicados
messy(messiness = umbral) %>% # Ensuciamos valores
#messy_colnames(messiness = umbral) %>% # Ensuciamos nombres de columnas
bind_rows(slice_sample(., prop = 0.1)) # Duplicados
}
url <- "<https://catalogo.datos.gba.gob.ar/dataset/0c691f21-28df-4ea5-98be-6e92b5a589c6/resource/5a73b8ea-24a4-4608-aaeb-39dde782fabf/download/indicadores-proceso-trayectoria-sobreedad-2012_2022.csv>"
trayectorias_original <- read.csv(url)
# Cargar datos
url <- "https://catalogo.datos.gba.gob.ar/dataset/0c691f21-28df-4ea5-98be-6e92b5a589c6/resource/5a73b8ea-24a4-4608-aaeb-39dde782fabf/download/indicadores-proceso-trayectoria-sobreedad-2012_2022.csv"
trayectorias_originales <- read.csv(url)
trayectorias_original <- read.csv(url)
trayectorias_sucias <- ensuciar(trayectorias_original, umbral = 0.03) # Ajusta el umbral de "suciedad"
library(tidyverse)
library(janitor)
library(validate)
library(messy) # Para la función ensuciar
# Función para ensuciar los datos
ensuciar <- function(dataset, umbral) {
dataset %>%
mutate(across(
where(is.numeric),
~ ifelse(rbinom(length(.), 1, 0.05) == 1, . * 10, .))) %>% # Creamos valores erróneos
mutate(id = 1:nrow(dataset)) %>% # ID para identificar mejor duplicados
messy(messiness = umbral) %>% # Ensuciamos valores
#messy_colnames(messiness = umbral) %>% # Ensuciamos nombres de columnas
bind_rows(slice_sample(., prop = 0.1)) # Duplicados
}
# Cargar datos
url <- "https://catalogo.datos.gba.gob.ar/dataset/0c691f21-28df-4ea5-98be-6e92b5a589c6/resource/5a73b8ea-24a4-4608-aaeb-39dde782fabf/download/indicadores-proceso-trayectoria-sobreedad-2012_2022.csv"
trayectorias_original <- read.csv(url)
trayectorias_sucias <- ensuciar(trayectorias_original, umbral = 0.03) # Ajusta el umbral de "suciedad"
View(trayectorias_sucias)
View(trayectorias_sucias)
head(trayectorias_sucias)
glimpse(trayectorias_sucias)
trayectorias_sucias <- ensuciar(trayectorias_original, umbral = 0.03) # Ajusta el umbral de "suciedad"
trayectorias_sucias <- ensuciar(trayectorias_original, umbral = 0.05) # Ajusta el umbral de "suciedad"
head(trayectorias_sucias)
glimpse(trayectorias_sucias)
glimpse(trayectorias_sucias)
# Completa el siguiente código:
trayectorias_limpio_nombres <- clean_names(trayectorias_sucias)
# Imprime los nombres de las columnas del nuevo data frame:
names(trayectorias_limpio_nombres)
# Completa el siguiente código para contar los valores faltantes por columna:
colSums(is.na(trayectorias_limpio_nombres))
# Completa el siguiente código para filtrar filas con NA en 'promocion_efectiva_primaria':
trayectorias_limpio_nombres %>%
filter(is.na(promocion_efectiva_primaria))
# Completa el siguiente código para identificar filas duplicadas usando la columna 'id':
duplicados <- duplicated(trayectorias_limpio_nombres$id)
sum(duplicados) # ¿Cuántos duplicados encontramos?
# Completa el siguiente código para crear un data frame sin duplicados:
trayectorias_sin_duplicados <- trayectorias_limpio_nombres %>%
filter(!duplicated(id))
# Verifica la cantidad de filas en el dataset original y en el dataset sin duplicados:
nrow(trayectorias_limpio_nombres)
nrow(trayectorias_sin_duplicados)
# Completa el siguiente código para identificar filas duplicadas usando la columna 'id':
duplicados <- duplicated(trayectorias_limpio_nombres$id)
sum(duplicados) # ¿Cuántos duplicados encontramos?
# Completa el siguiente código para crear un data frame sin duplicados:
trayectorias_sin_duplicados <- trayectorias_limpio_nombres %>%
filter(!duplicated(id))
# Verifica la cantidad de filas en el dataset original y en el dataset sin duplicados:
nrow(trayectorias_limpio_nombres)
nrow(trayectorias_sin_duplicados)
library(tidyverse)
library(janitor)
library(validate)
library(messy) # Para la función ensuciar
# Función para ensuciar los datos
ensuciar <- function(dataset, umbral) {
dataset %>%
mutate(across(
where(is.numeric),
~ ifelse(rbinom(length(.), 1, 0.05) == 1, . * 10, .))) %>% # Creamos valores erróneos
mutate(id = 1:nrow(dataset)) %>% # ID para identificar mejor duplicados
messy(messiness = umbral) %>% # Ensuciamos valores
#messy_colnames(messiness = umbral) %>% # Ensuciamos nombres de columnas
bind_rows(slice_sample(., prop = 0.1)) # Duplicados
}
# Cargar datos
url <- "https://catalogo.datos.gba.gob.ar/dataset/0c691f21-28df-4ea5-98be-6e92b5a589c6/resource/5a73b8ea-24a4-4608-aaeb-39dde782fabf/download/indicadores-proceso-trayectoria-sobreedad-2012_2022.csv"
trayectorias_original <- read.csv(url)
trayectorias_sucias <- ensuciar(trayectorias_original, umbral = 0.05) # Ajusta el umbral de "suciedad"
head(trayectorias_sucias)
glimpse(trayectorias_sucias)
# Completa el siguiente código:
trayectorias_limpio_nombres <- clean_names(trayectorias_sucias)
# Imprime los nombres de las columnas del nuevo data frame:
names(trayectorias_limpio_nombres)
# Completa el siguiente código para contar los valores faltantes por columna:
colSums(is.na(trayectorias_limpio_nombres))
# Completa el siguiente código para filtrar filas con NA en 'promocion_efectiva_primaria':
trayectorias_limpio_nombres %>%
filter(is.na(promocion_efectiva_primaria))
# Completa el siguiente código para identificar filas duplicadas usando la columna 'id':
duplicados <- duplicated(trayectorias_limpio_nombres$id)
sum(duplicados) # ¿Cuántos duplicados encontramos?
# Completa el siguiente código para crear un data frame sin duplicados:
trayectorias_sin_duplicados <- trayectorias_limpio_nombres %>%
filter(!duplicated(id))
# Verifica la cantidad de filas en el dataset original y en el dataset sin duplicados:
nrow(trayectorias_limpio_nombres)
nrow(trayectorias_sin_duplicados)
# Completa el siguiente código para definir las reglas de validación:
reglas_trayectorias <- validator(
anio_rango = anio %in% factor(2012:2022),
promocion_primaria_rango = promocion_efectiva_primaria >= 0 & promocion_efectiva_primaria <= 100,
repitencia_primaria_rango = repitencia_primaria >= 0 & repitencia_primaria <= 100
)
# Completa el siguiente código para confrontar el dataset con las reglas:
resultado_validacion <- confront(trayectorias_sin_duplicados, reglas_trayectorias)
# Muestra un resumen de los resultados de la validación:
summary(resultado_validacion)
# Muestra un resumen de los resultados de la validación:
plot(resultado_validacion)
