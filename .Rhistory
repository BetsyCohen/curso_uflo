fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Agrego un marcador fijo en las Malvinas
addLabelOnlyMarkers(
lng = -59.5, lat = -51.7, # Aproximadamente el centro de las islas
label = "Malvinas Argentinas",
labelOptions = labelOptions(
noHide = TRUE, # siempre visible
direction = "top",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "14px"
)
)
)
# ---  Cargamos las librerías que vamos a usar ---
library(tidyverse) # que me trae entre ellos ggplot el cual usaremos para mapas estáticos
library(sf) # Para trabajar con datos geoespaciales
library(leaflet) # Para mapas interactivos
# --- Cargamos el GeoJSON de provincias argentinas del IGN ---
# Esta URL puede cambiar, si falla, habrá que buscar una alternativa actualizada.
url_provincias_geojson <- "https://wms.ign.gob.ar/geoserver/ign/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=ign%3Aprovincia&outputFormat=application%2Fjson"
# ---Asignamos el archivo GeoJSON al objeto provincias_sf
provincias_sf <- read_sf(url_provincias_geojson)
url_bibliotecas <- "https://datos.cultura.gob.ar/dataset/37305de4-3cce-4d4b-9d9a-fec3ca61d09f/resource/01c6c048-dbeb-44e0-8efa-6944f73715d7/download/bibliotecas-populares.csv"
bibliotecas <- read.csv(url_bibliotecas)
summary(bibliotecas)
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
)
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Agrego un marcador fijo en las Malvinas
addLabelOnlyMarkers(
lng = -59.5, lat = -51.7, # Aproximadamente el centro de las islas
label = "Malvinas Argentinas",
labelOptions = labelOptions(
noHide = TRUE, # siempre visible
direction = "top",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "14px"
)
)
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Agrego un marcador fijo en las Malvinas
addLabelOnlyMarkers(
lng = -59.5, lat = -51.7, # Aproximadamente el centro de las islas
label = "Malvinas Argentinas",
labelOptions = labelOptions(
noHide = TRUE, # siempre visible
direction = "top",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "14px"
)
)
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
install.packages("htmltools")
install.packages("leaflet")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(tidyverse)
library(htmltools)
library(leaflet)
#| warning: false
#| output-location: slide
#| out.width: "100%"
#| out.height: "500px" # Ajusta la altura del mapa
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Agrego un marcador fijo en las Malvinas
addLabelOnlyMarkers(
lng = -59.5, lat = -51.7, # Aproximadamente el centro de las islas
label = "Malvinas Argentinas",
labelOptions = labelOptions(
noHide = TRUE, # siempre visible
direction = "top",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "14px"
)
)
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addTiles() %>%
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
#| context: setup
#| include: false
# Cargar librerías
library(tidyverse)
library(janitor) # Cargamos el paquete janitor
library(validate)
library(palmerpenguins)
# Ejemplo de un dataset con nombres desordenados
df <- data.frame(
"Código ID" = 1:4,
"Nombre Completo" = c("Ana Pérez", "Juan Gómez", "María López", "Ana Pérez"),
"Ingreso Mensual" = c(30000, 45000,50000,30000)
)
# Limpiar nombres de variables
df <- clean_names(df)
names(df)
# Introducimos algunos valores faltantes
df$ingreso_mensual[2] <- NA
# Contar valores faltantes por variable
colSums(is.na(df))
# Filtrar registros con datos faltantes
df %>% filter(is.na(ingreso_mensual))
#| output-location: column
# Ver valores únicos
distinct(df, nombre_completo)
# Detectar duplicados
df[duplicated(df$nombre_completo), ]
df %>%
janitor::get_dupes()
df %>%
janitor::get_dupes(nombre_completo)
df %>%
duplicated(nombre_completo)
#| output-location: column
# Ver valores únicos
distinct(df, nombre_completo)
df %>%
duplicated(nombre_completo)
#| output-location: column
# Ver valores únicos
distinct(df, nombre_completo)
df %>%
df %>%
taby(nombre_completo,ingreso_mensual)
library(janitor)
df %>%
taby(nombre_completo,ingreso_mensual)
df %>%
tabyl(nombre_completo,ingreso_mensual)
View(df)
View(df)
df %>%
tabyl(nombre_completo,ingreso_mensual)
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
Titanic
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
Titanic
titanic <- as.data.frame(Titanic)
View(titanic)
View(titanic)
titanic %>%
tabyl(Sex,Survived)
titanic %>%
tabyl(Sex,Freq) %>%
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
titanic %>%
tabyl(Sex,Freq)
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
adorn_percentages()
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
adorn_totals() %>%
adorn_percentages()
library(readxl)
indicadores_proceso_trayectoria_sobreedad_2012_2022 <- read_excel("D:/Downloads/indicadores-proceso-trayectoria-sobreedad-2012_2022.xlsx")
View(indicadores_proceso_trayectoria_sobreedad_2012_2022)
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(repitencia_primaria, anio)
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(municipio_id, anio)
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(sobreedad_secundaria, anio) %>%
adorn_totals()
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
adorn_totals()
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(sobreedad_secundaria, anio) %>%
adorn_totals() %>%
adorn_percentages() %>%
adorn_pct_formatting()
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(sobreedad_secundaria, anio) %>%
adorn_totals() %>%
adorn_percentages(row) %>%
adorn_pct_formatting()
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(sobreedad_secundaria, anio) %>%
adorn_totals() %>%
adorn_percentages("row") %>%
adorn_pct_formatting()
View(df)
View(df)
df %>%
get_dupes()
df %>%
get_dupes(nombre_completo)
View(df)
palmerpenguins
palmerpenguins::penguins
pinguinos <- palmerpenguins::penguins
View(pinguinos)
View(pinguinos)
pinguinos %>%
group_by(year) %>%
summarise(especies = n_distinct(species))
pinguinos %>%
group_by(species) %>%
summarise( promedio_flipper = mean(flipper_length_mm,na.rm = T) )
pinguinos %>%
group_by(species) %>%
summarise( promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
group_by(species) %>%
summarise( promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
filter(anio == 2007) %>%
group_by(species) %>%
summarise(
promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
filter(anio == "2007") %>%
group_by(species) %>%
summarise(
promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
filter(year == "2007") %>%
group_by(species) %>%
summarise(
promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
# filter(year == "2007") %>%
# group_by(species) %>%
summarise(
promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
filter(year == "2007") %>%
group_by(species, island) %>%
summarise(
promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
#| code-fold: true
starwars %>%
select(name, gender) %>%
group_by(gender) %>%
summarise(count = n(), .groups = "drop") %>%
ggplot(aes(x = gender, y = count)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Cantidad de personajes por género en peliculas de Starwars",
x = "Género",
y = "Cantidad de personajes"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| context: setup
#| include: false
library(tidyverse)
library(scales)
library(ggplot2)
library(waffle)
library(treemapify)
library(eph)
library(showtext)
font_add_google("Poppins")
font_add_google("Montserrat")
showtext_auto()
theme_uflo <- function() {
titles_font_family <- "Poppins"
base_font_family <- "Montserrat"
theme_minimal() +
theme(
# Leyenda
legend.position = "left",
legend.text = element_text(family = base_font_family),
legend.title = element_text(family = titles_font_family),
# Grid
panel.grid.major = element_line(linewidth = 0.25, color = "#F3F3F3"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
panel.background = element_rect(fill = "transparent", color = "transparent"),
# Ejes
axis.title = element_text(family = titles_font_family),
axis.text = element_text(family = base_font_family),
# Facetas
strip.text = element_text(family = titles_font_family, hjust = 0, color = "white", size = 12),
strip.background = element_rect(fill = "black"),
# Texto
text = element_text(family = base_font_family, size = 15, color = "black"),
# Aspectos principales
plot.title = element_text(family = titles_font_family, size = 30),
plot.subtitle = element_text(family = titles_font_family, color = "#8a8a8a", size = 15),
plot.caption = element_text(family = titles_font_family),
plot.background = element_rect(fill = "transparent", color = "transparent")
)
}
theme_set(theme_uflo())
#| code-fold: true
starwars %>%
select(name, gender) %>%
group_by(gender) %>%
summarise(count = n(), .groups = "drop") %>%
ggplot(aes(x = gender, y = count)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Cantidad de personajes por género en peliculas de Starwars",
x = "Género",
y = "Cantidad de personajes"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| code-fold: true
#| warning: false
lineas <- get_poverty_lines()
lineas %>%
select(-ICE) %>%
pivot_longer(cols = c("CBA", "CBT"), names_to = "canasta", values_to = "valor") %>%
ggplot() +
geom_line(aes(x = periodo, y = valor, col = canasta))+
labs(
title = "Canastas basica alimentaria y canasta total",
subtitle = "Encuesta Permanente de Hogares INDEC",
fill = "Color de ojos"
)
#| context: setup
#| include: false
library(tidyverse)
library(showtext)
font_add_google("Poppins")
font_add_google("Montserrat")
showtext_auto()
theme_uflo <- function() {
titles_font_family <- "Poppins"
base_font_family <- "Montserrat"
theme_minimal() +
theme(
# Leyenda
legend.position = "bottom",
legend.text = element_text(family = base_font_family),
legend.title = element_text(family = titles_font_family),
# Grid
panel.grid.major = element_line(linewidth = 0.25, color = "#F3F3F3"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
panel.background = element_rect(fill = "transparent", color = "transparent"),
# Ejes
axis.title = element_text(family = titles_font_family),
axis.text = element_text(family = base_font_family),
# Facetas
strip.text = element_text(family = titles_font_family, hjust = 0, color = "white", size = 12),
strip.background = element_rect(fill = "black"),
# Texto
text = element_text(family = base_font_family, size = 15, color = "black"),
# Aspectos principales
plot.title = element_text(family = titles_font_family, size = 30),
plot.subtitle = element_text(family = titles_font_family, color = "#8a8a8a", size = 15),
plot.caption = element_text(family = titles_font_family),
plot.background = element_rect(fill = "transparent", color = "transparent")
)
}
## Datasets para otros ejemplos
### Ejemplo gganimate
url_turismo_receptivo<- ("https://datos.yvera.gob.ar/dataset/4cbf7d4a-702a-4911-8c1e-717a45214902/resource/fdfe0ae4-4acc-4421-aa48-6149a02bc615/download/turistas-no-residentes-serie.csv")
df_turismo_receptivo <- read.csv(url_turismo_receptivo)
df_turismo_receptivo <- df_turismo_receptivo %>%
mutate(indice_tiempo_anio = year(as.Date(indice_tiempo)))
turismo_no_residente_por_anio_y_medio_trasporte <- df_turismo_receptivo %>%
group_by(indice_tiempo_anio, medio_de_transporte) %>%
summarise(viajes = sum(viajes_de_turistas_no_residentes, na.rm = TRUE), .groups = 'drop')
### Ejemplo patchwork
df_vuelos_asientos_pasajeros <- read.csv("https://datos.yvera.gob.ar/dataset/c0e7bc3d-553c-405c-8b32-79282b28ffd5/resource/03b4176f-a065-450a-b411-101d2a884720/download/vuelos_asientos_pasajeros.csv")
df_vuelos_asientos_pasajeros <- df_vuelos_asientos_pasajeros %>%
mutate(
indice_tiempo = as.Date(indice_tiempo),
anio = year(indice_tiempo),
mes = month(indice_tiempo, label = TRUE),
dia = day(indice_tiempo)
)
grafico1 <- df_vuelos_asientos_pasajeros %>%
group_by(anio, mes) %>%
summarise(pasajeros = sum(pasajeros, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = mes, y = pasajeros, fill = as.factor(anio))) +
geom_col(position = "dodge") +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "Millones"))+
labs(title = "Pasajeros por mes y año", x = "Mes", y = "Pasajeros", fill = "Año") +
theme_minimal() +
theme(legend.position = "bottom")
grafico2 <- df_vuelos_asientos_pasajeros %>%
group_by(anio, clasificacion_vuelo) %>%
summarise(vuelos = sum(vuelos, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = as.factor(anio), y = vuelos)) +
geom_col(position = "dodge") +
scale_y_continuous(labels = scales::label_number(scale = 1e-5, suffix = "Mil"))+
labs(title = "Vuelos por tipo y año", x = "Año", y = "Vuelos") +
theme_minimal() +
theme(legend.position = "bottom")
grafico3 <- df_vuelos_asientos_pasajeros %>%
ggplot(aes(x = asientos, y = pasajeros, color = as.factor(anio))) +
geom_point(alpha = 0.5, show.legend = FALSE) +
labs(title = "Relación entre asientos y pasajeros", x = "Asientos", y = "Pasajeros", color = "Año") +
theme_minimal()
library(esquisse)
library(tidyverse)
View(df_vuelos_asientos_pasajeros)
View(df_vuelos_asientos_pasajeros)
esquisser(df_vuelos_asientos_pasajeros)
ggplot(df_vuelos_asientos_pasajeros) +
aes(x = indice_tiempo, y = pasajeros) +
geom_line(colour = "#EF562D") +
labs(x = "Indice de tiempo", y = "Pasajeros", title = "Pasajeros por indice de tiempo", subtitle = "lalala") +
theme_minimal()
ggplot(df_vuelos_asientos_pasajeros) +
aes(x = indice_tiempo, y = pasajeros) +
geom_line(colour = "#EF562D") +
labs(x = "Indice de tiempo",
y = "Pasajeros",
title = "Pasajeros por indice de tiempo",
subtitle = "lalala") +
theme_classic()
