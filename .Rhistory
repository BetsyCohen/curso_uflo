labs(title = "PBI per capita según Esperanza de vida y tamaño deblación",
x = "PBI per capita",
y = "Esperanza de vida",
size = "Población",
color = "Continente")+
theme_minimal()
gapminder %>%
mutate(pop = pop/10) %>%
filter(year == 2007) %>%
ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = continent)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 12)) +
labs(title = "PBI per capita según Esperanza de vida y tamaño deblación",
x = "PBI per capita",
y = "Esperanza de vida",
size = "Población",
color = "Continente")+
theme_minimal()
gapminder %>%
mutate(pop = pop/100000) %>%
filter(year == 2007) %>%
ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = continent)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 12)) +
labs(title = "PBI per capita según Esperanza de vida y tamaño deblación",
x = "PBI per capita",
y = "Esperanza de vida",
size = "Población",
color = "Continente")+
theme_minimal()
gapminder %>%
mutate(pop = pop/1000000) %>%
filter(year == 2007) %>%
ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = continent)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 12)) +
labs(title = "PBI per capita según Esperanza de vida y tamaño deblación",
x = "PBI per capita",
y = "Esperanza de vida",
size = "Población",
color = "Continente")+
theme_minimal()
gapminder %>%
mutate(pop = pop/1000000) %>%
filter(year == 2007) %>%
ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = continent)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 12)) +
labs(title = "PBI per capita según Esperanza de vida y tamaño deblación",
x = "PBI per capita",
y = "Esperanza de vida",
size = "Millones de habitantes",
color = "Continente")+
theme_minimal()
#| label: fig-pbilifexp
#| fig-cap: "Esperanza de vida y PBI per capita."
#| warning: false
gapminder %>%
mutate(pop = pop/1000000) %>%
filter(year == 2007) %>%
ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = continent)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 12)) +
labs(title = "PBI per capita según Esperanza de vida y tamaño deblación",
subtitle = "Año 2007",
x = "PBI per capita",
y = "Esperanza de vida",
size = "Millones de habitantes",
color = "Continente")+
theme_minimal()
#| label: fig-pbilifexp
#| fig-cap: "Esperanza de vida y PBI per capita."
#| warning: false
gapminder %>%
mutate(pop = pop/1000000) %>%
filter(year == 2007) %>%
ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = continent)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 12)) +
labs(title = "PBI per capita según Esperanza de vida y tamaño deblación",
subtitle = "Año 2007",
x = "PBI per capita",
y = "Esperanza de vida",
size = "Millones de habitantes",
color = "Continente")+
theme_minimal()
#| echo: true
#| output: column
# Esto es un bloque de código R
library(tidyverse)
library(gapminder)
gapminder %>%
mutate(pop = pop/1000000) %>%
filter(year == 2007) %>%
ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = continent)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 12)) +
labs(title = "PBI per capita según Esperanza de vida y tamaño deblación",
subtitle = "Año 2007",
x = "PBI per capita",
y = "Esperanza de vida",
size = "Millones de habitantes",
color = "Continente")+
theme_minimal()
-   haciendo clic en el botón verde **c+** en la parte superior del quarto document ![](images/boton_chunck.png){width="1100}
# ---  Cargamos las librerías que vamos a usar ---
library(tidyverse)
library(sf) # Para trabajar con datos geoespaciales
library(geoAr)
## Carga poligonos geográficos de provincias argentinas
provincias_sf <- get_geo(geo = "ARGENTINA", level = "provincia")
## Cargar los nombres de las provincias
etiquetas_provincias <- show_arg_codes(nivel = "provincias") %>%
select(codprov_censo , name_iso)
## unir nombres a df de poligonos
provincias_sf <- provincias_sf %>%
left_join(etiquetas_provincias, by = "codprov_censo")
#| output-location: column
ggplot()+
geom_sf(data = provincias_sf)
#| output-location: column
## Decagar los datos
url_bibliotecas <- "https://datos.cultura.gob.ar/dataset/37305de4-3cce-4d4b-9d9a-fec3ca61d09f/resource/01c6c048-dbeb-44e0-8efa-6944f73715d7/download/bibliotecas-populares.csv"
bibliotecas <- read.csv(url_bibliotecas)
summary(bibliotecas)
#| output-location: column
#| code-line-numbers: "5"
ggplot()+
# modifico los colores de relleno para que no sea vea tan pesado respecto de los puntos
geom_sf(data = provincias_sf)+
# agrego un gráfico de puntos usando como data bibliotecas
geom_point(data = bibliotecas, aes(x = longitud, y = latitud), color = "steelblue", alpha = 0.6, size = 1)
#| output-location: column
#| code-line-numbers: "5-14"
ggplot()+
# modifico los colores de las lineas y del relleno para que se vea menos pesado
geom_sf(data = provincias_sf, fill = "grey90", color = "white")+
geom_point(data = bibliotecas, aes(x = longitud, y = latitud), color = "steelblue", alpha = 0.6, size = 1) +
# Títulos y etiquetas
labs(title = "Bibliotecas Populares en Argentina",
subtitle = "Año 2023",
caption = "Fuente: CONABIP. Cartografía: IGN") +
theme_minimal() +
# Elimino ejes y panel de fondo para un mapa más limpio
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank())
# creamos la tabla
biblios_prov <- bibliotecas %>%
group_by(id_provincia) %>%
summarise(suma_biblio_prov = n_distinct(nro_conabip))
head(biblios_prov)
#| code-line-numbers: "2-8"
#| output-location: column
provincias_sf %>%
# convierto el tipo de variable ya que en una es chr y en otra integer
mutate(codprov_censo = as.integer(codprov_censo)) %>%
# unimos la tabla de resumen a la geometrias de provincias
left_join(biblios_prov, by = c("codprov_censo" = "id_provincia")) %>%
ggplot()+
# usamos el valor de resumen como relleno para cada geometria
geom_sf(aes(fill = suma_biblio_prov ))+
labs(title = "Concentración de Bibliotecas Populares por provincia",
subtitle = "Año 2023",
fill = "Cantidad de bibliotecas",
caption = "Fuente: CONABIP. Cartografía: IGN") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank())
#| output-location: slide
# Calcular el centroide de cada provincia ---
provincias_burbujas <- provincias_sf %>%
# convierto el tipo de variable ya que en una es chr y en otra integer
mutate(codprov_censo = as.integer(codprov_censo)) %>%
# unimos la tabla de resumen a la geometrias de provincias
left_join(biblios_prov, by = c("codprov_censo" = "id_provincia")) %>%
# validar la geomtria (hay una que viene trota en el GeoJSON)
st_make_valid() %>%
# calcular el centroide
mutate(centroid = st_centroid(geometry)) %>%
# volver a convertir en sf
st_as_sf()
# Extraer coordenadas de cada centroide para geom_point ----------
provincias_burbujas_coords <- provincias_burbujas %>%
mutate(lon = st_coordinates(centroid)[, 1],
lat = st_coordinates(centroid)[, 2])
# Mapa con burbujas -----
ggplot() +
geom_sf(data = provincias_sf, fill = "gray90", color = "white") +
# agregarmos al geom_point el size en base al recuento de biblios
geom_point(data = provincias_burbujas_coords,
aes(x = lon, y = lat, size = suma_biblio_prov),
color = "steelblue", alpha = 0.7) +
coord_sf(xlim = c(-75, -54), ylim = c(-56, -21)) +
labs(title = "Distribución de Bibliotecas Populares por provincia",
subtitle = "Año 2023",
size = "Cantidad de bibliotecas",
caption = "Fuente: CONABIP. Cartografía: IGN") +
theme_minimal()
#| output-location: slide
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lng = -64, lat = -34, zoom = 3) # Centrar en Argentina
#| warning: false
#| output-location: slide
#| out.width: "100%"
#| out.height: "500px" # Ajusta la altura del mapa
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addPolygons(data = provincias_sf) %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
library(tidyverse)
library(gt)
df_hechos  <- read.csv("https://datos.jus.gob.ar/dataset/27bb9b2c-521b-406c-bdf9-98110ef73f34/resource/583cec9a-3022-4234-8b32-17692a267aac/download/registro-de-femicidios-20200109.csv")
View(df_hechos)
View(df_hechos)
glimpse(df_hechos)
(df_hechos$hecho_fecha)
as.Date(df_hechos$hecho_fecha)
str(as.Date(df_hechos$hecho_fecha))
str(df_hechos$hecho_fecha)
as.Date(df_hechos$hecho_fecha)
year(as.Date(df_hechos$hecho_fecha))
View(df_hechos)
View(df_hechos)
unique(df_hechos$victima_identidad_genero)
df_hechos %>%
mutate(
# Asegurarnos que la fecha sea Date y extraer el año
mutate(anio = year(as.Date(hecho_fecha)),
# Limpiar las etiquetas de identidad_genero y ordenar como factor
victima_identidad_genero = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE")
)
) %>%
select(victima_identidad_genero)
df_hechos %>%
mutate(victima_identidad_genero = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE")
) %>%
select(victima_identidad_genero)
df_hechos %>%
mutate(victima_identidad_genero = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE")
) %>%
select(victima_identidad_genero) %>%
head()
df_hechos %>%
mutate(victima_identidad_genero_2 = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE")
) %>%
select(victima_identidad_genero, victima_identidad_genero_2) %>%
head()
df_hechos %>%
mutate(victima_identidad_genero_2 = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE")
) %>%
select(victima_identidad_genero, victima_identidad_genero_2) %>%
slice_sample(n=15)
df_hechos %>%
mutate(victima_identidad_genero_2 = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE")
) %>%
str()
df_hechos %>%
mutate(victima_identidad_genero_2 = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE")
) %>%
str(victima_identidad_genero_2)
df_hechos %>%
mutate(victima_identidad_genero_2 = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE")
) %>%
select(victima_identidad_genero_2) %>%
str()
select(victima_identidad_genero_2,victima_identidad_genero_factor) %>%
str()
df_hechos %>%
mutate(victima_identidad_genero_2 = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE")
) %>%
mutate(victima_identidad_genero_factor = factor(
victima_identidad_genero_2,
levels = c("M","V","T","SE"),
ordered = T) %>%
))
df_hechos %>%
mutate(victima_identidad_genero_2 = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE")
) %>%
mutate(victima_identidad_genero_factor = factor(
victima_identidad_genero_2,
levels = c("M","V","T","SE"),
ordered = T) )) %>%
df_hechos %>%
mutate(victima_identidad_genero_2 = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE")
) %>%
mutate(victima_identidad_genero_factor = factor(
victima_identidad_genero_2,
levels = c("M","V","T","SE"),
ordered = T)) %>%
select(victima_identidad_genero_2,victima_identidad_genero_factor) %>%
str()
df_hechos %>%
# Asegurarnos que la fecha sea Date y extraer el año
mutate(anio = year(as.Date(hecho_fecha)),
# Limpiar las etiquetas de identidad_genero y ordenar como factor
victima_identidad_genero = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE"),
victima_identidad_genero = factor(
victima_identidad_genero,
levels = c("M","V","T","SE"),
ordered = T)) %>%
# filtrar a anios anteriores a 2013
filter(anio >= 2013)
df_hechos %>%
# Asegurarnos que la fecha sea Date y extraer el año
mutate(anio = year(as.Date(hecho_fecha)),
# Limpiar las etiquetas de identidad_genero y ordenar como factor
victima_identidad_genero = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE"),
victima_identidad_genero = factor(
victima_identidad_genero,
levels = c("M","V","T","SE"),
ordered = T)) %>%
# filtrar a anios anteriores a 2013
filter(anio >= 2013) %>%
# calcular casos totales y porcentajes
group_by(anio,victima_identidad_genero) %>%
summarise(casos = n_distinct(caso_numero))
df_hechos %>%
# Asegurarnos que la fecha sea Date y extraer el año
mutate(anio = year(as.Date(hecho_fecha)),
# Limpiar las etiquetas de identidad_genero y ordenar como factor
victima_identidad_genero = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE"),
victima_identidad_genero = factor(
victima_identidad_genero,
levels = c("M","V","T","SE"),
ordered = T)) %>%
# filtrar a anios anteriores a 2013
filter(anio >= 2013) %>%
# calcular casos totales y porcentajes
group_by(anio,victima_identidad_genero) %>%
summarise(casos = n_distinct(caso_numero)) %>%
mutate(casos_prop = casos/sum(casos))
df_hechos %>%
# Asegurarnos que la fecha sea Date y extraer el año
mutate(anio = year(as.Date(hecho_fecha)),
# Limpiar las etiquetas de identidad_genero y ordenar como factor
victima_identidad_genero = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE"),
victima_identidad_genero = factor(
victima_identidad_genero,
levels = c("M","V","T","SE"),
ordered = T)) %>%
# filtrar a anios anteriores a 2013
filter(anio >= 2013) %>%
# calcular casos totales y porcentajes
group_by(anio,victima_identidad_genero) %>%
summarise(casos = n_distinct(caso_numero)) %>%
mutate(casos_prop = casos/sum(casos)) %>%
# pivotear a lo ancho
pivot_wider(names_from = victima_identidad_genero,
values_from = c(casos,casos_prop))
df_hechos %>%
# Asegurarnos que la fecha sea Date y extraer el año
mutate(anio = year(as.Date(hecho_fecha)),
# Limpiar las etiquetas de identidad_genero y ordenar como factor
victima_identidad_genero = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE"),
victima_identidad_genero = factor(
victima_identidad_genero,
levels = c("M","V","T","SE"),
ordered = T)) %>%
# filtrar a anios anteriores a 2013
filter(anio >= 2013) %>%
# calcular casos totales y porcentajes
group_by(anio,victima_identidad_genero) %>%
summarise(casos = n_distinct(caso_numero)) %>%
mutate(casos_prop = casos/sum(casos)) %>%
# pivotear a lo ancho
pivot_wider(names_from = victima_identidad_genero,
values_from = c(casos,casos_prop)) %>%
# sumar n totales por anio y eliminar n individuales
mutate(casos_total = rowsum(casos_M,casos_V,casos_T,casos_T,casos_T)) %>%
select(-c (casos_M, casos_V, casos_T, casos_T, casos_T,casos_SE)) %>%
# colocar n base total al principio
relocate(casos_total,.after = anio) %>%
ungroup()
library(janitor)
df_hechos_filrtado <- df_hechos %>%
# Asegurarnos que la fecha sea Date y extraer el año
mutate(anio = year(as.Date(hecho_fecha)),
# Limpiar las etiquetas de identidad_genero y ordenar como factor
victima_identidad_genero = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE"),
victima_identidad_genero = factor(
victima_identidad_genero,
levels = c("M","V","T","SE"),
ordered = T)) %>%
# filtrar a anios anteriores a 2013
filter(anio >= 2013)
View(df_hechos_filrtado)
View(df_hechos_filrtado)
df_hechos_filrtado %>%
tabyl(anio,victima_identidad_genero)
df_hechos_filrtado %>%
tabyl(anio,victima_identidad_genero) %>%
adorn_percentages('col')
df_hechos_filrtado %>%
tabyl(anio,victima_identidad_genero) %>%
adorn_percentages('col') %>%
adorn_pct_formatting()
df_hechos_filrtado %>%
tabyl(anio,victima_identidad_genero) %>%
adorn_percentages('col') %>%
adorn_pct_formatting() %>%
gt()
### Carga de librerías
library(tidyverse)
library(gt)
library(janitor)
## carga de la base
df_hechos  <- read.csv("https://datos.jus.gob.ar/dataset/27bb9b2c-521b-406c-bdf9-98110ef73f34/resource/583cec9a-3022-4234-8b32-17692a267aac/download/registro-de-femicidios-20200109.csv")
## exploración de la base
glimpse(df_hechos)
df_hechos_filrtado <- df_hechos %>%
# Asegurarnos que la fecha sea Date y extraer el año
mutate(anio = year(as.Date(hecho_fecha)),
# Limpiar las etiquetas de identidad_genero y ordenar como factor
victima_identidad_genero = case_when(
victima_identidad_genero == "MUJER" ~"M",
victima_identidad_genero == "HOMBRE" ~"V",
victima_identidad_genero == "TRANSGENERO" ~"T",
victima_identidad_genero == "" ~ "SE"),
victima_identidad_genero = factor(
victima_identidad_genero,
levels = c("M","V","T","SE"),
ordered = T)) %>%
# filtrar a anios anteriores a 2013
filter(anio >= 2013)
df_hechos_filrtado %>%
tabyl(anio,victima_identidad_genero) %>%
adorn_percentages('col') %>%
adorn_pct_formatting()
