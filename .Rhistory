library(sf)
summary(provincias)
i
library(tidyverse)
library(sf) # Para trabajar con datos geoespaciales
library(leaflet) # Para mapas interactivos
# --- Cargar el GeoJSON de provincias argentinas ---
# Fuente: Repositorio público en GitHub (ejemplo)
# Esta URL puede cambiar, si falla, habrá que buscar una alternativa actualizada.
url_provincias_geojson <- "https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/argentina-provinces.geojson"
# Leemos el archivo GeoJSON
provincias_sf <- read_sf(url_provincias_geojson)
# --- Cargar el GeoJSON de provincias argentinas ---
# Fuente: Repositorio público en GitHub (ejemplo)
# Esta URL puede cambiar, si falla, habrá que buscar una alternativa actualizada.
url_provincias_geojson <- "https://wms.ign.gob.ar/geoserver/ign/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=ign%3Aprovincia&outputFormat=application%2Fjson"
# Leemos el archivo GeoJSON
provincias_sf <- read_sf(url_provincias_geojson)
# Vistazo a los datos de la geometría (polígonos)
glimpse(provincias_sf)
# Vistazo a los datos de la geometría (polígonos)
glimpse(provincias_sf)
geom_sf(data = provincias_sf)
geom_sf(data = provincias_sf,fill = "grey90", color = "white")
ggplot()+
geom_sf(data = provincias_sf)
ggplot()+
geom_sf(data = provincias_sf)+
coord_sf(xlim = c(-75, -53), ylim = c(-56, -21), expand = FALSE)
View(provincias_sf)
provincias_sf %>%
filter(!nam %in% c("Tierra del Fuego, Antártida e Islas del Atlántico Sur")) %>%
ggplot()+
geom_sf()+
coord_sf(expand = FALSE)
provincias_sf %>%
filter(!nam %in% c("Tierra del Fuego, Antártida e Islas del Atlántico Sur")) %>%
ggplot()+
geom_sf()+
coord_sf(expand = TRUE)
provincias_sf %>%
ggplot()+
geom_sf()+
coord_sf(xlim = c(-75, -53), ylim = c(-56, -21), expand = FALSE)
provincias_sf %>%
ggplot()+
geom_sf()+
coord_sf(xlim = c(-75, -53), ylim = c(-56, -21), expand = TRUE)
provincias_sf %>%
ggplot()+
geom_sf()+
coord_sf(xlim = c(-75, -53), ylim = c(-56, -21), expand = TRUE)
#| warning: false
#| output-location: slide
#| out.width: "100%"
#| out.height: "500px" # Ajusta la altura del mapa
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Agrego un marcador fijo en las Malvinas
addLabelOnlyMarkers(
lng = -59.5, lat = -51.7, # Aproximadamente el centro de las islas
label = "Malvinas Argentinas",
labelOptions = labelOptions(
noHide = TRUE, # siempre visible
direction = "top",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "14px"
)
)
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
# ---  Cargamos las librerías que vamos a usar ---
library(tidyverse) # que me trae entre ellos ggplot el cual usaremos para mapas estáticos
library(sf) # Para trabajar con datos geoespaciales
library(leaflet) # Para mapas interactivos
# --- Cargamos el GeoJSON de provincias argentinas del IGN ---
# Esta URL puede cambiar, si falla, habrá que buscar una alternativa actualizada.
url_provincias_geojson <- "https://wms.ign.gob.ar/geoserver/ign/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=ign%3Aprovincia&outputFormat=application%2Fjson"
# ---Asignamos el archivo GeoJSON al objeto provincias_sf
provincias_sf <- read_sf(url_provincias_geojson)
library(leaflet)
library(tidyverse)
#| warning: false
#| output-location: slide
#| out.width: "100%"
#| out.height: "500px" # Ajusta la altura del mapa
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Agrego un marcador fijo en las Malvinas
addLabelOnlyMarkers(
lng = -59.5, lat = -51.7, # Aproximadamente el centro de las islas
label = "Malvinas Argentinas",
labelOptions = labelOptions(
noHide = TRUE, # siempre visible
direction = "top",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "14px"
)
)
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
url_bibliotecas <- "https://datos.cultura.gob.ar/dataset/37305de4-3cce-4d4b-9d9a-fec3ca61d09f/resource/01c6c048-dbeb-44e0-8efa-6944f73715d7/download/bibliotecas-populares.csv"
bibliotecas <- read.csv(url_bibliotecas)
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Agrego un marcador fijo en las Malvinas
addLabelOnlyMarkers(
lng = -59.5, lat = -51.7, # Aproximadamente el centro de las islas
label = "Malvinas Argentinas",
labelOptions = labelOptions(
noHide = TRUE, # siempre visible
direction = "top",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "14px"
)
)
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
)
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Agrego un marcador fijo en las Malvinas
addLabelOnlyMarkers(
lng = -59.5, lat = -51.7, # Aproximadamente el centro de las islas
label = "Malvinas Argentinas",
labelOptions = labelOptions(
noHide = TRUE, # siempre visible
direction = "top",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "14px"
)
)
)
# ---  Cargamos las librerías que vamos a usar ---
library(tidyverse) # que me trae entre ellos ggplot el cual usaremos para mapas estáticos
library(sf) # Para trabajar con datos geoespaciales
library(leaflet) # Para mapas interactivos
# --- Cargamos el GeoJSON de provincias argentinas del IGN ---
# Esta URL puede cambiar, si falla, habrá que buscar una alternativa actualizada.
url_provincias_geojson <- "https://wms.ign.gob.ar/geoserver/ign/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=ign%3Aprovincia&outputFormat=application%2Fjson"
# ---Asignamos el archivo GeoJSON al objeto provincias_sf
provincias_sf <- read_sf(url_provincias_geojson)
url_bibliotecas <- "https://datos.cultura.gob.ar/dataset/37305de4-3cce-4d4b-9d9a-fec3ca61d09f/resource/01c6c048-dbeb-44e0-8efa-6944f73715d7/download/bibliotecas-populares.csv"
bibliotecas <- read.csv(url_bibliotecas)
summary(bibliotecas)
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
)
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Agrego un marcador fijo en las Malvinas
addLabelOnlyMarkers(
lng = -59.5, lat = -51.7, # Aproximadamente el centro de las islas
label = "Malvinas Argentinas",
labelOptions = labelOptions(
noHide = TRUE, # siempre visible
direction = "top",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "14px"
)
)
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Agrego un marcador fijo en las Malvinas
addLabelOnlyMarkers(
lng = -59.5, lat = -51.7, # Aproximadamente el centro de las islas
label = "Malvinas Argentinas",
labelOptions = labelOptions(
noHide = TRUE, # siempre visible
direction = "top",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "14px"
)
)
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
install.packages("htmltools")
install.packages("leaflet")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(tidyverse)
library(htmltools)
library(leaflet)
#| warning: false
#| output-location: slide
#| out.width: "100%"
#| out.height: "500px" # Ajusta la altura del mapa
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addTiles() %>% # Añade un mapa base (OpenStreetMap por defecto)
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Agrego un marcador fijo en las Malvinas
addLabelOnlyMarkers(
lng = -59.5, lat = -51.7, # Aproximadamente el centro de las islas
label = "Malvinas Argentinas",
labelOptions = labelOptions(
noHide = TRUE, # siempre visible
direction = "top",
textOnly = TRUE,
style = list(
"color" = "black",
"font-weight" = "bold",
"font-size" = "14px"
)
)
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
# Crear mapa leaflet
leaflet(data = bibliotecas) %>%
addTiles() %>%
addCircleMarkers( # Añade marcadores circulares para cada biblioteca
lng = ~longitud, # Mapea longitud a la coordenada x
lat = ~latitud,  # Mapea latitud a la coordenada y
radius = 2, # Tamaño pequeño del círculo
stroke = FALSE, # Sin borde
fillOpacity = 0.8, # Opacidad del relleno
color = "steelblue", # Color de los puntos
popup = ~paste("<b>", nombre, "</b><br>", domicilio, "<br>", localidad, ", ", provincia) # Información al hacer clic
) %>%
# Opcional: Ajustar la vista inicial
setView(lng = -64, lat = -34, zoom = 4) # Centrar en Argentina
#| context: setup
#| include: false
# Cargar librerías
library(tidyverse)
library(janitor) # Cargamos el paquete janitor
library(validate)
library(palmerpenguins)
# Ejemplo de un dataset con nombres desordenados
df <- data.frame(
"Código ID" = 1:4,
"Nombre Completo" = c("Ana Pérez", "Juan Gómez", "María López", "Ana Pérez"),
"Ingreso Mensual" = c(30000, 45000,50000,30000)
)
# Limpiar nombres de variables
df <- clean_names(df)
names(df)
# Introducimos algunos valores faltantes
df$ingreso_mensual[2] <- NA
# Contar valores faltantes por variable
colSums(is.na(df))
# Filtrar registros con datos faltantes
df %>% filter(is.na(ingreso_mensual))
#| output-location: column
# Ver valores únicos
distinct(df, nombre_completo)
# Detectar duplicados
df[duplicated(df$nombre_completo), ]
df %>%
janitor::get_dupes()
df %>%
janitor::get_dupes(nombre_completo)
df %>%
duplicated(nombre_completo)
#| output-location: column
# Ver valores únicos
distinct(df, nombre_completo)
df %>%
duplicated(nombre_completo)
#| output-location: column
# Ver valores únicos
distinct(df, nombre_completo)
df %>%
df %>%
taby(nombre_completo,ingreso_mensual)
library(janitor)
df %>%
taby(nombre_completo,ingreso_mensual)
df %>%
tabyl(nombre_completo,ingreso_mensual)
View(df)
View(df)
df %>%
tabyl(nombre_completo,ingreso_mensual)
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
Titanic
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
Titanic
titanic <- as.data.frame(Titanic)
View(titanic)
View(titanic)
titanic %>%
tabyl(Sex,Survived)
titanic %>%
tabyl(Sex,Freq) %>%
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
titanic %>%
tabyl(Sex,Freq)
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
adorn_percentages()
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
adorn_totals() %>%
adorn_percentages()
library(readxl)
indicadores_proceso_trayectoria_sobreedad_2012_2022 <- read_excel("D:/Downloads/indicadores-proceso-trayectoria-sobreedad-2012_2022.xlsx")
View(indicadores_proceso_trayectoria_sobreedad_2012_2022)
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(repitencia_primaria, anio)
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(municipio_id, anio)
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(sobreedad_secundaria, anio) %>%
adorn_totals()
df %>%
tabyl(nombre_completo,ingreso_mensual) %>%
adorn_totals()
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(sobreedad_secundaria, anio) %>%
adorn_totals() %>%
adorn_percentages() %>%
adorn_pct_formatting()
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(sobreedad_secundaria, anio) %>%
adorn_totals() %>%
adorn_percentages(row) %>%
adorn_pct_formatting()
indicadores_proceso_trayectoria_sobreedad_2012_2022 %>%
tabyl(sobreedad_secundaria, anio) %>%
adorn_totals() %>%
adorn_percentages("row") %>%
adorn_pct_formatting()
View(df)
View(df)
df %>%
get_dupes()
df %>%
get_dupes(nombre_completo)
View(df)
palmerpenguins
palmerpenguins::penguins
pinguinos <- palmerpenguins::penguins
View(pinguinos)
View(pinguinos)
pinguinos %>%
group_by(year) %>%
summarise(especies = n_distinct(species))
pinguinos %>%
group_by(species) %>%
summarise( promedio_flipper = mean(flipper_length_mm,na.rm = T) )
pinguinos %>%
group_by(species) %>%
summarise( promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
group_by(species) %>%
summarise( promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
filter(anio == 2007) %>%
group_by(species) %>%
summarise(
promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
filter(anio == "2007") %>%
group_by(species) %>%
summarise(
promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
filter(year == "2007") %>%
group_by(species) %>%
summarise(
promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
# filter(year == "2007") %>%
# group_by(species) %>%
summarise(
promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
pinguinos %>%
filter(year == "2007") %>%
group_by(species, island) %>%
summarise(
promedio_flipper = mean(flipper_length_mm,na.rm = T),
masa_corporal_promedio = mean(body_mass_g, na.rm = T))
