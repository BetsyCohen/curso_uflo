---
title: "Comunicar con Quarto"
subtitle: "An√°lisis de Datos 1 - Unidad 4"
author: "Betsy Cohen"
logo: "images/logo-uflo.png"
format:
  revealjs:
    width: 1600
    height: 900
    theme: slides.scss
    highlight-style: a11y
    transition: fade
    slide-number: true
execute:
  echo: true
df-print: kable
---

## Quarto para todxs

-   Es un sistema de publicaci√≥n cient√≠fica y t√©cnica de c√≥digo abierto. Pensado para crear documentos din√°micos, presentaciones, libros y sitios web a partir de un simple archivo de texto plano.

-   Unifica y facilita el proceso de creaci√≥n y colaboraci√≥n entre varios lenguajes (Python, Observable, Julia, R...) y nos permite crear m√∫ltiples productos en m√∫ltiples formatos (HTML, pdf, Word, ppt)

![Imagen de "Hello, Quarto" keynote de Julia Lowndes y Mine √áetinkaya-Rundel, RStudio::Conf(2022).](images/horst_qmd_render_schema.png){fig-align="left"}

## ¬øQu√© podemos hacer con Quarto?

::: incremental
-   Art√≠culos acad√©micos (PDF) / Reportes HTML

-   Presentaciones (como la que estas viendo o en PDF)

-   Dashbords (est√°ticos o sobre shiny)

-   Sitios web/ blog

-   Libros

-   Documentos interactivos (Jupyter/Shiny)
:::

## Por qu√© Quarto

-   **Reproducibilidad**: Tu an√°lisis, el c√≥digo y los resultados (tablas, gr√°ficos) viven juntos en un solo lugar. ¬°Adi√≥s a copiar y pegar!

-   **Flexibilidad de Formatos**: Con un mismo archivo fuente (.qmd), podes generar much√≠simos tipos de salida: HTML, PDF, Word, ¬°y m√°s!

-   **Profesionalismo**: Crea entregables con una apariencia pulida y profesional sin mucho esfuerzo.

-   **Flujo de trabajo simple**: Escribis tu contenido en Markdown, integras tus bloques de c√≥digo y ¬°renderizas!

::: callout-note
### ¬øQuarto vs. R Markdown?

Quarto es el sucesor de R Markdown. Si ya conoc√≠as R Markdown, Quarto te resultar√° muy familiar, pero ofrece m√°s funciones, flexibilidad y soporte para otros lenguajes m√°s all√° de R.
:::

## Instalar Quarto {.smaller}

Para instalar Quasrto simplemente vamos a ir a https://quarto.org/docs/get-started y vamos a descargar la versi√≥n correspondiente a nuestrp sistema operativo

![](images/instalar-quarto.png)

::: callout-tip
Si bien nosotros vamos a usarlo desde RStudio est√° bueno que sepas que podemos usar Quarto desde otras plataformas como **VS Code**, **Jupyter**.
:::

## Anatom√≠a de un Archivo Quarto (`.qmd`) {.smaller}

Un archivo Quarto (`.qmd`) tiene una estructura clara que lo hace f√°cil de entender:

::: columns
::: column
![](images/informe_gapmider_demo_1.png){width="1196"}
:::

::: column
![](images/informe_gapmider_demo_1_render.png)
:::
:::

## 1.El Encabezado YAML (`---`)

Es la secci√≥n de configuraci√≥n al inicio del archivo.

ü•™ Se define entre tres guiones (`---`) al principio y al final como un sanwich

üéØ Ac√° le decimos a Quarto:

-   Los metadatos de nuestro archivo (t√≠tulo, subtitulo, autor, fecha)

-   El / los formatos: html, pdf, wordetc. y caracter√≠sticas espec√≠ficas de comportamiento de ese formato

-   Par√°metros de automatizaci√≥n

```{r}
#| echo: true
#| eval: false
---
title: "Informe Gapmider demo"
author: "Betsy Cohen"
date: "01-06-2025"
format: html # Opciones como html, pdf, revealjs, etc.
---
```

## 1.El Encabezado YAML: opciones

Dentro del YAML vamos a tener diferentes opciones. por ej

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "6-9"
---
title: "Informe Gapmider demo"
author: "Betsy Cohen"
date: "01-06-2025"
format: 
  html:
    toc: true # hacer una tabla de contenidos
    toc-location: left # poner la tabla de contenidos a la izq
    number-sections: true # numerar las secciones
    code-fold: true # desplegar el c√≥digo
    embed-resources: true # un html auto contenido (evitar dependencias).
---
```

## Controlando los themes. {.smaller}

Dentro de las opciones de YAML podemos elegir diferentes themes. Quarto incluye 25 themes diferentres que vienen del proyecto [Bootswatch](https://bootswatch.com/)

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "10"
---
title: "Informe Gapmider demo"
author: "Betsy Cohen"
date: "01-06-2025"
format: 
  html:
    toc: true # hacer una tabla de contenidos
    toc-location: left # poner la tabla de contenidos a la izq
    number-sections: true # numerar las secciones
    code-fold: true # desplegar el c√≥digo
    embed-resources: true # un html auto contenido (evitar dependencias).
    theme: minty # nos permite controlar el estilo
---
```

::: callout-tip
### Tu propio estilo

Tambi√©n podes crear tus propios themes con los colores de tu organizaci√≥n o empresa. Para ello podes usar el paquete `brand.yml` que se integra al conjunto de los archivos que crees con Quarto. M√°s info en: https://posit-dev.github.io/brand-yml/
:::

## 2.Texto en Markdown {.smaller}

Ac√° es donde escribis tu contenido de texto. Markdown es un lenguaje de marcado simple que te permite formatear texto f√°cilmente:

-   T√≠tulos: `# T√≠tulo 1`, `## T√≠tulo 2`, `### T√≠tulo 3`, etc.
-   Negritas: `**texto en negrita**`
-   It√°licas: `*texto en it√°lica*`
-   Listas: `- Item 1` `- Item 2`
-   Enlaces `[Un link](www.ellink.com.ar)`
-   Im√°genes `![](ruta_ o enlace de la _de_la_imagen-png)`

![](images/texto_markdown.png){width="1100"}

## 3.Bloques de C√≥digo (Code Chunks)

-   El chunck donde vamos a poner el c√≥digo de R (o Python, etc.). Abajo de eso vamos a ir viendo el resultado de esa ejecuci√≥n.

-   Los definimos con los backticks y el nombre de del lenguaje entre llaves.

-   Shortcuts:

    -   **ctrl+alt+i**

    -   haciendo clic en el bot√≥n ![](images/boton_chunck.png){width="30" height="23"} en la parte superior del Quarto document

## 3.Bloques de C√≥digo (Code Chunks) {.smaller}

Por ejemplo esto es un ejemplo de chuck

```{r}
#| echo: true
#| output-location: column

# Esto es un bloque de c√≥digo R

library(tidyverse)
library(gapminder)

gapminder %>% 
  mutate(pop = pop/1000000) %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = continent)) +
  geom_point(alpha = 0.7) +
  scale_size(range = c(2, 12)) +
  labs(title = "PBI per capita seg√∫n Esperanza de vida y tama√±o deblaci√≥n",
       subtitle = "A√±o 2007",
       x = "PBI per capita",
       y = "Esperanza de vida",
       size = "Millones de habitantes",
       color = "Continente")+
  theme_minimal()

```

## Las opciones de los Chunks (#\|)

En la parte superior de los chuncks podemos controlar el comportamiento de cada bloque de c√≥digo con opciones espec√≠ficas. Para usarlas vamos a usar el signo `#|`:

::: incremental
-   **#\| echo: false** Oculta el c√≥digo del output final, mostrando solo los resultados.
-   **#\| eval: false** No ejecuta el c√≥digo, solo lo muestra.
-   **#\| warning: false** No incluir las advertencias en la salida
-   **#\| include: false** para incluir o no la salida
-   **#\| output-location: slide**: √ötil en presentaciones para que el output aparezca en una nueva diapositiva.
-   **#\| fig-width: y #\|fig-height**: Controla el tama√±o de los gr√°ficos.
:::

## 4. Renderizar el Documento

Una vez que tenes tu archivo `.qmd` listo, el √∫ltimo paso es renderizarlo para generar el formato de salida deseado.

Poedes hacerlo de cuatro maneras:

::: incremental
-   ![](images/rstudio-render-button.png){width="69" height="53"} **Desde bot√≥n Render**: Usa el bot√≥n **"Render"** en la barra de herramientas.

-   ‚úÖ Chequeadno la casilla **"Render on Save"** y que cada vez que guardamos con cntrl+s renderiza los cambios.

-   **Desde la Terminal**: Ejecutando el comando `quarto render nombre_de_tu_archivo.qmd.`

-   **Con la funci√≥n quarto::quarto_render()** en la consola o en el script `quarto::quarto_render(   input = "ruta/nombre_de_tu_archivo.qmd")`
:::

## Un archivo muchas salidas posibles

Con un mismo archivo `.qmd`, puedes generar una variedad de formatos simplemente haciendo el cambio en el YAML por ej. ac√° sacando el reporte tanto en html como en pdf lo cual nos va a dar la posibilidad de renderizar diferentes formatos

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "10"

---
title: "Informe Gapmider demo"
author: "Betsy Cohen"
date: "01-06-2025"
format: 
  html:
    toc: true # hacer una tabla de contenidos
    toc-location: left # poner la tabla de contenidos a la izq
    code-fold: true
  pdf: default
---

```
:::

::: {.column width="50%"}
![](images/render_button_multiple_formats.png){fig-align="left" width="284"}
:::
:::

## Controlando la Salida

Podes controlar c√≥mo se ven y se comportan los elementos en tu documento final seteando dentro del YAML:

-   **df-print:** Define c√≥mo se muestran los data.frames en el output (ej. kable para tablas m√°s bonitas).

-   **execute:** Controla el comportamiento general de la ejecuci√≥n del c√≥digo en todo el documento.

## A Practicar!

-   Paso 1: Documento HTML B√°sico: Crear un reporte HTML simple que combine texto, c√≥digo R y sus resultados.

-   Paso 2: Tomando el mismo documento cambia el par√°metro html por revealjs en tu archivo y prob√° qu√© pasa

## Automatizando nuestros reportes con par√°metros

Imaginate que necesitas generar un reporte de bibliotecas para cada provincia de Argentina, o un resumen de ping√ºinos para cada especie. ¬°Hacerlo "a mano" ser√≠a un embole!

Los reportes parametrizados en Quarto resuelven esto.

## Automatizando nuestros reportes con par√°metros

Los par√°metros son variables (dentro de un objeto especial que llamamos params)

El params lo definimos dentro del encabezado **YAML** de nuestro documento y despu√©s lo podemos ir usando a lo largo de nuestro c√≥digo para que vayan automatizandose cada uno de los gr√°ficos, t√≠tulos o elementos que necesitemos ir ajustando.

Quarto permite cambiar el valor de estos par√°metros f√°cilmente para generar diferentes versiones del reporte y multiplicarlo como panes.

![](images/esquema_parametros_2.png)

## Qu√© tipo de variables podemos parametrizar

::: incremental
-   Strings
-   N√∫meros
-   Valores dicot√≥micos (TRUE FALSE)
:::

## Parametrizando paso a paso (Modo manual)

Siguiendo el ejemplo de las regiones...

::: incremental
1.  Escribimos un reporte en Quarto usando como ejemplo una de las regiones (por ej. AMBA) lo renderizamos para ver si no gusta como qued√≥.
2.  En el YAML le indicamos un valor de default en `parms`
3.  Reemplazamos el valor con la variable `params`a lo largo de nuestro reporte usando find y replace (cnrl+F)
4.  Rendereamos cada uno de los reportes
:::

## Seteo el parametro en el YAML

Siguiendo con nuestro ejemplo de YAML que vimos al comienzo con la base Gapminder

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "12-13"
---
title: "Informe Gapmider demo"
author: "Betsy Cohen"
date: "01-06-2025"
format: 
  html:
    toc: true 
    toc-location: left 
    number-sections: true 
    code-fold: true 
    embed-resources: true 
params:
  continent: "Asia" # Valor predeterminado
---
```

## Acceder al par√°metro

Los par√°metros son una lista

```{r}
#| echo: true
#| eval: false

str(params)
```

`List of 1   $ continent: chr "Asia"`

De igual manera que cualquier otro objeto de tipo lista accedemos a cada elemento con el signo `$`

```{r}
#| echo: true
#| eval: false

params$continent

```

`[1] "Asia"`

Si lo quiero agregar como texto a lo largo de mi reporte voy encerrar al parametro en una expresi√≥n de tipo `r`.

```{r}
#| echo: true
#| eval: false

# En el siguiente gr√°fico podemos observar los resultados para los pa√≠ses de **`r params$continent`**
```

En el siguiente gr√°fico podemos observar los resultados para los pa√≠ses de **Asia**

## Uso el par√°metro a lo largo de mi documento

```{r}
#| echo: true
#| eval: false

# Filtrar el dataset de Gapminder usando el Continente
gapminder %>% 
  filter(continent == params$continent)
  mutate(pop = pop/1000000) %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = gdpPercap, y= lifeExp, size = pop, color = country)) +
  geom_point(alpha = 0.7) +
  scale_size(range = c(2, 12)) +
  labs(title = paste("PBI per capita seg√∫n Esperanza de vida y tama√±o de poblaci√≥n en", params$continent),
       subtitle = "A√±o 2007",
       x = "PBI per capita",
       y = "Esperanza de vida",
       size = "Millones de habitantes",
       color = "Pa√≠s")+
  theme_minimal()

```

## M√°s sobre automatizaci√≥n

Si te interesa aprender m√°s sobre automatizaci√≥n y parametrizaci√≥n podes consultar

-   Ryan, Jadey. 2024. "Parameterized Reports with Quarto: R-Ladies Abuja Workshop." 21 de Febrero 21 2024. https://jadeyryan.com/talks/2024-02-21_rladies-abuja-quarto-params.
-   Documentaci√≥n de Quarto [Parameters](https://quarto.org/docs/computations/parameters.html)

## Ahora a practicar!

[![Artwork by \@allison_horst](images/monsters_allison_horst.png){fig-alt="Three monsters in witch hats (covered in hex stickers for different R packages) work together to brew up a data science report on the banks of a wild river. They are surrounded by equipment for water quality measurements (like a Secchi disk, field journal, sampling bottles, and YSI). The background is a distant snow-covered mountain and pine trees. In the river alongside the witches are a curious turtle, mayflies, a jumping fish, and a dragonfly. Made with Angie Reed and Alena Reynolds for their 2024 Posit Conference Talk."}](https://twitter.com/allison_horst)
