---
title: "Gram√°tica de gr√°ficos con `ggplot`"
subtitle: "An√°lisis de Datos 1 - Unidad 4"
author: "Betsy Cohen"
logo: "images/logo-uflo.png"
format:
  revealjs:
    width: 1600
    height: 900
    theme: slides.scss
    highlight-style: a11y
    transition: fade
    slide-number: true
execute:
  echo: true
df-print: kable
---

```{r}
#| context: setup
#| include: false

library(tidyverse)

library(showtext)

font_add_google("Poppins")
font_add_google("Montserrat")

showtext_auto()

theme_uflo <- function() {
  titles_font_family <- "Poppins"
  base_font_family <- "Montserrat"

  theme_minimal() +
    theme(
      # Leyenda
      legend.position = "bottom",
      legend.text = element_text(family = base_font_family),
      legend.title = element_text(family = titles_font_family),

      # Grid
      panel.grid.major = element_line(linewidth = 0.25, color = "#F3F3F3"),
      panel.grid.major.x = element_blank(),
      panel.grid.minor = element_blank(),
      panel.spacing = unit(0.75, "lines"),
      panel.background = element_rect(fill = "transparent", color = "transparent"),

      # Ejes
      axis.title = element_text(family = titles_font_family),
      axis.text = element_text(family = base_font_family),

      # Facetas
      strip.text = element_text(family = titles_font_family, hjust = 0, color = "white", size = 12),
      strip.background = element_rect(fill = "black"),

      # Texto
      text = element_text(family = base_font_family, size = 15, color = "black"),

      # Aspectos principales
      plot.title = element_text(family = titles_font_family, size = 30),
      plot.subtitle = element_text(family = titles_font_family, color = "#8a8a8a", size = 15),
      plot.caption = element_text(family = titles_font_family),
      plot.background = element_rect(fill = "transparent", color = "transparent")
    )
}


## Datasets para otros ejemplos

### Ejemplo gganimate

url_turismo_receptivo<- ("https://datos.yvera.gob.ar/dataset/4cbf7d4a-702a-4911-8c1e-717a45214902/resource/fdfe0ae4-4acc-4421-aa48-6149a02bc615/download/turistas-no-residentes-serie.csv")

df_turismo_receptivo <- read.csv(url_turismo_receptivo) 

df_turismo_receptivo <- df_turismo_receptivo %>% 
  mutate(indice_tiempo_anio = year(as.Date(indice_tiempo)))

turismo_no_residente_por_anio_y_medio_trasporte <- df_turismo_receptivo %>%
  group_by(indice_tiempo_anio, medio_de_transporte) %>%
  summarise(viajes = sum(viajes_de_turistas_no_residentes, na.rm = TRUE), .groups = 'drop')


### Ejemplo patchwork

df_vuelos_asientos_pasajeros <- read.csv("https://datos.yvera.gob.ar/dataset/c0e7bc3d-553c-405c-8b32-79282b28ffd5/resource/03b4176f-a065-450a-b411-101d2a884720/download/vuelos_asientos_pasajeros.csv")

df_vuelos_asientos_pasajeros <- df_vuelos_asientos_pasajeros %>% 
  mutate(
    indice_tiempo = as.Date(indice_tiempo),
    anio = year(indice_tiempo),
    mes = month(indice_tiempo, label = TRUE),
    dia = day(indice_tiempo)
  )

grafico1 <- df_vuelos_asientos_pasajeros %>%
  group_by(anio, mes) %>%
  summarise(pasajeros = sum(pasajeros, na.rm = TRUE)) %>%
  ggplot(aes(x = mes, y = pasajeros, fill = as.factor(anio))) +
  geom_col(position = "dodge") +
  labs(title = "Pasajeros por mes y a√±o", x = "Mes", y = "Pasajeros", fill = "A√±o") +
  theme_minimal() +
  theme(legend.position = "bottom")

grafico2 <- df_vuelos_asientos_pasajeros %>%
  group_by(anio, clasificacion_vuelo) %>%
  summarise(vuelos = sum(vuelos, na.rm = TRUE)) %>%
  ggplot(aes(x = as.factor(anio), y = vuelos, fill = as.factor(anio))) +  
  geom_col(position = "dodge") +
  labs(title = "Vuelos por tipo y a√±o", x = "A√±o", y = "Vuelos", fill = "A√±o") +
  theme_minimal() +
  theme(legend.position = "bottom")

grafico3 <- df_vuelos_asientos_pasajeros %>%
  ggplot(aes(x = asientos, y = pasajeros, color = as.factor(anio))) +  
  geom_point(alpha = 0.5, show.legend = FALSE) + 
  labs(title = "Relaci√≥n entre asientos y pasajeros", x = "Asientos", y = "Pasajeros", color = "A√±o") +
  theme_minimal()

```

## Qu√© es ggplot2

`ggplot2` es una de las librer√≠as que forman parte de `tidyverse` que nos permite crear gr√°ficos, siguiendo una gram√°tica o l√≥gica por capas que se van sumando de manera incremental.

![](https://ggplot2.tidyverse.org/articles/ggplot2_files/figure-html/overview_graphic-1.png){fig-align="center"}

## Preparando los datos de hoy üßë‚Äçüç≥ {.smaller}

::: columns
::: {.column width="30%"}
Vamos a trabajar con un dataset sencillo que contiene informaci√≥n de establecimientos de alojamiento tur√≠stico por provincia elaborado por el [Sistema de Informaci√≥n Turistica de la Argentina (SINTA)](https://datos.yvera.gob.ar/).

Al dataset le agrego la variable `region` y `recibio_subsidio` (una variable ficticia) solo a los fines de entender algunos conceptos de visualizaci√≥n.
:::

::: {.column width="70%"}
```{r}
#| warning: false

# importar los datos
url_datos <- "https://datos.yvera.gob.ar/dataset/c9dc110e-2a09-4b51-ac0a-a2db2ca76fbb/resource/67727a58-7a43-450d-a685-a9fba9218b20/download/puna_indicadores_provincias.csv"

# asignar al dataframe df
df <- read.csv(url_datos, encoding = "latin1") 

# Definir vectores de las regiones y sus provincias
NOA <- c("Catamarca", "Jujuy", "La Rioja", "Salta", "Santiago del Estero", "Tucum√°n")
NEA <- c("Chaco", "Corrientes", "Formosa", "Misiones")
Centro_Cuyo <- c("C√≥rdoba", "La Pampa", "Mendoza", "San Juan", "San Luis", "Santa Fe", "Entre R√≠os")
Buenos_Aires <- c("Buenos Aires", "Ciudad Aut√≥noma de Buenos Aires")
Sur <- c("Chubut", "Neuqu√©n", "R√≠o Negro", "Santa Cruz", "Tierra del Fuego")

# creamos algunas variables para poder jugar en los gr√°ficos 
df <- df %>%
  # sacar a√±os locos
  filter(indice_tiempo < 2024) %>%
  #
  mutate(
  # establecimiento como numerica
    establecimientos = as.integer(establecimientos),
  # region para cada provincia
    region = case_when(
      provincia_nombre %in% NOA ~ "NOA",
      provincia_nombre %in% NEA ~ "NEA",
      provincia_nombre %in% Centro_Cuyo ~ "Centro Cuyo",
      provincia_nombre %in% Buenos_Aires ~ "Buenos Aires",
      provincia_nombre %in% Sur ~ "Sur",
      TRUE ~ "Otra"
    ),
  # una variable al azar de asignacion de subsidio
    recibio_subsidio = sample(c("Si", "No"), size = n(), replace = TRUE)
  )
```
:::
:::

## Nuestro dataset de hoy üßë‚Äçüç≥ {.smaller}

```{r}
df %>%
  mutate(across(where(is.character), as.factor)) %>% 
  summary()
```

## Capa de data y el mapping üó∫Ô∏è {.smaller}

El primer paso para crear un gr√°fico con `ggplot2` es llamar a la funci√≥n `ggplot()`. Esta funci√≥n crea el lienzo en blanco sobre el cual vamos a dibujar. Necesitamos decirle a `ggplot()` qu√© datos vamos a usar.

Lo primero que le indicamos a ggplot es cual es la tabla de donde estamos sacando los datos.

```{r}
#| output: false

ggplot(data = df)
```

Si ejecutas este c√≥digo, ¬°no vas a ver nada! Esto es porque solo hemos creado el lienzo, pero a√∫n no le hemos dicho qu√© queremos dibujar sobre √©l.

Para indicarle **qu√©** y **d√≥nde** poner los datos tenemos la capa de **mapping** o el `aes` (que viene de aesthetics). En este caso vamos a pedirle a ggplot que coloque en el eje x la cantidad de establecimientos y en el eje y cada una de las provincias.

```{r}
ggplot(data = df, aes(x= region , y = establecimientos))
```

## ggplot es parte de tidyverse {.smaller}

::: columns
::: {.column width="70%"}
Como ggplot es parte de tidyverse el argumento que vimos arriba podemos escribirlo encadenado dentro de una secuencia de pipes. Esto no es muy √∫til ya que si necesitamos hacer una transformaci√≥n espec√≠fica la podemos encadenar en esta secuencia donde ggplot es un paso m√°s. Por ej. si queremos filtrar los datos solo para 2020 Por eso escribimos algo asi:

```{r}
#| output: false

df %>% 
  # hago las trasformaciones que necesito
  filter(indice_tiempo == 2020) %>% 
  #no necesito definir el par√°metro data porque los datos ya estan dentro de la cadena
  ggplot(aes(x= region , y = establecimientos)) 

```
:::

::: {.column width="30%"}
![](https://www.business-science.io/assets/2020-10-15-must-know-tidyverse-features/tidyverse-icons.png)
:::
:::

## Layers o el gr√°fico en cuesti√≥n üìä

El n√∫cleo de cualquier gr√°fico son las capas . Estas toman los datos mapeados y los muestran de forma comprensible para los humanos como una representaci√≥n de los datos. Cada capa consta de tres partes importantes:

-   ‚è∫Ô∏è La **geometr√≠a** que determina c√≥mo se muestran los datos, como puntos, l√≠neas o rect√°ngulos.

-   üßÆ La **transformaci√≥n estad√≠stica** que puede calcular nuevas variables a partir de los datos y afectar qu√© datos se muestran.

-   üìç El ajuste de **posici√≥n** que determina principalmente **d√≥nde** se muestra una pieza de datos.

## Layers: `geom_*`o geometria üìä {.smaller}

Con las funciones `geom_*` y `stat_*` vamos a ir modelando estos aspectos. Y vamos a ir uniendo cada una de las capas con el s√≠mbolo **+**

Volviendo a nuestro ejemplo vamos a una geometr√≠a de gr√°fico de barras `geom_col()` y voy a usar el par√°metro stat = "identity".

```{r}
#| warning: false
#| output-location: column
df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region, y= establecimientos)) +
  geom_col()
  
```

## Otras geometrias posibles {.smaller}

Obviamente las barras no son la √∫nica geometr√≠a posibles. Podes consultar todas las geometr√≠as posibles en la [documentaci√≥n sobre capas de ggplot](https://ggplot2.tidyverse.org/reference/index.html#layers). A grandes razgos podr√≠amos decir que:

-   ![](https://ggplot2.tidyverse.org/reference/icons/geom_density.png) usamos `geom_density()` `stat_density()` para los gr√°ficos de **densidad**

-   ![](https://ggplot2.tidyverse.org/reference/icons/geom_boxplot.png) usamos `geom_boxplot()` `stat_boxplot()` para los gr√°ficos de cajas o **boxplot**

-   ![](https://ggplot2.tidyverse.org/reference/icons/geom_bar.png) `geom_bar()` `geom_col()` `stat_count()` son para las **columnas** y **barras**

-   ![](https://ggplot2.tidyverse.org/reference/icons/geom_point.png) `geom_point()` para los gr√°ficos de **dispersi√≥n** de puntos

## Layers: para que sirve `_stats` {.smaller}

Cada geom\_\*() viene con una funci√≥n estad√≠stica por defecto o `_stat`. Esa funci√≥n procesa tus datos antes de graficarlos.

"stat". Es como decirle a ggplot2: "¬øQuer√©s que te d√© los datos ya cocinados, o prefer√≠s cocinar vos?"

### Un ejemplo de stat y graficos de barra

En ggplot Hay dos tipos de gr√°ficos de barras: `geom_bar()`y `geom_col()`.

::: columns
::: {.column width="50%"}
-   geom_bar() ‚Üí usa stat = "count" (por defecto)
-   Cuenta la cantidad de casos de cada categor√≠a.
-   No necesit√°s columna y, la calcula autom√°ticamente.

```{r}
#| output: false
starwars %>% 
  ggplot(aes(x = gender)) +
  # cuenta cu√°ntos varones y mujeres hay y ya.
  geom_bar()  

```
:::

::: {.column width="50%"}
-   geom_col() ‚Üí usa stat = "identity" (por defecto)
-   Significa: "ya tengo la variable Y calculada, usala tal como est√°".
-   Ac√° s√≠ necesit√°s pasar y = en el aes().

```{r}
#| output: false
starwars %>% 
  group_by(gender) %>% 
  summarise(average_height = round(mean(height,na.rm = T))) %>% 
  # tengo dos variables claras
  ggplot(aes(x = gender, y= average_height )) +
  # detecta la columna average_height como la que tiene el c√°lculo
  geom_col()   
```

Si quisieras usar geom_bar() con datos ya agregados, ah√≠ s√≠ tendr√≠as que forzar stat = "identity"

```{r}
#| include: false
#| warning: false
#| output: false

starwars %>% 
  group_by(gender) %>% 
  summarise(average_height = round(mean(height,na.rm = T))) %>% 
  ggplot(aes(x = gender, y= average_height )) +
  # lo fuerzo a detectar el valor numerico y que lo tome "como est√°"
  geom_bar(stat = "identity")  
```
:::
:::

## Layers: Parametros de posisci√≥n {.smaller}

Dentro de la capa layer tro par√°metro importante es la **posici√≥n** que ocupa una variable. El comportamiento de `position` va a cambiar seg√∫n el tipo de gr√°fico o (para ponerlo en palabras de ggplot), la geometr√≠a, en el caso del gr√°fico de barras podemos mencionar las posiciones:

::: columns
::: {.column width="50%"}
**dodge o agrupada**

```{r}
#| warning: false


df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "dodge")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)
```
:::

::: {.column width="50%"}
**stack o apilada**

```{r}
#| warning: false

df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "stack")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)
```
:::
:::

## Scales ‚öñÔ∏è {.smaller}

Las "scales" (escalas) controlan c√≥mo se interpretan y muestran los valores de nuestros datos en los ejes y otras est√©ticas (como el color o el tama√±o).

```{r}
#| warning: false
#| output-location: column
df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "stack")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)
```

::: callout-note
::: {callout-tip}
Dependiendo del tipo de escala vamos a usar diferentes tipos de funciones. Revisa la documentaci√≥n de ggplot para conocer que tipo `scale_y_binned()`, `scale_y_date()`, `scale_y_discrete()`
:::
:::

## Scales en funci√≥n de otra variable üå°Ô∏è {.smaller}

Podr√≠amos seguir trabajando sobre la capa de escalas pero esta vez manipulando su color y usarlo como un term√≥metro. Para eso vamos a tener que hacer dos cosas:

-   Decirle a ggplot qu√© variable queremos que use de relleno para el color (uno de los datos dentro del aes)

-   Agregar la capa en cuesti√≥n indicando el tipo de estilo que queremos

```{r}
#| warning: false
#| output-location: column

df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region , y = establecimientos, fill = plazas)) +
  geom_col()+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5) +
  # Capa escala: rellena con gradientes continuos.
  scale_fill_continuous(type = "gradient") 

```

## Scales para cambiar colores de manera manual Ô∏è {.smaller}

A veces tambi√©n usamos en la capa de scales cammbiamos los colores de manera manual con `scale_fill_manual()`

```{r}
#| warning: false
#| output-location: column
df %>% 
  ggplot(aes(x= region , y = establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "stack")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5) +
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))
```

## Facetado ‚ûó

Facets es una capa que nos permite "cortar en rodajas" la informaci√≥n y contar la historia a traves de ese criterio y podemos ver qu√© paso en cada grupo.

Dependiendo de la situacion podemos usar:

-   `facet_wrap()`: Crea una grilla de gr√°ficos **en una sola dimensi√≥n** (usualmente se enrolla en filas o columnas) y ideal para **una sola variable de faceteo o agrupamiento**.

-   `facet_grid()`: Crea una grilla de gr√°ficos **bidimensional** (filas y columnas), ideal para **dos variables de faceteo** (una para filas y otra para columnas).

## Facetado ‚ûó {.smaller}

En este ejemplo agregamos una capa de facetado sobre la base completa (df) y facetamos segun el a√±o

```{r}
#| warning: false
#| output-location: column


df %>% 
  ggplot(aes(x= region , y = establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "stack")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5) +
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))+
  facet_wrap(~ indice_tiempo)
```

## Capa de coordenadas {.smaller}

Si nos imaginamos el gr√°fico como un mapa podr√≠amos decir que la capa de coordenadas es como el la direccion en que sostenemos ese mapa para interpretarlo.

Si bien se suelen utilizar coordenadas cartesianas, el sistema de coordenadas impulsa la visualizaci√≥n de proyecciones¬†[cartogr√°ficas](https://ggplot2-book.org/maps.html) (cuando graficamos mapas)¬†y gr√°ficos¬†[polares](https://ggplot2-book.org/coord.html#polar-coordinates-with-coord_polar).

Si bien no es la capa que m√°s vamos a usar al principio es probable que la funci√≥n coord_flip te sea de utilidad para voltear los ejes de tu gr√°fico.

```{r}
#| warning: false
#| output-location: column

df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "stack")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)+
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))+
  coord_flip() 
```

## Theme: enchulando el gr√°fico üé® {.smaller}

`ggplot2` nos ofrece varios temas predeterminados para enchular nuestros gr√°ficos como `theme_grey() theme_gray() theme_bw() theme_linedraw() theme_light() theme_dark() theme_minimal() theme_classic()`

```{r}
#| warning: false
#| output-location: column

df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "stack")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)+
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))+
  coord_flip() +
  ## elijo el theme light
  theme_minimal()
```

## Theme: enchulando el gr√°fico üé® {.smaller}

::: columns
::: {.column width="50%"}
### Antes

```{r}
#| warning: false
#| echo: false

df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "stack")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)+
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))+
  coord_flip() 
```
:::

::: {.column width="50%"}
### Despu√©s

```{r}
#| warning: false
#| echo: false

df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "stack")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)+
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))+
  coord_flip() +
  ## elijo el theme light
  theme_minimal()
```
:::
:::

## Theme: enchulando el gr√°fico üé® {.smaller}

Si quiero cambiar algo espec√≠fico (un elemento) del theme simplemente vuelvo a abrir theme y modifico el elemento espec√≠fico.

```{r}
#| warning: false
#| output-location: column

df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "stack")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)+
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))+
  coord_flip() +
  theme_minimal()+
  # agrego m√°s capas al theme
  theme(
    # cambio el angulo del texto en eje x
    axis.text.x = element_text(angle = 45, hjust = 1), 
  )

```

## Themes personalizados {.smaller}

Obviamente tambi√©n podemos personalizar y crear nuestros propios themes como por ej ac√° lucimos un theme que preparamos previamente para la ocasi√≥n: el theme_uflo

```{r}
#| warning: false
#| output-location: column

df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "stack")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)+
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))+
  coord_flip() +
  ## elijo el theme light
  theme_uflo()
```

::: callout-tip
### Algunas extensiones de themes que podes usar son:

-   [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) tiene temas muy populares que por ej. imitan temas clasicos de graficos de Excel, Google docs, FiveThirtyEigh entre otros

-   [ggdark](https://github.com/nsgrantham/ggdark/tree/master): temas en modo escuro de los temas predeterminados de ggplot2.

-   [ggtech](https://exts.ggplot2.tidyverse.org/ggtech.html): proporciona temas inspirados por compa√±√≠as tecnol√≥gicas, como Airbnb, Google, Twitter o Facebook.
:::

## Anotaciones üóíÔ∏è {.smaller}

Si bien no se la menciona como capa en general las **anotaciones** son muy importantes cuando realizamos un gr√°fico. Dentro de las anotaciones tenemos varias funciones:

-   `labs():`Para etiquetar elementos del gr√°fico como `title`, `subtitle`, `caption x`, `y` (de los ejes) `fill`, `color`, `size`, `shape`, etc. (etiquetas especificas de leyendas)

-   `anotate()` Permite **agregar texto, l√≠neas, puntos, rect√°ngulos, etc.** en posiciones espec√≠ficas del gr√°fico.

-   `geom_text()` y `geom_label()`Tambi√©n agregan texto al gr√°fico, pero **basado en los datos**. A diferencia de `annotate()`, estas geom√©tricas se usan como capas regulares.

-   `geom_curve()` y `geom_segment()`Sirven para **dibujar flechas, l√≠neas o curvas** que apunten a algo importante.

## Anotaciones üóíÔ∏è {.smaller}

```{r}
#| warning: false
#| output-location: column

df %>% 
  filter(indice_tiempo == 2020) %>% 
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  geom_col(position = "stack")+
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)+
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))+
  coord_flip() +
  theme_uflo()+ 
  labs(x= "", y= "Cantidad de establecimientos",
       title = "Percepcion de subsidios al turismo por region",
       subtitle = "A√±o 2020",
       caption = "Fuente: Sistema de Informaci√≥n Turistica de la Argentina", 
       fill = "¬øRecibio subsidio?")


```

## Resumiendo... {.bigtext}

ggplot es como una cebolla...

.... tiene capas ![](https://www.ecartelera.com/images/noticias/75400/75480-h3.jpg)

## De datos... {auto-animate="true"}

```{r}
#| warning: false
#| output-location: column

df %>% 
  # Transformo mis datos 
  filter(indice_tiempo == 2020) %>% 
  # Capa de mapeo
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  # Capa de geometria
  geom_col(position = "stack")
```

## ...escalas {auto-animate="true"}

```{r}
#| warning: false
#| output-location: column

df %>% 
  # Transformo mis datos 
  filter(indice_tiempo == 2020) %>% 
  # Capa de mapeo
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  # Capa de geometria
  geom_col(position = "stack")+
  # Capas de escalas
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)+
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))

```

## ...coordenadas ... {auto-animate="true"}

```{r}
#| warning: false
#| output-location: column


df %>% 
  # Transformo mis datos 
  filter(indice_tiempo == 2020) %>% 
  # Capa de mapeo
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  # Capa de geometria
  geom_col(position = "stack")+
  # Capas de escalas
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)+
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))+
  # Capas de coordenadas
  coord_flip() 
```

## ... y hermoseo. {auto-animate="true"}

```{r}
#| warning: false
#| output-location: column


df %>% 
  # Transformo mis datos 
  filter(indice_tiempo == 2020) %>% 
  # Capa de mapeo
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  # Capa de geometria
  geom_col(position = "stack")+
  # Capas de escalas
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)+
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))+
  # Capas de coordenadas
  coord_flip() +
  # Capas de tema
  theme_uflo()+ 
  labs(x= "", y= "Cantidad de establecimientos",
       title = "Percepcion de subsidios al turismo por region",
       subtitle = "A√±o 2020",
       caption = "Fuente: Sistema de Informaci√≥n Turistica de la Argentina", 
       fill = "¬øRecibio subsidio?")

```

## ü™Ñ Tuki

```{r}
#| warning: false
#| output-location: column
#| echo: false


df %>% 
  # Transformo mis datos 
  filter(indice_tiempo == 2020) %>% 
  # Capa de mapeo
  ggplot(aes(x= region, y= establecimientos, fill = recibio_subsidio)) +
  # Capa de geometria
  geom_col(position = "stack")+
  # Capas de escalas
  scale_y_continuous(
    limits = c(0,10000),
    n.breaks = 5)+
  scale_fill_manual(values= c("#cf4c4c","#7cccaf"))+
  # Capas de coordenadas
  coord_flip() +
  # Capas de tema
  theme_uflo()+ 
  labs(x= "", y= "Cantidad de establecimientos",
       title = "Percepcion de subsidios al turismo por region",
       subtitle = "A√±o 2020",
       caption = "Fuente: Sistema de Informaci√≥n Turistica de la Argentina", 
       fill = "¬øRecibio subsidio?")

```

## Y ahora lo que todos esper√°bamos ...

::: {.r-fit-text}
Extensiones!!!!
:::

## gganimate {.smaller}

```{r}

library(gganimate)

turismo_no_residente_por_anio_y_medio_trasporte %>%
  ggplot(aes(x = medio_de_transporte, y = viajes, fill = medio_de_transporte)) +
  geom_col(show.legend = FALSE) +
  labs(title = "Viajes en a√±o: {as.integer(frame_time)}",
       x = "Medio de transporte",
       y = "Cantidad de viajes",
       caption = "Fuente: Sistema de Informaci√≥n Turistica de la Argentina") +
  transition_time(indice_tiempo_anio) +
  theme_minimal()

```

## patchwork {.smaller}

```{r}
library(patchwork)

grafico3 + grafico2 + grafico1 + 
  guide_area() +
  plot_layout(guides = "collect") 


```

## esquisse {.smaller}

```{r}
#| output: false

# library(esquisse)
# esquisser(df_vuelos_asientos_pasajeros)
```

![](images/esquisse.gif)

## Otros recursos...

-   [The RGraph Gallery](https://r-graph-gallery.com/) Una guia por todos los tipos de gr√°ficos y como hacerlo

-   [ggtheme asistance](https://github.com/calligross/ggthemeassist?tab=readme-ov-file) parecido a esquisse pero mucho mas completo respecto del theme

-   [ggplot2](https://ggplot2.tidyverse.org/index.html) documentaci√≥n oficial incluyendo la preciadas Cheatsheet
