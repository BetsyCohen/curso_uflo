---
title: "Gram√°tica de tablas con `gt`"
subtitle: "An√°lisis de Datos 1 - Unidad 4"
author: "Betsy Cohen"
logo: "images/logo-uflo.png"
format:
  revealjs:
    width: 1600
    height: 900
    theme: slides.scss
    highlight-style: a11y
    transition: fade
    slide-number: true
execute:
  echo: true
df-print: kable
---

```{r}
#| context: setup
#| include: false

#| context: setup
#| include: false

library(tidyverse)
library(gt) # El paquete para tablas bonitas
library(lubridate) # Para trabajar con fechas

```

## Visualizar informaci√≥n en tablas

Ya sabemos limpiar, transformar, explorar y visualizar datos con `ggplot2`. Pero a veces, necesitamos presentar datos de forma tabular (en tablas), ¬°y queremos que se vean profesionales y legibles!

Aqu√≠ es donde entra el paquete **`gt` (grammar of tables)**. As√≠ como `ggplot2` te da una "gram√°tica" para construir gr√°ficos capa a capa, `gt` te ofrece una forma similar de construir y embellecer tablas.

Vamos a usar un dataset sobre femicidios y homicidios agravados por el g√©nero para aprender a usar `gt`.

::: callout-warning
### Advertencia

Este dataset contiene informaci√≥n sobre un tema sensible y violento. Trabajaremos con √©l de manera respetuosa, enfoc√°ndonos en la estructura y presentaci√≥n de los datos sin ahondar en detalles expl√≠citos de los hechos.
:::

## Nuestro Dataset: Femicidios y Homicidios Agravados por G√©nero {.smaller}

La Unidad de Registro, Sistematizaci√≥n y Seguimiento de Femicidios y Homicidios agravados por el g√©nero (URSSF) recopilaba y sistematizaba informaci√≥n sobre el fen√≥meno a lo largo de todo el pa√≠s. Para ello toma como fuente principal el an√°lisis diario de medios de prensa y difusi√≥n nacionales y provinciales. El cuerpo de informaci√≥n se contrastaba peri√≥dicamente con otras bases de datos con el objetivo de detectar errores y obst√°culos para mejorar y fortalecer la metodolog√≠a empleada; dicho cotejo deriva, por un lado, en la inclusi√≥n de casos que por diferentes motivos no hab√≠an sido considerados, y por otro, en la revisi√≥n de otros que s√≠ fueron incluidos en la base de datos pero que necesitan ser objeto de un nuevo an√°lisis.

La base que vamos a analizar registra los femicidios y homicidios agravados por el g√©nero desde el a√±o 2012. El registro dej√≥ de funcionar en el √°mbito del Ministerio de Justicia y el a√±o 2019 qued√≥ incompleto.

```{r}
#| output-location: side

df_hechos  <- read.csv("https://datos.jus.gob.ar/dataset/27bb9b2c-521b-406c-bdf9-98110ef73f34/resource/583cec9a-3022-4234-8b32-17692a267aac/download/registro-de-femicidios-20200109.csv")

glimpse(df_hechos)
```

## Preparando los Datos para la Tabla con dplyr üßë‚Äçüç≥ {.smaller}

Antes de crear la tabla con gt, necesitamos preparar los datos en un formato que sea √∫til para resumir. Vamos a contar cu√°ntos casos hay por a√±o y por identidad de g√©nero de la v√≠ctima.

```{r}
#| warning: false
#| output-location: column

df_resumen <- df_hechos %>%
  # Asegurarnos que la fecha sea Date y extraer el a√±o
  mutate(anio = year(as.Date(hecho_fecha)),
  # Limpiar las etiquetas de identidad_genero y ordenar como factor
         victima_identidad_genero = case_when(
           victima_identidad_genero == "MUJER" ~"M",
           victima_identidad_genero == "HOMBRE" ~"V",
           victima_identidad_genero == "TRANSGENERO" ~"T",
           victima_identidad_genero == "" ~ "SE"),
  victima_identidad_genero = factor(
    victima_identidad_genero,
    levels = c("M","V","T","SE"),
    ordered = T)) %>%
  # filtrar a anios anteriores a 2013
  filter(anio >= 2013) %>% 
  # calcular casos totales y porcentajes
  group_by(anio,victima_identidad_genero) %>% 
  summarise(casos = n_distinct(caso_numero)) %>%
  mutate(casos_prop = casos/sum(casos)) %>% 
  # pivotear a lo ancho
  pivot_wider(names_from = victima_identidad_genero,
              values_from = c(casos,casos_prop)) %>% 
  # sumar n totales por anio y eliminar n individuales
  mutate(casos_total = rowsum(casos_M,casos_V,casos_T,casos_T,casos_T)) %>% 
  select(-c (casos_M, casos_V, casos_T, casos_T, casos_T,casos_SE)) %>% 
  # colocar n base total al principio
  relocate(casos_total,.after = anio) %>% 
  ungroup()

df_resumen

```

## La Base de Toda Tabla: gt()

El primer paso para crear una tabla con gt es llamar a la funci√≥n `gt()`. Similar a ggplot(), solo necesita que le pases el data frame que queres formatear.

```{r}

df_resumen %>% 
  gt()

```

## A√±adiendo Elementos a la Tabla con gt

Ahora, vamos a ir a√±adiendo capas de informaci√≥n y formato a nuestra tabla gt usando funciones que se encadenan con el operador %\>%, similar a como lo hacemos con ggplot2 y dplyr

## T√≠tulo, Subt√≠tulo y Fuente (tab_header, tab_source_note) {.smaller auto-animate="true"}

```{r}
#| code-line-numbers: "4-6"
#| output-location: column

df_resumen %>%
  gt() %>%
  # A√±adimos t√≠tulo y subt√≠tulo
  tab_header(
    title = "Cantidad de Casos Registrados por A√±o e Identidad de G√©nero de la V√≠ctima",
    subtitle = "Registro de Femicidios y Homicidios Agravados por G√©nero (2012-2020)") 

```

## Etiquetas de Columnas (cols_label) {.smaller auto-animate="true"}

Los nombres de las columnas de nuestro data frame a veces no son ideales para mostrar en una tabla final. Podemos cambiarlos f√°cilmente con cols_label().

```{r}
#| code-line-numbers: "7-13"
#| output-location: column

df_resumen %>%
  gt() %>%
  tab_header(
    title = "Cantidad de Casos Registrados por A√±o e Identidad de G√©nero de la V√≠ctima",
    subtitle = "Registro de Femicidios y Homicidios Agravados por G√©nero (2013-2019)" ) %>%
  # Cambiamos las etiquetas de las columnas
  cols_label( 
    anio = "A√±o",
    casos_total = "N total casos",          
    casos_prop_M = "Mujeres",
    casos_prop_V = "Varones",
    casos_prop_T = "Transgenero",
    casos_prop_SE = "Sin identificar") 

```

## Formateando N√∫meros (fmt_number) {.smaller auto-animate="true"}

La cantidad de casos son porcentajes por lo que para facilitar sui lectura vamos a asegurarnos que se muestren correctamente.

Como todas mis columnas que quiero transformar comienzan con "casos_prop\_" voy a usar el helper `starts_with()`

```{r}
#| code-line-numbers: "14-16"
#| output-location: column

df_resumen %>%
  gt() %>%
  tab_header(
    title = "Cantidad de Casos Registrados por A√±o e Identidad de G√©nero de la V√≠ctima",
    subtitle = "Registro de Femicidios y Homicidios Agravados por G√©nero (2013-2019)" ) %>%
  # Cambiamos las etiquetas de las columnas
  cols_label( 
    anio = "A√±o",
    casos_total = "N total casos",          
    casos_prop_M = "Mujeres",
    casos_prop_V = "Varones",
    casos_prop_T = "Transgenero",
    casos_prop_SE = "Sin identificar") %>% 
  fmt_percent(
    columns = starts_with("casos_prop_"),
    decimals = 1)

```

## A√±adiendo Notas al Pie (tab_footnote) {.smaller auto-animate="true"}

Cuando construimos un reporte, es importante siempre hacer referencia a la fuente de nuestros datos, as√≠ como notas al pie respecto de decisiones que tomamos a la hora de hacer nuestro an√°lisis.

Podemos a√±adir notas al pie para aclarar informaci√≥n espec√≠fica en la tabla, como la limitaci√≥n en los datos de un a√±o particular.

```{r}
#| code-line-numbers: "17,18"
#| output-location: column

df_resumen %>%
  gt() %>%
  tab_header(
    title = "Cantidad de Casos Registrados por A√±o e Identidad de G√©nero de la V√≠ctima",
    subtitle = "Registro de Femicidios y Homicidios Agravados por G√©nero (2013-2019)" ) %>%
  # Cambiamos las etiquetas de las columnas
  cols_label( 
    anio = "A√±o",
    casos_total = "N total casos",          
    casos_prop_M = "Mujeres",
    casos_prop_V = "Varones",
    casos_prop_T = "Transgenero",
    casos_prop_SE = "Sin identificar") %>% 
  fmt_percent(
    columns = starts_with("casos_prop_"),
    decimals = 1) %>% 
  tab_footnote("No incluye a√±os anteriores a 2013. La serie se suspende en 2019.") %>% 
  tab_source_note("Fuente: Ministerio de Justicia. Unidad de Registro, Sistematizaci√≥n y Seguimiento de femicidios y de homicidios agravados por el g√©nero.")


```

## Estilo y Opciones (tab_style, opt\_\*) {.smaller auto-animate="true"}

gt ofrece muchas opciones para modificar el estilo visual de la tabla (fuentes, colores, bordes, etc.) y otras opciones de presentaci√≥n.

```{r}
#| code-line-numbers: "19-26"
#| output-location: column

df_resumen %>%
  gt() %>%
  tab_header(
    title = "Cantidad de Casos Registrados por A√±o e Identidad de G√©nero de la V√≠ctima",
    subtitle = "Registro de Femicidios y Homicidios Agravados por G√©nero (2013-2019)" ) %>%
  # Cambiamos las etiquetas de las columnas
  cols_label( 
    anio = "A√±o",
    casos_total = "N total casos",          
    casos_prop_M = "Mujeres",
    casos_prop_V = "Varones",
    casos_prop_T = "Transgenero",
    casos_prop_SE = "Sin identificar") %>% 
  fmt_percent(
    columns = starts_with("casos_prop_"),
    decimals = 1) %>% 
  tab_footnote("No incluye a√±os anteriores a 2013. La serie se suspende en 2019.") %>% 
  tab_source_note("Fuente: Ministerio de Justicia. Unidad de Registro, Sistematizaci√≥n y Seguimiento de femicidios y de homicidios agravados por el g√©nero.") %>% 
tab_style(
    style = cell_text(weight = "bold"), # Texto en negrita
    locations = cells_body(columns = anio) # Aplicar a las celdas de la columna 'anio'
  ) %>%
  # A√±adimos un borde al encabezado
  tab_options(
    heading.border.bottom.style = "thick"
  )
```

## Una grm√°tica de tablas para comunicar mejor {.smaller}

Al igual que con `ggplot2`, `gt` te permite construir tablas hermosas y profesionales capa a capa. Combinando la preparaci√≥n de datos con `dplyr` y las funciones de `gt`, vas a tener un mayor control sobre c√≥mo presentar tus datos de forma tabular.

Funciones clave de gt:

-   gt(data): Crea el objeto tabla base.√ß
-   tab_header(): T√≠tulo y subt√≠tulo.
-   cols_label(): Cambiar etiquetas de columnas.
-   fmt\_\*(): Formatear contenido de celdas (n√∫meros, fechas, moneda, etc.).
-   tab_source_note(): Nota de la fuente.
-   tab_footnote(): A√±adir notas al pie.
-   tab_style(): Aplicar estilos a celdas o grupos de celdas.
-   tab_options(): Modificar opciones generales de la tabla.

::: callout-tip
### Explora la documentaci√≥n de gt y su p√°gina web

Hay dos funciones s√∫per √∫tiles de gt() [`tab_spanner()`](https://gt.rstudio.com/reference/tab_spanner.html) y [`summary_rows()`](https://gt.rstudio.com/articles/creating-summary-lines.html?q=summary_rows()#using-multiple-calls-of-summary_rows) ¬øQu√© funci√≥n cumple cada una?
:::

## La yapa: gtExtras {.smaller}

El objetivo de gtExtras es proporcionar algunas funciones auxiliares adicionales para ayudar a crear hermosas tablas con gt como por ej a√±adir mini-gr√°ficos o barras de datos dentro de las celdas (gtExtras).

```{r}
#| code-fold: true

df_resumen %>%
  gt() %>%
  tab_header(
    title = "Cantidad de Casos Registrados por A√±o e Identidad de G√©nero de la V√≠ctima",
    subtitle = "Registro de Femicidios y Homicidios Agravados por G√©nero (2013-2019)" )  %>% 
  # Cambiamos las etiquetas de las columnas
  cols_label( 
    anio = "A√±o",
    casos_total = "N total casos",          
    casos_prop_M = "Mujeres",
    casos_prop_V = "Varones",
    casos_prop_T = "Transgenero",
    casos_prop_SE = "Sin identificar") %>% 
  fmt_percent(
    columns = starts_with("casos_prop_"),
    decimals = 1) %>% 
  tab_footnote("No incluye a√±os anteriores a 2013. La serie se suspende en 2019.") %>% 
  tab_source_note("Fuente: Ministerio de Justicia. Unidad de Registro, Sistematizaci√≥n y Seguimiento de femicidios y de homicidios agravados por el g√©nero.") %>% 
tab_style(
    style = cell_text(weight = "bold"), # Texto en negrita
    locations = cells_body(columns = anio) # Aplicar a las celdas de la columna 'anio'
  ) %>%
  # A√±adimos un borde al encabezado
  tab_options(
    heading.border.bottom.style = "thick"
  ) %>%
  gtExtras::gt_plt_bar(column = casos_total, keep_column = TRUE, width = 15) 
```
