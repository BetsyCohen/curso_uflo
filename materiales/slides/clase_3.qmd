---
title: "Flujo de trabajo con datos en R: importacion y exploraci√≥n inicial"
subtitle: "An√°lisis de Datos 1"
author: "Betsy Cohen"
logo: "images/logo-uflo.png"
date: "10/04/2025"
format:
  revealjs:
    width: 1600
    height: 900
    theme: slides.scss
    highlight-style: a11y
    transition: fade
    slide-number: true
execute:
  echo: true
df-print: kable
---

# Que vamos a ver en esta clase

En la clase de hoy, vamos a cubrir dos aspectos esenciales para cualquier proyecto de an√°lisis de datos:

1.  **Flujo de Trabajo:** Entender los pasos **generales** que seguimos desde que tenemos una pregunta de investigaci√≥n hasta que comunicamos resultados.
2.  **Importaci√≥n de Datos desde csv:** Aprender a traer datos a R desde archivos csv, tanto online como locales.
3.  **Exploraci√≥n de Datos:** Aprender a usar algunas funciones b√°sicas de exploraci√≥n de los datos

En todo ello vamos a usar paquetes de la libreria **tidyverse** y vamos gestionarlo siguiendo buenas pr√°cticas usando **Proyectos de R y el paquete `here()`**

# 1. Flujo de Trabajo en un Proyecto de An√°lisis de Datos üìä

Un flujo de trabajo bien definido nos ayuda a:

-   **Organizar** nuestro proyecto.
-   **Ser m√°s eficientes** y evitar errores.
-   **Garantizar la reproducibilidad** de nuestro an√°lisis.
-   **Comunicar** nuestros resultados de forma clara.

## Uso de Proyectos de R para Organizar tu Trabajo üóÇÔ∏è {.smaller}

Antes de empezar a importar datos, recordemos **por qu√© es fundamental trabajar con Proyectos de R**:

-   **Organizaci√≥n:** Un proyecto de R crea una carpeta dedicada para todos los archivos de tu an√°lisis: scripts, datos, documentos, etc. ¬°Todo en un solo lugar!
-   **Rutas relativas:** Dentro de un proyecto, puedes usar rutas relativas para acceder a tus archivos, lo que hace que tu c√≥digo sea **m√°s portable y reproducible**.
-   **Entorno de trabajo aislado:** Cada proyecto tiene su propio entorno, evitando conflictos entre diferentes an√°lisis.
-   **Facilita la colaboraci√≥n:** Compartir un proyecto de R con otros es mucho m√°s sencillo que compartir archivos sueltos.

::: callout-tip
### Bati consejo

Siempre empez√° creando un Proyecto de R antes de empezar a analizar datos
:::

## Bajamos el Archivo y lo guardamos en el proyecto üìÇ

Vamos a trabajar con los datos de la Encuesta Nacional de Consumos Culturales 2022-2023 realizada desde el Sistema de Informaci√≥n Nacional de Cultura Argentina (SiNCA)

Vamos directamente al [portal de datos abiertos de Cultura](https://www.datos.gob.ar/dataset/cultura-encuesta-nacional-consumos-culturales) vamos a buscar el archivo **Encuesta Nacional de Consumos Culturales 2022-2023** y solo hacer clic en el bot√≥n de descargar.

Vamos a guardar el archivo csv en una carpeta **DENTRO** de **nuestro proyecto**

::: callout-tip
## Buenas pr√°cticas

Siempre es una buena idea no revolear el archivo por cualquier lado sino DENTRO del proyecto que ya creamos. ![](images/meme_buenas_practicas.png){width="3%"}
:::

## Leer el archivo (la forma desprolija)

Una opci√≥n ser√≠a usar la funci√≥n read_csv usando tooooda la ruta de nuestra compu, algo asi como

`read.csv(C:/Users/TuUsuario/Documentos/MiProyecto/data/base-datos-encc-2022-2023.csv)`

Si bien funciona no es lo recomendable. Es por eso que en situaciones como estas nos ayudamos con un paquete llamado...

##  {background-image="https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/here.png" background-size="700px"}

## Librer√≠a `here()` para Rutas de Archivos Inteligentes üìç

Para trabajar con rutas relativas de forma a√∫n m√°s f√°cil y robusta dentro de un Proyecto de R, vamos a usar el paquete **`here()`**.

**¬øQu√© hace `here()`?**

-   Te ayuda a construir rutas de archivos **relativas a la ra√≠z de tu Proyecto de R**.
-   **No importa d√≥nde abras o ejecutes tu script**, `here()` siempre encontrar√° los archivos correctamente, ¬°siempre que est√©n dentro de la estructura de tu proyecto!

## Instalando y cargando `here()`:\*\*

Como siempre vamos a instalar la librer√≠a con la funci√≥n `install.packages()` **una vez:**

```{r eval=FALSE}
install.packages("here")
```

Y la vamos a **cargar al inicio de tu script, notebook, o Quarto file:**

```{r}
library(here)
```

## Usando `here()` para la Ruta al Archivo Local {.smaller}

Ahora, en lugar de escribir la ruta completa "C:/Users/TuUsuario/Documentos/MiProyecto/data/base-datos-encc-2022-2023.csv" (que no es portable), vamos a usar `here()` para construir la ruta de forma relativa a la ra√≠z del proyecto. En mi caso el archivo lo descargue dentro de los materiales de este curso en una carpeta que llame datasets por lo que mi c√≥digo usando here() ser√°:

```{r}
ruta_archivo_local <- here("materiales/datasets", "base-datos-encc-2022-2023.csv")
ruta_archivo_local # Para ver la ruta que construye here()

encuesta <- read.csv(ruta_archivo_local)
head(encuesta)
```

## ¬øQu√© hicimos hasta ac√°?

-   `ruta_archivo_local <- here("datasets", "base-datos-encc-2022-2023.csv")`: `here("datasets", "base-datos-encc-2022-2023.csv")` construye la ruta al archivo. `here()` asume que la carpeta "datasets" est√° dentro de la ra√≠z de tu proyecto, y "base-datos-encc-2022-2023.csv" dentro de "datasets".

-   `ruta_archivo_local`: Imprimimos la variable `ruta_archivo_local` para ver qu√© ruta completa construy√≥ `here()`. Esto es √∫til para verificar que la ruta sea correcta.

-   `read.csv(ruta_archivo_local)`: Leemos el archivo csv usando la ruta construida por `here()`.

## Por qu√© me conviene usar `here()`

-   **Portabilidad:** El c√≥digo funcionar√° en cualquier computadora, siempre que el archivo "Encuestas ATTTA.xlsx" est√© en la carpeta "data" dentro del proyecto.

-   **Legibilidad:** `here("data", "base-datos-encc-2022-2023.csv")` es mucho m√°s claro y f√°cil de entender que una ruta completa "C:/...".

-   **Mantenibilidad:** Si cambias la estructura de carpetas de tu proyecto, solo necesitas ajustar la llamada a `here()`, no todas las rutas en tu c√≥digo.

## 2. Importar el csv Directamente desde la URL (Online) üåê

"Pero Betsy, ¬øpara qu√© me voy a bajar el archivo si ya est√° on line?"

Podemos leer el archivo csv **directamente desde la URL de GitHub** usando `read.csv()` y la **URL del archivo**.

## Paso 1: obtener la URL del archivo:

1.  Vamos nuevamente al portal de datos pero esta vez en vez de hacer clic en Descacar con el bot√≥n izquierdo del mouse lo hacemos con el bot√≥n derecho lo cual nos va abrir un desplegable que nos permite copiar la URL de descarga. en este caso: *"https://datos.cultura.gob.ar/dataset/251c2ac2-e670-451c-9dbf-a4212af225b5/resource/b635d1fc-2161-4901-a21d-7f93d56d99a4/download/base-datos-encc-2022-2023.csv"*
2.  Copiamos la URL y vamos a R
3.  La url vamos a asignarsela a un valor dentro de nuestro Global Enviromenent usanbdo el s√≠mbolo **\<-** y poniendo la URL entre comillas:

```{r}
url_encuesta <- "https://datos.cultura.gob.ar/dataset/251c2ac2-e670-451c-9dbf-a4212af225b5/resource/b635d1fc-2161-4901-a21d-7f93d56d99a4/download/base-datos-encc-2022-2023.csv"
```

## Paso 2: cargar la base {.smaller .scrollable}

```{r}
encuesta_version_directo_online <- read.csv(url_encuesta)

head(encuesta_version_directo_online)
```
## ¬øcsv con encoding rebeldes? {.smaller}
A veces los archivos contienen caracteres especiales (como tildes o √±) que no se ven bien si la computadora no entiende c√≥mo est√°n guardados. 
Vamos a tratar de leer el archivo y nos va a dar un error diciendo que no comprende el **encoding** de un archivo. `guess_encoding` de `readr`

```{r}
# > library(readr)
# > guess_encoding(url_de_un_csv_que_se_empaco)
# # A tibble: 2 √ó 2
#   encoding   confidence
#   <chr>           <dbl>
# 1 ISO-8859-1       0.70
# 2 ISO-8859-2       0.30
```


üëâ Aqu√≠, ISO-8859-1 (tambi√©n llamado "Latin-1") es el formato con mayor probabilidad (70% de confianza). Esto significa que lo m√°s seguro es que el archivo est√© guardado en este formato.


üëâ ISO-8859-2 tiene 30% de confianza, lo que indica que algunos caracteres podr√≠an estar en este otro formato.


**¬øQu√© hacer con esta informaci√≥n?**
Cuando importamos el archivo en R, debemos usar la codificaci√≥n correcta para evitar errores con caracteres especiales. Como ISO-8859-1 tiene la confianza m√°s alta, lo importamos as√≠:

```{r}
# datos <- read.csv("url_de_un_csv_que_se_empaco", fileEncoding = "ISO-8859-1")
```


## ¬°Datos Importados Exitosamente!

Ya sea que importes el archivo **directamente desde la URL de GitHub (online)** o **desde un archivo local** usando `here()`, ahora tienes los datos en R como data frames.

¬°Est√°n listos para empezar a explorarlos y analizarlos con las herramientas tidyverse!

# 3. Exploraci√≥n inicial de datos: Primer Vistazo üëÄ {.smaller}

Despu√©s de importar nuestros datos, lo primero que debemos hacer es **explorarlos para entender su estructura y contenido**. Esto nos ayudar√° a:

-   **Verificar que la importaci√≥n fue exitosa** y que los datos se cargaron correctamente.
-   **Identificar el tipo de datos** de cada columna (num√©rico, texto, fechas, etc.).
-   **Tener una idea general del contenido** y los valores que toman las variables.
-   **Detectar posibles problemas iniciales** como errores de lectura, valores faltantes inesperados, etc.

Vamos a ver algunas funciones esenciales para esta exploraci√≥n inicial.

Como ejemplo vamos a estar usando un dataset de jugeuete que se llama **iris** (por una cuesti√≥n de espacio en esta presentaci√≥n), pero en clase vamos a estar trabajando con la encuesta que hemos cargado.

## `glimpse()` y `str()`: Radiograf√≠a de la Estructura ü¶¥

Las funciones `glimpse()` (del paquete `dplyr`, parte del `tidyverse`) y `str()` (de R base) nos dan una **visi√≥n general de la estructura de nuestro data frame:**

-   **`glimpse(nombre_dataframe)`**: Muestra las **columnas en filas**, indicando el **tipo de dato** de cada columna y las **primeras observaciones** de cada una. Es muy √∫til para data frames anchos (con muchas columnas) porque es m√°s f√°cil de leer horizontalmente.

-   **`str(nombre_dataframe)`**: Muestra la **estructura interna** del objeto R (en este caso, un data frame). Indica el **tipo de dato** de cada columna y tambi√©n muestra **algunas observaciones**, pero de forma vertical. Es m√°s detallada que `glimpse()` en cuanto a informaci√≥n interna, pero puede ser menos legible para data frames muy anchos.

## `glimpse()` y `str()`: Radiograf√≠a de la Estructura ü¶¥ {.smaller}

::: columns
::: {.column width="50%"}
```{r}
library(dplyr)
glimpse(iris)
```
:::

::: {.column width="50%"}
```{r}
str(iris)
```
:::
:::

## head() y tail(): Primeras y √öltimas Filas ‚è´ ‚è¨

Las funciones head() y tail() nos permiten ver las primeras y √∫ltimas filas de nuestro data frame, respectivamente:

-   **head(nombre_dataframe, n = X):** Muestra las primeras X filas del data frame (por defecto, n = 6 si no se especifica). √ötil para ver un vistazo inicial de los datos.

-   **tail(nombre_dataframe, n = X):** Muestra las √∫ltimas X filas del data frame (por defecto, n = 6). Puede ser √∫til para verificar si hay alg√∫n problema al final del archivo o simplemente para inspeccionar las √∫ltimas observaciones.

## head() y tail(): Primeras y √öltimas Filas ‚è´ ‚è¨

::: columns
::: {.column width="50%"}
```{r}
head(iris)
```
:::

::: {.column width="50%"}
```{r}
tail(iris)
```
:::
:::

## summary(): Un resumen Estad√≠stico B√°sico üìä

La funci√≥n summary() nos proporciona un resumen estad√≠stico b√°sico de cada columna de nuestro data frame:

summary(nombre_dataframe): Calcula y muestra diferentes estad√≠sticos descriptivos seg√∫n el tipo de dato de cada columna:

-   Para columnas num√©ricas: M√≠nimo, Primer Cuartil, Mediana, Media, Tercer Cuartil, M√°ximo.

-   Para columnas de texto (factor o character): Cantidad de observaciones, clase (tipo de dato), y hasta los valores y frecuencias m√°s comunes (si son pocos valores √∫nicos).

-   Para columnas l√≥gicas (TRUE/FALSE): TRUE, FALSE y NA's (valores faltantes).

## summary(): Un resumen Estad√≠stico B√°sico üìä

```{r}
summary(iris)
```

## summary(): Un resumen Estad√≠stico B√°sico üìä

O puedo por ejemplo seleccionar una sola columna y ver los estad√≠sticos de resumen.

```{r}
summary(iris$Sepal.Length)
```

::: callout-note
### ¬øQu√© nos dice summary?

Usando la encuesta que descargamos elegi algunas de las columnas e interpret√° los datos que te brinda summary. Vamos a compartir nuestras conclusiones en clase
:::

## Exploraci√≥n Inicial: ¬°Primeros Pasos S√≥lidos! üí™

Con las funciones glimpse(), str(), head(), tail() y summary(), ya tienes herramientas poderosas para dar un primer vistazo efectivo a tus datos justo despu√©s de importarlos.

En las pr√≥ximas clases, profundizaremos en las siguientes etapas del flujo de trabajo en el universo de **Tidyverse**: ETL (limpieza y transformaci√≥n de datos) y EDA (an√°lisis exploratorio), donde usaremos muchas m√°s funciones del tidyverse para preparar y analizar nuestros datos en detalle.

¬°Pero por ahora, ya diste los primeros pasos fundamentales para trabajar con datos en R! ¬°Felicitaciones!
