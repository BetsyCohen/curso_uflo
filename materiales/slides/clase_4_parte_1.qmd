---
title: "Introducci√≥n al Tidyverse: El Universo de Herramientas para transformaci√≥n de datos"
subtitle: "An√°lisis de Datos 1"
author: "Betsy Cohen"
logo: "images/logo-uflo.png"
date: "10/04/2025"
format:
  revealjs:
    width: 1600
    height: 900
    theme: slides.scss
    highlight-style: a11y
    transition: fade
    slide-number: true
execute:
  echo: true
df-print: kable
---

# El tidyverso: la frontera final

En la clase de hoy, nos sumergirnos en el universo de **`tidyverse`**, un conjunto de paquetes de R esencial para el an√°lisis de datos. Cuando esta clase termine no solo vamos a poder importar datos de las distintas fuentes y hacer una exploraci√≥n general, sino tambi√©n emepzar a manipular y encadenar operaciones entre s√≠.

## ¬øQu√© es Tidyverse? ü§î {.smaller}

El `tidyverse` no es solo un paquete de R, ¬°es una **colecci√≥n de paquetes** dise√±ados para trabajar juntos de forma armoniosa en el an√°lisis de datos! Piensen en √©l como un **"universo" o "ecosistema" de herramientas**.

**Caracter√≠sticas Clave del Tidyverse:**

-   **Filosof√≠a "Tidy Data"**: Organizaci√≥n de datos de forma consistente y f√°cil de usar (datos "ordenados").
-   **Sintaxis Consistente y Verbosa**: Funciones con nombres claros (verbos) que hacen tareas espec√≠ficas. C√≥digo f√°cil de leer y entender.
-   **Dise√±ado para el Flujo de Trabajo de Data Science**: Paquetes para cada etapa del an√°lisis: importaci√≥n, limpieza, transformaci√≥n, visualizaci√≥n, modelado, comunicaci√≥n.
-   **√ânfasis en la Legibilidad y la Reproducibilidad**: C√≥digo m√°s f√°cil de escribir, leer, mantener y compartir.
-   **Comunidad Activa y Documentaci√≥n Exhaustiva**: Gran apoyo y recursos para aprender y resolver problemas.

## Un flujo de trabajo ordenado o tidy tiene fases que iteran entre s√≠ {.smaller}

![](images/FlujoETL.png)

## Tidyverse propone uno o varios paquetes que conservando una l√≥gica similar responden a cada una de estas etapas {.smaller}

![](images/FlujoETLTidyverse.png)

## Paquetes principales de Tidyverse: ¬°Los 8 Magn√≠ficos! ‚ú® {.smaller}

Aunque `tidyverse` incluye muchos paquetes, hay **8 paquetes "centrales"** que son los m√°s esenciales y que se cargan autom√°ticamente al cargar `tidyverse` con `library(tidyverse)`:

![](images/tidyverse_hex_core_packages.png){width="655"}

## Paquetes principales de Tidyverse: ¬°Los 8 Magn√≠ficos! ‚ú® {.smaller}

1.  **`ggplot2`**: ¬°Para visualizaciones de datos impresionantes y personalizables!
2.  **`dplyr`**: ¬°Para manipulaci√≥n y transformaci√≥n de datos! (Verbos: `filter`, `select`, `mutate`, `arrange`, `summarize`, `group_by`)
3.  **`tidyr`**: ¬°Para "ordenar" tus datos y organizarlos en formato "tidy"!
4.  **`readr`**: Para importar datos de forma r√°pida y eficiente (Funciones: `read_csv`, `read_tsv`, `read_delim`, etc. - **Alternativa a `read.csv` y funciones base de R** )
5.  **`purrr`**: ¬°Para programaci√≥n funcional y trabajar con listas de forma elegante!
6.  **`tibble`**: ¬°Para crear data frames modernos y mejorados! (**Alternativa a los data frames base de R**, m√°s "amigables" y consistentes)
7.  **`stringr`**: ¬°Para manipulaci√≥n de cadenas de texto (strings)!
8.  **`forcats`**: ¬°Para trabajar con variables categ√≥ricas (factores)!

**¬°Y muchos m√°s paquetes √∫tiles en el "universo" Tidyverse!** (como `readxl`, `lubridate`, `httr`, `rvest`, etc.)

## Instalando y Cargando el Tidyverse üì¶

**Instalar Tidyverse (solo la primera vez):**

Para instalar cualquier librer√≠a siempre usamos la funci√≥n `install.packages()` por lo que si a√∫n no lo hiciste deberas escribir:

```{r eval=FALSE}
install.packages("tidyverse")
```

Y cada vez que querramos usar el proyecto deberemos cargarlo *al inicio de cada sesi√≥n de R:* escribiendo `library()` y el nombre de la librer√≠a

```{r}
library(tidyverse)
```

Y as√≠ cuando cargamos `tidyverse` , **se cargan autom√°ticamente los paquetes que este contiene**. ¬°Listos para usar!

## Cargar los datos

Vamos a trabajar con la [serie hist√≥rica de Encuesta Nacional de Consumos Culturales](https://datos.cultura.gob.ar/dataset/encuesta-nacional-de-consumos-culturales) que representa las olas 2013,2017 y 2022 de este estudio.

```{r}
# creamos el vector con la url
encc_serie_hist_url <- "https://datos.cultura.gob.ar/dataset/251c2ac2-e670-451c-9dbf-a4212af225b5/resource/d9570d16-f5d1-4d18-8145-3372eafb97af/download/encc-serie-historica.csv"  

# lo asignamos a un objeto tabla con la funci√≥n read.csv
encc_serie_hist <- read.csv(encc_serie_hist_url)

# vemos los primeros 3 casos
head(encc_serie_hist,3)
```

# dplyr: el "domador" de datos

El paquete dplyr es uno de los paquetes embebidos dentro del paquete tidyverse: un conjunto de paquetes destinados a la limpieza y manipulaci√≥n de datos y que se convirti√≥ en un est√°ndar en la pr√°ctica de la limpieza y manipulaci√≥n de datos en R.

![](https://asterhu.com/post/2023-05-11-coalesce-join-in-R/dplyr.png){fig-align="center" width="241"}

## Verbos B√°sicos del Tidyverse: ¬°Acciones con Datos! üé¨

Dentro del `tidyverse`, especialmente en el paquete **`dplyr`** vamos a trabajar mucho con:

-   **`select()`**: Selecciona las **columnas** que necesitas.
-   **`filter()`**: Filas las **filas** u observaciones que cumplen con ciertas condiciones.
-   **`mutate()`**: Crear nuevas columnas a partir de las existentes.
-   **`group_by()`**: agrupar filas seg√∫n los valores de una o m√°s columnas.
-   **`summarize()`**: Resume o hace un c√°lculo para los datos que agrupamos.
-   **`arrange()`**: Ordenar **filas** seg√∫n los valores de una o m√°s columnas.

## Como por un tubo: Los Pipes `%>%`

Todos estos verbos se van a ir encadenando por una especie de tubo o **pipes** que representamos con `%>%` (Ctrl+may+M)

![](https://magrittr.tidyverse.org/logo.png){fig-align="center" width="102"}

**¬øQu√© hacen los pipes `%>%`?**

-   **Conectan** operaciones en secuencia (de izquierda a derecha, de arriba a abajo).
-   **Toman el resultado de la operaci√≥n de la izquierda y lo "env√≠an"** como *primer argumento* a la funci√≥n de la derecha.
-   Permiten escribir c√≥digo de forma m√°s lineal, clara y f√°cil de leer, especialmente para secuencias largas de transformaciones de datos.
-   Evitan crear variables intermedias innecesarias, haciendo el c√≥digo m√°s conciso y limpio.

## Pipe es como decirle "Y despu√©s"

![](https://www.rforecology.com/pipes_image0.png)

## Puede ser que en alguna documentaci√≥n o libro encuentres otro "modelo" de pipe {.smaller}

Esto se debe a que una versi√≥n de pipe es nativa y la otra no. Pero a los fines de lo que necesitas saber hasta ahora tienen la misma funci√≥n.

![](https://kpress.dev/blog/2022-06-19-replacing-the-magrittr-pipe-with-native-r-pipe/featured.png){fig-align="center" width="185"}

## Arranquemos por llamar a tidyverse üì¢ {.smaller}

La primera vez que llamamos a tidyverse nos da un mensaje de advertencia, en donde nos pone al tanto de los paquetes que nos est√° trayendo y algunos conflictos entre funciones.

```{r}
library(tidyverse)
```

::: callout-tip
## El que avisa no traiciona

Tidyverse nos informa que pueden existir conflictos entre algunas de sus funciones. Esto se debe a que inicialmente su desarrollo se realiz√≥ de manera separada y por lo tanto las funciones tienen el mismo nombre. Para evitar problemas podes usar el nombre del paquete dos puntos y el nombre de la funci√≥n.
:::

## 1. Seleccionando **columnas** con `select()`

Hasta ahora hab√≠amos visto que pod√≠amos llamar a una columna en particular con el signo \$ o con \[,columna_seleccionada\]

```{r}
# traigo los primeros casos de la columna NSE_SOCIOE
head(encc_serie_hist$NSE_SOCIOE)
```

la funci√≥n `select()` me permite hacer esto con muchas columnas. Veamos este ejemplo en el que charlamos usando verbos y el pipe (y despu√©s)

```{r}
encc_serie_hist |> # toma la tabla encc_series_hist y despu√©s...
  select(ID,EDICION,EDAD,GRUPOS_EDAD) |> # selecciona las columnas que te indico, y despu√©s
  head() # selecciona los primeros 5 casos
```

## 2. Filtrando **filas** con `filter()`

Con filter vamos filtrar las observaciones que cumplan determiada condici√≥n.

```{r}
encc_serie_hist |> # toma la tabla encc_series_hist y despu√©s...
  select(ID,EDICION,EDAD,GRUPOS_EDAD) |> # selecciona las columnas que te indico, y despu√©s
  filter(EDICION == 2022) |>  # traeme solamente los casos de la edici√≥n 2022 y despu√©s
  tail() # # selecciona los √∫ltimos 5 casos
```

## 3. Crear columnas nuevas con `mutate()`

Supongamos que quisiera saber la edad de todos los entrevistados al dia de hoy

```{r}
encc_serie_hist |> # toma la tabla encc_series_hist y despu√©s...
  select(ID,EDICION,EDAD,GRUPOS_EDAD) |> # selecciona las columnas que te indico, y despu√©s
  filter(EDICION == 2022) |>  # traeme solamente los casos de la edici√≥n 2022 y despu√©s
  mutate(edad_2025 = EDAD+3) |> # crea una nueva columna (edad_2025) que es igual a edad+3 y despu√©s
  sample_n(size = 4) # crea una muestra de 4 casos 
  
```

## 4.`summarise()` y `group_by()`

Al pricipio summarise y group_by pueden resultarnos un poco contra intutivos.

```{r}
encc_serie_hist |> # toma la tabla encc_series_hist y despu√©s...
  select(ID,EDICION,EDAD,GRUPOS_EDAD) |> # selecciona las columnas que te indico, y despu√©s
  filter(EDICION == 2022) |>  # traeme solamente los casos de la edici√≥n 2022 y despu√©s
  mutate(edad_2025 = EDAD+3) |> # crea una nueva columna (edad_2025) que es igual a edad+3 y despu√©s
  group_by(GRUPOS_EDAD) |> #
  summarise(edad_promedio = mean(EDAD),
            edad_promedio_2025 = mean(edad_2025))
  
```

## ¬°Ya aprendimos a conjugar con `dplyr`! {.fit-text}

# Y ahora c√≥mo seguimos?

En esta clase aprendimos a usar los verbos b√°sicos del paquete `dplyr` junto con el conector de estos verbos el pipe **%\>%**

Hacete un buen üßâ que en la segunda parte de nuestra clase vamos a ver:

-   C√≥mo unir dos tablas de resumen entre s√≠ (porque los datos no vienen siempre todos juntos, ni de una) -

-   C√≥mo "dar vuelta" una tabla. (Porque a veces la tortilla necesita vuelta y vuelta)

-   C√≥mo aplicar una transformaci√≥n a muchas variables de un toque (porque nos encanta trabajar menos y evitarnos errores)
