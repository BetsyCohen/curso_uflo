---
title: "Ejercicio Pr√°ctico: Visualizando Movilidad y Gasto Tur√≠stico con `ggplot2`"
format: html
editor: visual
---

## Visualizando Patrones de Movilidad y Gasto en el Turismo Receptivo

![](https://static.hosteltur.com/app/public/uploads/img/articles/2013/01/01/L_5c1a313241f50_1020_chinos_g4.jpg)

En este ejercicio vamos a trabajar en la visualizaci√≥n de Patrones de Movilidad y Gasto en el Turismo Receptivo usando dos datasets del [Sistema de Informaci√≥n Tur√≠stica de la Argentina (SINTA)](https://www.yvera.tur.ar/sinta/)

1.  **Gastos de Turistas No Residentes:** Informaci√≥n trimestral sobre el gasto promedio seg√∫n el paso fronterizo de ingreso.
2.  **Vuelos, Asientos y Pasajeros:** Datos diarios sobre el movimiento a√©reo (cabotaje e internacional).

## ¬øQu√© vamos a aprender con este ejercicio?

Adem√°s de poner en pr√°ctica de manera integrada las transformaciones de dplyr agregamos algunas funciones muy √∫tiles de otros paquetes que forman parte del tiduverso o son complementarios a √©l.

-   **Formateo de etiquetas de las escalas**: dentro de la capa de escalas tenemos un par√°metro llamado labels. El paquete [`scales`](https://scales.r-lib.org/) nos brinda varias funciones que nos permiten setear las etiquetas de los valores que vemos en los ejes para que sean m√°s legibles. Vamos a usar tres de ellas [`label_number()`](https://scales.r-lib.org/reference/label_number.html), [`label_currency()`](https://scales.r-lib.org/reference/label_currency.html) ,[`label_percent()`](https://scales.r-lib.org/reference/label_percent.html)

-   **Formatear fechas**: [`lubridate`](https://lubridate.tidyverse.org/index.html) es una librer√≠a de la familia `tidyverse` que nos facilita para trabajar con fechas. En este ejercicio mostramos el uso de [`year()`](https://lubridate.tidyverse.org/reference/year.html) en conjunto con [`as_date()`](https://lubridate.tidyverse.org/reference/as_date.html) que permite que extraer el a√±o de una fecha cuya variable tiene formato character.

-   **Factores ordenados** [`forcats`](https://forcats.tidyverse.org/index.html) es otra librer√≠a del tidyverso que facilita el trabajo con variables de tipo factor. En este ejercicio nos vamos a familiarizar con una de sus funciones: [`fct_reorder()`](https://forcats.tidyverse.org/reference/fct_reorder.html)

## üì¶ Setup: Carg√° las librerias y los dataset

```{r}
#| output: false

# cargar librer√≠as ----

library(tidyverse)
library(scales) # Para formatear la capa de ejes
library(ggthemes) # Para formatear la capa de temas

# cargar datasets -----

## df_gastos_no_residentes ----
url_gastos <- ("https://datos.yvera.gob.ar/dataset/78b880c1-50d5-4a0c-9c87-7350e70548c2/resource/9a2c43e4-8037-4cf3-8559-bdab2a37ca94/download/gasto_total_promedio_diario_por_turista_en_usd_turistas_no_residentes_trimestral_segun_paso.csv")

df_gastos_no_residentes <- read.csv(url_gastos)


## df_vuelos_asientos_pasajeros ----
url_vuelos <- "https://datos.yvera.gob.ar/dataset/c0e7bc3d-553c-405c-8b32-79282b28ffd5/resource/03b4176f-a065-450a-b411-101d2a884720/download/vuelos_asientos_pasajeros.csv"

df_vuelos_asientos_pasajeros <- read.csv(url_vuelos)
```

## üëì Pegamos un vistazo a los datos

```{r}
glimpse(df_gastos_no_residentes)
glimpse(df_vuelos_asientos_pasajeros)
```

## üë©‚Äçüç≥ Preparaci√≥n de datos

Agregamos en ambas bases variables de resumen de fecha anio y cuatrimestre usando las funciones `year()` y `quarter()` de la librer√≠a `lubridate` que forma parte de `tidyverse`.

```{r}
df_gastos_no_residentes <- df_gastos_no_residentes %>%
  mutate(
    # creamos variables para el a√±o y el cuatrimestre
    anio = year(as_date(indice_tiempo)),
    cuatrimestre = quarter(as_date(indice_tiempo) )
  ) 


df_vuelos_asientos_pasajeros <- df_vuelos_asientos_pasajeros %>%
  mutate(
    # creamos variables para el a√±o y el cuatrimestre
    anio = year(as_date(indice_tiempo)),
    cuatrimestre = quarter(as_date(indice_tiempo) )
  ) 

```

## üëâ Ejercicio 1

¬øCuantos pasajeros ingresaron por a√±o en vuelos de cabotaje y vuelos internacionales?

Crea un gr√°fico de columnas apiladas y escrib√≠ una breve lectura del mismo.

Como la suma de pasajeros supera los millones podes usar el siguiente c√≥digo en tu capa de escalas usando la funci√≥n `label_number()` de la librer√≠a `scales` de esta manera:

**`scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M"))`**

::: {.callout-tip collapse="true"}
### Ayuda

Divid√≠ tu trabajo en pasos encadenados:

1 Hace las transformaciones **agrupando** por a√±o y clasificaci√≥n del vuelo y calculando la suma de pasajeros. No olvides setear el par√°metro `na.rm= TRUE` en la suma para que no te de error en caso que haya datos nulos.

2 Llama a ggplot y dise√±a la **capa de mapeo de datos** poniendo en la x el a√±o y en la y tu suma de pasajeros, usa como variable de relleno o `fill` la clasificaci√≥n del tipo de vuelo.

3 Eleg√≠ la **geometr√≠a** de columnas y si te copas setea la **posici√≥n** como barras apiladas.

4 Facilita la lectura de los datos de cantidad de pasajeros con la capa de escalas.

5 Un gr√°fico siempre se lee mejor si le ponemos una capa de anotaciones indicando etiquetas (labs) para el t√≠tulo ejes y categor√≠as de la variable de relleno.

6 *Lindo es mejor que feo*: Proba distintos estilos de theme que te ofrece el paquete ggthemes.
:::

::: {.callout-note collapse="true"}
### Respuesta

```{r}
df_vuelos_asientos_pasajeros %>%
  group_by(anio, clasificacion_vuelo) %>%
  summarise(pasajeros = sum(pasajeros, na.rm = TRUE), .groups = "drop") %>%
  ggplot(aes(x = as.factor(anio), y = pasajeros, fill = clasificacion_vuelo)) +
  geom_col(position = "stack") +
  scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
  scale_x_discrete(drop = FALSE)+
  scale_fill_manual(values = c("Cabotaje" = "#00A7E1","Internacional" = "#cf5151"))+
  labs(
    title = "Pasajeros por tipo de vuelo y a√±o",
    x = "Cuatrimestre",
    y = "Pasajeros (en millones)",
    fill = "Tipo de vuelo",
    caption = "Fuente = SINTA"
  )+
  # geometria de texto para agregar "los valores."etiquetas" a los valores
  geom_text(
    aes(label = scales::label_number(scale = 1e-6, suffix = "M")(pasajeros)),
    position = position_stack(vjust = 0.5),
    color = "white",
    size = 3
  ) + 
  ggthemes::theme_hc()
```
:::

## üëâ Ejercicio 2

¬øQu√© tan llenos ven√≠an los vuelos de cabotaje e internacionales en cada a√±o?

Realiza un gr√°fico con **geometr√≠a de l√≠neas** (geom_line) para comparar ambos tipos de vuelos.

Para poder indicar el color de las lineas (correspondiente a las categor√≠as en tipo de vuelo) utiliza el parametro **color** de dentro de la capa de mapeo de los datos

Para expresar la relaci√≥n entre pasajeros y asientos con una etiqueta de porcentaje usar el siguiente c√≥digo en tu capa de escalas usando la funci√≥n `label_number()` de la librer√≠a `scales` de esta manera:

**`scale_y_continuous(labels = scales::label_percent(accuracy = 1))`**

::: {.callout-tip collapse="true"}
### Ayuda

Divid√≠ tu trabajo en pasos encadenados:

1 Hace las transformaciones **agrupando** por a√±o y clasificaci√≥n del vuelo. Para obtener la tasa de ocupacios vas a teener que crear una nueva variable que divida la suma de pasajeros por la suma de asientos. No olvides setear el par√°metro `na.rm= TRUE` en la suma para que no te de error en caso que haya datos nulos.

2 Llama a ggplot y dise√±a la **capa de mapeo de datos** poniendo en la x el a√±o y en la y la tasa de ocupaci√≥n, usa como variable de `color` para las lineas la clasificaci√≥n del tipo de vuelo.

3 Eleg√≠ la **geometr√≠a** de lineas.

4 Facilita la lectura de los datos de cantidad de la tasa de ocupacxion usando la capa de escalas.

5 Un gr√°fico siempre se lee mejor si le ponemos una capa de anotaciones indicando etiquetas (labs) para el t√≠tulo ejes y categor√≠as de la variable de relleno.

6 *Lindo es mejor que feo*: Proba distintos estilos de theme que te ofrece el paquete ggthemes.
:::

::: {.callout-note collapse="true"}
### Respuesta

```{r}
df_vuelos_asientos_pasajeros %>% 
  group_by(anio = anio, clasificacion_vuelo) %>% 
  summarise(asientos = sum(asientos,na.rm = T),
            pasajeros = sum(pasajeros,na.rm = T),
            .groups = "drop") %>% 
  mutate(completitud = pasajeros/asientos) %>% 
  ggplot(aes(x = anio, y = completitud, color = clasificacion_vuelo)) +
  geom_line() +
  scale_y_continuous(labels = scales::label_percent(accuracy = 1)) +
  scale_x_continuous(breaks = unique(df_vuelos_asientos_pasajeros$anio))+ # breakes label para cada a√±o explicito
  scale_color_manual(values = c("Cabotaje" = "#00A7E1","Internacional" = "#cf5151"))+
  labs(
    title = "Ocupaci√≥n de vuelos por tipo y a√±o",
    x = "A√±o", 
    y = "Completitud (%)",
    color = "Tipo de vuelo",
    caption = "Fuente = SINTA") +
  geom_text(
    aes(label = scales::label_percent(accuracy = 1)(completitud)),
    color = "black",
    size = 3
  )+
  ggthemes::theme_hc()
```
:::

## üëâ Ejercicio 3

¬øPor qu√© paso entraron los turistas que tuvieron un gasto promedio mayor en 2024? Hace un gr√°fico de barras que muestre el ranking por paso. Para ordenar la variable por ranking vas a tener que convertir la variable paso en factor ordenado usando la funci√≥n `fct_reorder()` que es parte de la librer√≠a `forcats` que como ya te est√°s imaginando.... pertenece a tidyverse. Lo hacemos as√≠:

**`mutate(paso = fct_reorder(paso, gasto_promedio_diario_en_usd_no_residentes))`**

Adem√°s si tenes ganas de representar los dolares como moneda podes usar `label_currency()` de `scales` de la siguiente manera:

**`scale_y_continuous(labels = scales::label_currency(prefix = "USD ", accuracy = 1))`**

::: {.callout-tip collapse="true"}
### Ayuda

Divid√≠ tu trabajo en pasos encadenados:

1 Hace las transformaciones **filtrando** por a√±o y **agrupando** por paso. Luego hace el promedio de gasto_promedio_diario_en_usd_no_residentes)

El truco para que luego ggplot entienda que tiene que ordenar los pasos fronterizos por gasto_promedio_diario_en_usd_no_residentes es usar la funci√≥n `fct_reorder()`

2 Llama a ggplot y dise√±a la **capa de mapeo de datos** poniendo en la `x` el los pasos y en la `y` el gasto promedio.

3 Eleg√≠ la **geometr√≠a** de columnas y gira las coordenadas con coord_flip() para que los pasos queden como una listita

4 Ahora solo algunas cuestiones de hermoseo:

setea la escala para que muestre el simbolo como moneda scale_y_continuous(labels = scales::label_currency(prefix = "USD", accuracy = 1))

Agrega los t√≠tulos con labs y si te animas una gemotr√≠a de texto

Podes elegir el tema que m√°s te guste para finalizarlo
:::

::: {.callout-note collapse="true"}
### Respuesta

```{r}
df_gastos_no_residentes %>% 
  filter(anio == 2024) %>% 
  group_by(paso) %>% 
  summarise(gasto_promedio_diario_en_usd_no_residentes = mean(gasto_promedio_diario_en_usd_no_residentes, na.rm = TRUE),.groups = "drop") %>% 
  mutate(paso = fct_reorder(paso, gasto_promedio_diario_en_usd_no_residentes)) %>% 
  ggplot(aes(
    x = paso,
    y = gasto_promedio_diario_en_usd_no_residentes
  )) +
  geom_col() +
  coord_flip()+
  scale_y_continuous(labels = scales::label_currency(prefix = "USD ", accuracy = 1)) +
  labs( 
    title = "Gasto promedio diario seg√∫n paso fronterizo",
    subtitle = "A√±o 2024 - Turistas no residentes",
    x = "", y = "Gasto promedio diario (USD)",
    caption = "Fuente: SINTA") +
  geom_text(
    aes(label = scales::label_currency(prefix = "USD ", accuracy = 1)(gasto_promedio_diario_en_usd_no_residentes)),
    position = position_stack(vjust = 0.5),
    color = "#45a35d",
    fontface = "bold"
  )+
  ggthemes::theme_hc()

    
```
:::
